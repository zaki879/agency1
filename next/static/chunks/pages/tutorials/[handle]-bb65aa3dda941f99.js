(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5908],{38479:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/[handle]",function(){return t(12749)}])},68107:function(e,n,t){"use strict";t.d(n,{Z:function(){return Index}});var s=t(85893),i=t(67294),a=t(15660),o=t.n(a);t(62356),t(98759);var r=t(27087);function Index(e){let{title:n="",code:t,language:a,highlights:l=[]}=e;return(0,i.useEffect)(()=>{o().highlightAll()},[]),(0,s.jsxs)("div",{className:"code",children:[""!=n&&(0,s.jsxs)("div",{className:"title",children:[(0,s.jsx)("p",{children:n}),(0,s.jsx)("div",{onClick:()=>{navigator.clipboard.writeText(t)},className:"copy",children:(0,s.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",height:"48",viewBox:"0 96 960 960",width:"48",children:(0,s.jsx)("path",{d:"M180 975q-24 0-42-18t-18-42V312h60v603h474v60H180Zm120-120q-24 0-42-18t-18-42V235q0-24 18-42t42-18h440q24 0 42 18t18 42v560q0 24-18 42t-42 18H300Zm0-60h440V235H300v560Zm0 0V235v560Z"})})})]}),(0,s.jsx)(r.ZP,{...r.lG,code:t,language:a,theme:void 0,children:e=>{let{className:n,style:t,tokens:i,getLineProps:a,getTokenProps:o}=e;return(0,s.jsx)("pre",{className:n,style:t,children:i.map((e,n)=>(0,s.jsxs)("div",{className:"line ".concat(l.includes(n+1)?"lineActive":""),children:[(0,s.jsx)("p",{children:n+1}),(0,s.jsx)("div",{...a({line:e,key:n}),children:e.map((e,n)=>(0,s.jsx)("span",{...o({token:e,key:n})}))})]}))})}})]})}},43088:function(e,n,t){"use strict";t.d(n,{Z:function(){return Index}});var s=t(85893),i=t(67294),a=t(15660),o=t.n(a);t(62356),t(98759);var r=t(27087);function Index(e){let{titles:n,codes:t,languages:a,highlights:l=[[],[],[]]}=e,[c,d]=(0,i.useState)(0),[h,m]=(0,i.useState)(null);(0,i.useEffect)(()=>{o().highlightAll(),m(window.innerWidth),window.addEventListener("resize",()=>{m(window.innerWidth)})},[]);let crop=(e,n)=>e.length>n&&h<800?e.substring(0,n)+"...":e;return(0,s.jsxs)("div",{className:"multicode",children:[(0,s.jsxs)("div",{className:"titleContainer",children:[(0,s.jsx)("div",{className:"titles",children:n.map((e,n)=>(0,s.jsx)("div",{onClick:()=>{d(n)},className:"title ".concat(c==n?"active":""),children:(0,s.jsx)("p",{children:crop(e,8)})}))}),(0,s.jsx)("div",{onClick:()=>{navigator.clipboard.writeText(t[c])},className:"copy",children:(0,s.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",height:"48",viewBox:"0 96 960 960",width:"48",children:(0,s.jsx)("path",{d:"M180 975q-24 0-42-18t-18-42V312h60v603h474v60H180Zm120-120q-24 0-42-18t-18-42V235q0-24 18-42t42-18h440q24 0 42 18t18 42v560q0 24-18 42t-42 18H300Zm0-60h440V235H300v560Zm0 0V235v560Z"})})})]}),(0,s.jsx)(r.ZP,{...r.lG,code:t[c],language:a[c],theme:void 0,children:e=>{let{className:n,style:t,tokens:i,getLineProps:a,getTokenProps:o}=e;return(0,s.jsx)("div",{className:"codeContainer",children:(0,s.jsx)("pre",{className:n,style:t,children:i.map((e,n)=>(0,s.jsxs)("div",{className:"line ".concat(l[c].includes(n+1)?"lineActive":""),children:[(0,s.jsx)("p",{children:n+1}),(0,s.jsx)("div",{...a({line:e,key:n}),children:e.map((e,n)=>(0,s.jsx)("span",{...o({token:e,key:n})}))})]}))})})}})]})}},33745:function(e,n,t){"use strict";t.d(n,{Z:function(){return animationPreview_Index}});var s=t(85893),i=t(67294),a=t(25675),o=t.n(a),r=t(38940),l=t(42708);function Index(e){let{src:n,priority:t}=e,{ref:a,inView:c}=(0,l.YD)({threshold:.2,triggerOnce:!0}),[d,h]=(0,i.useState)(!1);return(0,s.jsx)(r.E.div,{ref:a,variants:{initial:{opacity:0},enter:{opacity:1,transition:{duration:.4,ease:[.33,1,.68,1]}}},initial:"initial",animate:d&&c?"enter":"",className:"imageWrapper",children:(0,s.jsx)(o(),{src:"https:".concat(n),fill:!0,style:{objectFit:"cover"},priority:t,onLoadingComplete:()=>{h(!0)},alt:"image",sizes:"500px"})})}var c=t(41664),d=t.n(c),h=t(51526),m=t(55144);let u={initial:{opacity:0,y:5},enter:{opacity:1,y:0,transition:{duration:.2,ease:"easeOut"}},exit:{opacity:0,y:5,transition:{duration:.2,ease:"easeOut"}}},p={initial:{y:0},open:{y:0,transition:{duration:.5,ease:"easeOut"}},closed:{y:0,transition:{duration:.5,ease:"easeOut"}}};function animationPreview_Index(e){let{title:n,image:t,handle:a,description:o,tag:c,tutorialLink:x,preview:g,date:j}=e.animation,[f,v]=(0,i.useState)(!1),y=(0,i.useRef)(null),{ref:w,inView:b,entry:N}=(0,l.YD)({threshold:0,triggerOnce:!0});return(0,i.useEffect)(()=>{b&&y.current.load()},[b,g]),(0,i.useEffect)(()=>{y.current&&(f?y.current.play():y.current.pause())},[f]),(0,s.jsxs)(r.E.div,{variants:p,initial:"initial",animate:b?"open":"closed",ref:w,className:"animationPreview",children:[(0,s.jsxs)("div",{onMouseOver:()=>{v(!0)},onMouseLeave:()=>{v(!1)},className:"imageContainer",children:[(0,s.jsx)(d(),{href:"/tutorials/".concat(a),children:(0,s.jsx)(Index,{src:t.src,priority:!0})}),(0,s.jsx)(h.M,{mode:"wait",children:f&&(0,s.jsx)(r.E.div,{className:"tags",variants:u,initial:"initial",animate:"enter",exit:"exit",children:(0,s.jsx)(d(),{href:"/demos/".concat(a),legacyBehavior:!0,children:(0,s.jsxs)("a",{className:"tag",rel:"noopener noreferrer",target:"_blank",children:["Demo",(0,s.jsx)("svg",{width:"9",height:"8",viewBox:"0 0 9 8",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,s.jsx)("path",{d:"M8.49966 1.01851C8.50988 0.742553 8.29446 0.510563 8.01851 0.500342L3.52159 0.33379C3.24564 0.32357 3.01365 0.538989 3.00343 0.814942C2.99321 1.09089 3.20862 1.32288 3.48458 1.33311L7.48184 1.48115L7.33379 5.47841C7.32357 5.75436 7.53899 5.98635 7.81494 5.99657C8.09089 6.0068 8.32288 5.79138 8.3331 5.51542L8.49966 1.01851ZM1.34023 7.8664L8.34023 1.3664L7.65977 0.633603L0.659774 7.1336L1.34023 7.8664Z",fill:"white"})})]})})})}),b&&(0,s.jsx)(d(),{href:"/tutorials/".concat(a),children:(0,s.jsx)("div",{className:"video",children:(0,s.jsx)("video",{ref:y,preload:"none",muted:!0,loop:!0,poster:t.src,children:(0,s.jsx)("source",{src:"https:".concat(g.src)})})})})]}),(0,s.jsxs)("div",{className:"body",children:[(0,s.jsxs)("div",{className:"info",children:[(0,s.jsx)("p",{children:(()=>{let e=new Date(j),n=e.getFullYear(),t=m.z[e.getMonth()],s=e.getDate();return"".concat(t," ").concat(s,", ").concat(n)})()}),(0,s.jsx)("div",{className:"tagContainer",children:(0,s.jsx)("a",{className:"pill",children:c})})]}),(0,s.jsxs)("div",{className:"text",children:[(0,s.jsx)(d(),{href:"/tutorials/".concat(a),children:(0,s.jsx)("h2",{children:n})}),(0,s.jsx)("p",{children:o})]})]})]})}},38642:function(e,n,t){"use strict";t.d(n,{Z:function(){return Index}});var s=t(85893);t(67294);var i=t(42708),a=t(51526),o=t(38940),r=t(96747),l=t.n(r);let c={initial:{opacity:0},open:{opacity:1,transition:{duration:.5,ease:[.23,1,.32,1]}},closed:{width:0}};function Index(e){let{handle:n}=e,{ref:t,inView:r,entry:d}=(0,i.YD)({threshold:.2,triggerOnce:!0});return(0,s.jsxs)("div",{ref:t,className:"video",children:[(0,s.jsx)(a.M,{mode:"wait",children:r&&(0,s.jsx)(o.E.video,{variants:c,initial:"initial",animate:r?"open":"closed",autoPlay:!0,muted:!0,loop:!0,playsInline:!0,children:(0,s.jsx)("source",{src:"".concat(n)})})}),(0,s.jsx)("div",{className:"video-loader",children:(0,s.jsx)(l(),{loading:!0,color:"black"})})]})}},61072:function(e,n,t){"use strict";t.d(n,{Z:function(){return Index}});var s=t(85893);t(58688);var i=t(41846);function Index(e){let{children:n,tabs:t}=e;return(0,s.jsxs)("div",{className:"page",children:[(0,s.jsx)(i.Z,{tabs:t}),n]})}},12749:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return C},default:function(){return _handle_Index}});var s,i,a=t(85893),o=t(67294),r=t(25675),l=t.n(r),c=t(41664),d=t.n(c),h=t(5152),m=t.n(h),u=t(16893);(s=i||(i={}))[s.January=0]="January",s[s.February=1]="February",s[s.March=2]="March",s[s.April=3]="April",s[s.May=4]="May",s[s.June=5]="June",s[s.July=6]="July",s[s.August=7]="August",s[s.September=8]="September",s[s.October=9]="October",s[s.November=10]="November",s[s.December=11]="December";let p=m()(()=>t.e(5457).then(t.t.bind(t,25457,23)),{loadableGenerated:{webpack:()=>[25457]},ssr:!1});function Index(e){let{data:n}=e,t=(0,o.useRef)(),s=(0,u.Y)(t),{metaTitle:r,image:c,handle:h,preview:m,description:x,title:g,author:j,date:f,difficulty:v,length:y,tutorialLink:w,sourceCodeLink:b,demoUrl:N}=n;return(0,o.useRef)(null),(0,o.useEffect)(()=>{},[m]),(0,a.jsxs)("div",{className:"animation-header",children:[(0,a.jsxs)("div",{className:"nav",children:[(0,a.jsx)("svg",{width:"12",height:"12",viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M6.00016 0.666828L6.70016 1.38349L2.5835 5.50016L11.3335 5.50016L11.3335 6.50016L2.5835 6.50016L6.70016 10.6168L6.00016 11.3335L0.66683 6.00016L6.00016 0.666828Z"})}),(0,a.jsx)(d(),{href:"/tutorials",children:"Tutorials"})]}),(0,a.jsxs)("div",{className:"info",children:[(0,a.jsx)("div",{className:"profileContainer",children:(0,a.jsx)(l(),{src:"https:".concat(j.profilePicture.src),layout:"fill",objectFit:"cover",priority:!0,alt:"profile picture of ".concat(j.firstName," ").concat(j.lastName)})}),(0,a.jsxs)("div",{className:"body",children:[(0,a.jsxs)("p",{className:"name",children:[j.firstName," ",j.lastName]}),(0,a.jsxs)("div",{className:"extra",children:[(0,a.jsx)("p",{children:(e=>{let n=new Date(e);return i[n.getMonth()]+" "+n.getDate()+", "+n.getFullYear()})(f)}),(0,a.jsx)("p",{children:"/"}),(0,a.jsx)("div",{className:"difficulty",style:{backgroundColor:(e=>{switch(e){case"Beginner":return"#00A054";case"Intermediate":return"#8A00A0";case"Advanced":return"#A00000"}})(v)}}),(0,a.jsx)("p",{children:v}),(0,a.jsx)("p",{children:"/"}),(0,a.jsx)("img",{src:(e=>{switch(e){case"Short":return"/medias/icons/time_short.svg";case"Medium":return"/medias/icons/time_medium.svg";case"Long":return"/medias/icons/time_long.svg"}})(y)}),(0,a.jsx)("p",{children:y})]})]})]}),(0,a.jsx)("h1",{children:g}),(0,a.jsx)("h1",{children:r}),(0,a.jsx)("p",{className:"description",children:x}),(0,a.jsxs)(d(),{className:"demo-link",target:"_blank",href:N,children:["Live Demo",(0,a.jsx)("svg",{width:"9",height:"8",viewBox:"0 0 9 8",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M8.49966 1.01851C8.50988 0.742553 8.29446 0.510563 8.01851 0.500342L3.52159 0.33379C3.24564 0.32357 3.01365 0.538989 3.00343 0.814942C2.99321 1.09089 3.20862 1.32288 3.48458 1.33311L7.48184 1.48115L7.33379 5.47841C7.32357 5.75436 7.53899 5.98635 7.81494 5.99657C8.09089 6.0068 8.32288 5.79138 8.3331 5.51542L8.49966 1.01851ZM1.34023 7.8664L8.34023 1.3664L7.65977 0.633603L0.659774 7.1336L1.34023 7.8664Z",fill:"#4479E2"})})]}),b&&(0,a.jsxs)(d(),{className:"source-link",target:"_blank",href:b,children:["Source code",(0,a.jsx)("svg",{width:"9",height:"8",viewBox:"0 0 9 8",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M8.49966 1.01851C8.50988 0.742553 8.29446 0.510563 8.01851 0.500342L3.52159 0.33379C3.24564 0.32357 3.01365 0.538989 3.00343 0.814942C2.99321 1.09089 3.20862 1.32288 3.48458 1.33311L7.48184 1.48115L7.33379 5.47841C7.32357 5.75436 7.53899 5.98635 7.81494 5.99657C8.09089 6.0068 8.32288 5.79138 8.3331 5.51542L8.49966 1.01851ZM1.34023 7.8664L8.34023 1.3664L7.65977 0.633603L0.659774 7.1336L1.34023 7.8664Z",fill:"#4479E2"})})]}),w&&(0,a.jsxs)(d(),{className:"source-link",target:"_blank",href:w,children:["Video Tutorial",(0,a.jsx)("svg",{width:"9",height:"8",viewBox:"0 0 9 8",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,a.jsx)("path",{d:"M8.49966 1.01851C8.50988 0.742553 8.29446 0.510563 8.01851 0.500342L3.52159 0.33379C3.24564 0.32357 3.01365 0.538989 3.00343 0.814942C2.99321 1.09089 3.20862 1.32288 3.48458 1.33311L7.48184 1.48115L7.33379 5.47841C7.32357 5.75436 7.53899 5.98635 7.81494 5.99657C8.09089 6.0068 8.32288 5.79138 8.3331 5.51542L8.49966 1.01851ZM1.34023 7.8664L8.34023 1.3664L7.65977 0.633603L0.659774 7.1336L1.34023 7.8664Z",fill:"#4479E2"})})]}),(0,a.jsxs)("div",{ref:t,className:"video-container",children:[(0,a.jsx)(l(),{fill:!0,src:"https:".concat(c.src),alt:"background video",placeholder:"blur",blurDataURL:c.blurDataURL,style:{opacity:1,objectFit:"cover"}}),s&&(0,a.jsx)(p,{url:"https:".concat(m.src),playing:!0,loop:!0,muted:!0,playsinline:!0,width:"100%",height:"100%",style:{position:"relative"},className:"[&>video]:object-cover"})]})]})}var x=t(68107),g=t(43088),j=t(38642);function tableOfContents_Index(e){let{data:n}=e,[t,s]=(0,o.useState)([]),[i,r]=(0,o.useState)(0);(0,o.useEffect)(()=>{generateTableOfContents()},[n]),(0,o.useEffect)(()=>(window.addEventListener("resize",generateTableOfContents),window.addEventListener("scroll",manageActiveContent),()=>{window.removeEventListener("resize",generateTableOfContents),window.removeEventListener("scroll",manageActiveContent)}));let manageActiveContent=()=>{let e=document.getElementById("body").getElementsByTagName("h2"),n=[].slice.call(e),t=1;for(let e of n){let n=e.getBoundingClientRect().top+window.pageYOffset-86;if(0==window.scrollY)r(0);else if(window.scrollY>n){if(t>i){r(i+1);return}}else if(i+1>t){r(i-1);return}t++}},generateTableOfContents=()=>{if(window.innerWidth<1400){s([]);return}{let e=document.getElementById("body").getElementsByTagName("h2"),n=[].slice.call(e),t=[];for(let e of n)t.push({HTMLElement:e});s(t)}},scrollToElement=(e,n)=>{let t=e.getBoundingClientRect().top+window.pageYOffset-85;r(n),window.scrollTo({top:t})};return(0,a.jsx)(a.Fragment,{children:t.length>0&&(0,a.jsxs)("div",{className:"tableOfContents",children:[(0,a.jsx)("p",{className:"title",children:"Table of Contents"}),t.map((e,n)=>(0,a.jsx)("p",{className:i==n+1?"active":"",onClick:()=>{scrollToElement(e.HTMLElement,n)},children:e.HTMLElement.innerHTML},n))]})})}function index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@13.2.4 myApp"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"index.js"})," and add our own HTML and CSS."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["For the CSS, we're going to use  ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/css-modules/css-modules",children:"CSS Module"}),", so make sure to create a ",(0,a.jsx)("code",{className:"language-jsx",children:"Home.module.css"})," file inside of the ",(0,a.jsx)("code",{className:"language-jsx",children:"styles"})," folder. Thankfully, Next.js has built-in support for CSS Modules"]})}),(0,a.jsx)(g.Z,{titles:["Index.js","Home.module.css"],codes:['import { useRef } from \'react\';\nimport styles from \'../styles/Home.module.css\'\n\nexport default function Home() {\n\n  const plane = useRef(null);\n\n  return (\n    <div className={styles.container}>\n      <div ref={plane} className={styles.body}>\n        <Text3d primary={"Turning"} secondary={"Turning"}/>\n        <Text3d primary={"Space"} secondary={"Space"}/>\n        <Text3d primary={"Into"} secondary={"Into"}/>\n        <Text3d primary={"Shapes"} secondary={"Shapes"}/>\n      </div>\n    </div>\n  )\n}\n\nfunction Text3d({primary, secondary}) {\n\n  return (\n      <div className={styles.textContainer}>\n          <p className={styles.primary}>{primary}</p>\n          <p className={styles.secondary}>{secondary}</p>\n      </div>\n  )\n}\n',".container {\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    background-color: lightgrey;\n}\n.body{\n    display: flex;\n    flex-direction: column;\n}\n  \n.textContainer{\n    position: relative;\n    cursor: pointer;\n}\n  \n.textContainer p{\n    font-size: 8vw;\n    line-height: 8vw;\n    font-weight: 700;\n    margin: 0px;\n    color: white;\n}\n  \n.textContainer .secondary{\n    position: absolute;\n    top: 0;\n    color: black;\n    opacity: 0;\n}"],languages:["jsx","css"],highlights:[[6,10],[13,26]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note about the HTML and CSS:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We add a ",(0,a.jsx)("code",{className:"language-jsx",children:"ref"})," to the body, we will later use it to animate it."]}),(0,a.jsxs)("li",{children:["We add a position ",(0,a.jsx)("code",{className:"language-jsx",children:"absolute"})," to the secondary text, so it perfectly sits behind the primary text."]}),(0,a.jsxs)("li",{children:["We add a position ",(0,a.jsx)("code",{className:"language-jsx",children:"relative"})," to the textContainer (the parent), so that the secondary text has an absolute position based on it and not on the window."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-perspective-text/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," We are not seeing the secondary text, because it sits directly behind the primary text and the opacity is set at 0."]}),(0,a.jsx)("h2",{children:"Animating the texts"}),(0,a.jsx)("p",{children:"To animate the texts, we are going to use pure CSS for it. We will use the mutliple css properties and selectors to animate everything. Don't worry, we'll go over the explanation for each one of them."}),(0,a.jsx)(x.Z,{title:"Home.module.css",code:"...\n\n.textContainer{\n    ...\n    transform-style: preserve-3d;\n    transition: transform 0.4s;\n}\n\n.textContainer p{\n    ...\n    transition all 0.4s;\n}\n\n.textContainer .secondary{\n    ...\n    transform: rotateX(-90deg) translateY(3.5vw);\n    transform-origin: bottom center;\n}\n\n.textContainer:hover{ \n    transform: rotateX(90deg);\n}\n\n.textContainer:hover .primary{\n    transform: translateY(-100%);\n    opacity: 0;\n}\n\n.textContainer:hover .secondary{\n    opacity: 1;\n}",language:"css",highlights:[5,16,25,21]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note about the CSS:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 5:"})," We specify the ",(0,a.jsx)("code",{className:"language-jsx",children:"transform-style"})," to be ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style",children:"preserve-3d"})," on the parent, to indicate that the children should be positioned in 3D space."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 16:"})," We initially position the secondary text to be rotated on the x-axis by ",(0,a.jsx)("code",{className:"language-jsx",children:"-90deg"}),". That way, when we rotate the parent, the secondary text will already be in the good position for the animation. We also add a slight y-axis adjustement to make it look more realistic."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 21:"})," On hover, the textContainer is rotated by ",(0,a.jsx)("code",{className:"language-jsx",children:"90deg"})," to rotate on itself and give the 3D illusion effect."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 25:"})," On hover, the primary text is translated on the y-axis by ",(0,a.jsx)("code",{className:"language-jsx",children:"-100%"})," to also give the 3D illusion effect."]})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-perspective-text/video1.mov"}),(0,a.jsx)("h2",{children:"Animating the plane"}),(0,a.jsxs)("p",{children:["Let's spice up the animation by adding a 3d perspective to the container of all the words. To do that we'll use some javascript and add 3 different values to the ",(0,a.jsx)("code",{className:"language-jsx",children:"transform"})," property of the body based on the position of the cursor:"]}),(0,a.jsx)(x.Z,{title:"Index.jsx",code:'...\nexport default function Home() {\n\n  const plane = useRef(null);\n  const maxRotate = 45;\n\n  const manageMouseMove = (e) => {\n    const x = e.clientX / window.innerWidth\n    const y = e.clientY / window.innerHeight\n   const perspective = window.innerWidth * 4;\n   const rotateX = maxRotate * x - maxRotate / 2; \n   const rotateY = (maxRotate * y - maxRotate / 2) * -1;\n   plane.current.style.transform = "perspective(${perspective}px) rotateX(${rotateY}deg) rotateY(${rotateX}deg)"\n  }\n\n  return (\n    <div onMouseMove={(e) => {manageMouseMove(e)}} className={styles.container}>\n      <div ref={plane} className={styles.body}>\n      ...\n',language:"jsx",highlights:[5,13,17]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note about the JS:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"perspective"}),": Since the size of the text is based on the window, the amount of perspective we give the body is an absolute value based on the size of the window."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"rotateX"}),": a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"maxRotate"})," based on the x position of the mouse relative to the window"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"rotateY"}),": a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"maxRotate"})," based on the y position of the mouse relative to the window"]})]}),(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Line 13:"})," Note that the rotateX and rotateY are reversed."]})]}),(0,a.jsx)("h3",{children:"Here's the result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-perspective-text/video2.mov"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-perspective-text/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, pretty fun considering the fact that we only used CSS. See you next time"}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function Svg_bezier_curve_index(){return(0,a.jsxs)("div",{className:"blog curve",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client'\nimport styles from './page.module.css'\n\nexport default function Home() {\n  return (\n    <div className={styles.container}>\n        <div className={styles.body}>\n            <div className={styles.description}>\n              <p>Smart Development</p>\n              <p>Combining unique design and rich technology, we build digital products exactly as they were designed, without shortcuts or simplifications.</p>\n            </div>\n            <div className={styles.tagsContainer}>\n              <p>Areas</p>\n              <div className={styles.tags}>\n                <p>E-commerce</p>\n                <p>Finance</p>\n                <p>Education</p>\n                <p>Social</p>\n                <p>Entertainment</p>\n                <p>Medicine</p>\n              </div>\n            </div>\n        </div>\n    </div>\n  )\n}\n",".container {\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: black;\n    color: white;\n}\n  \n.body{\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    width: 70vw;\n}\n \n.description, .tagsContainer{\n    display: flex;\n    justify-content: flex-end;\n}\n  \n.description p{\n    font-size: 12px;\n    margin: 0px;\n}\n.description p:nth-of-type(1){\n    margin-top: 8px;\n}\n.description p:nth-of-type(2){\n    font-size: 28px;\n    width: 700px;\n    margin-left: 30px;\n}\n.tagsContainer{\n    display: flex;\n    margin-top: 50px;\n}\n  \n.tagsContainer p{\n    margin: 0px;\n}\n  \n.tags{\n    display: flex;\n    width: 700px;\n    margin-left: 30px;\n    flex-wrap: wrap;\n    gap: 10px;\n}\n  \n.tags p{\n    border: 1px solid white;\n    border-radius: 20px;\n    text-transform: uppercase;\n    font-size: 16px;\n    padding: 10px 12px 10px 12px;\n}\n"],languages:["jsx","css"]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Understanding Quadratic B\xe9zier Curves"}),(0,a.jsx)("div",{className:"smallImageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/quadratic_b\xe9zier_with_grid.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of a quadratic B\xe9zier curve"})}),(0,a.jsx)(x.Z,{code:'<path d="M100,250 Q250,180 400,250" />',language:"html"}),(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"<path>"})," element is a basic element of the SVG library, it is used to create lines, curves and arcs. The ",(0,a.jsx)("code",{className:"language-jsx",children:"d"})," attribute contains a series of commands"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"More specifically, the SVG we will use contains two commands:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Move To ",(0,a.jsx)("code",{className:"language-jsx",children:"M x y"})," takes two parameters, a coordinate (x) and coordinate (y) to move to"]}),(0,a.jsxs)("li",{children:["Quadratic curve ",(0,a.jsx)("code",{className:"language-jsx",children:"Q x1 y1, x y"})," requires one control point which determines the slope of the curve at both the start point and the end point. It takes two parameters: the control point and the end point of the curve."]})]})]}),(0,a.jsx)("h2",{children:"Creating the SVG path"}),(0,a.jsx)("p",{children:"Now that we understand the basic concepts of a quadratic B\xe9zier curve, we can create our own."}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['...\nconst path = useRef(null);\n  let progress = 0;\n  let x = 0.5;\n\n  useEffect(() => {\n    setPath(progress);\n    window.addEventListener(\'resize\', () => {\n      setPath(progress);\n    })\n  }, [])\n\n  const setPath = (value) => {\n    const width = window.innerWidth * 0.7;\n    path.current.setAttributeNS(null, "d", "M 0 50 Q ${width * x} ${50 + value} ${width} 50")\n  }\n\n  return (\n    <div className={styles.container}>\n        <div className={styles.body}>\n            <div className={styles.line}>\n              <span className={styles.box}></span>\n              <svg>\n                <path ref={path}></path>\n              </svg>\n            </div>\n            <div className={styles.description}>\n              <p>Smart Development</p>\n              <p>Combining unique design and rich technology, we build digital products exactly as they were designed, without shortcuts or simplifications.</p>\n            </div>\n            <div className={styles.tagsContainer}>\n              <p>Areas</p>\n              <div className={styles.tags}>\n                <p>E-commerce</p>\n                <p>Finance</p>\n                <p>Education</p>\n                <p>Social</p>\n                <p>Entertainment</p>\n                <p>Medicine</p>\n              </div>\n            </div>\n        </div>\n    </div>\n  )',"...\n.body{\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    width: 70vw;\n}\n.line{\n    height: 1px;\n    position: relative;\n    width: 100%;\n    margin-bottom: 20px;\n}\n.line svg{\n    position: absolute;\n    height: 100px;\n    width: 100%;\n    top: -50px;\n}\n.line svg path{\n    stroke-width: 1px;\n    stroke: white;\n    fill: none;\n}\n.box{\n    height: 40px;\n    width: 100%;\n    display: flex;\n    position: relative;\n    top: -20px;\n    z-index: 1;\n}\n"],languages:["jsx","css"],highlights:[[15,21,22,23,24,25,26],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Line 15"})," is key to clearly understand how the animation will be created:"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["First let's remember we set the SVG with a height of ",(0,a.jsx)("code",{className:"language-jsx",children:"100px"}),". We can then understand that 50 (in the y axis) is the middle of the SVG where the path will be."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"width * x"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"50 + value"})," is the control point (x1 y1) of the B\xe9zier curve. We will dynamically adjust the ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," (position of the slope) and the ",(0,a.jsx)("code",{className:"language-jsx",children:"value"})," (strength of the slope) to animate the curve."]})]})]}),(0,a.jsx)("h3",{children:"Here's a few examples of how changing those values affect the curve"}),(0,a.jsxs)("div",{className:"svgContainer",children:[(0,a.jsx)("div",{className:"body",children:(0,a.jsx)("p",{children:"value = 100, x = 0.5"})}),(0,a.jsx)("svg",{children:(0,a.jsx)("path",{d:"M 0 50 Q 150 100 300 50"})})]}),(0,a.jsxs)("div",{className:"svgContainer",children:[(0,a.jsx)("div",{className:"body",children:(0,a.jsx)("p",{children:"value = 100, x = 0"})}),(0,a.jsx)("svg",{children:(0,a.jsx)("path",{d:"M 0 50 Q 0 100 300 50"})})]}),(0,a.jsxs)("div",{className:"svgContainer",children:[(0,a.jsx)("div",{className:"body",children:(0,a.jsx)("p",{children:"value = -100, x = 1"})}),(0,a.jsx)("svg",{children:(0,a.jsx)("path",{d:"M 0 50 Q 300 0 300 50"})})]}),(0,a.jsx)("h2",{children:"Animating in"}),(0,a.jsx)("p",{children:"We want to have a small box at first so that the animation is only triggered from a close distance. Then, we want to expand the height of the box to allow the user to slope the curve at a bigger range than the initial detection."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-bezier-curve/video1.mov"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["...\nlet progress = 0;\nlet reqId = null;\n\nconst animateIn = () => {\n    setPath(progress);\n    reqId = requestAnimationFrame(animateIn);\n}\n\nconst manageMouseMove = (e) => {\n    const { movementY } = e;\n    const box = e.target.getBoundingClientRect();\n    x = (e.clientX - box.left) / box.width;\n    progress += movementY;\n}\n\nconst resetAnimation = () => {\n    cancelAnimationFrame(reqId)\n}\nreturn (\n    ...\n    <span onMouseEnter={() => {animateIn()}} onMouseLeave={() => {resetAnimation()}} onMouseMove={(e) => {manageMouseMove(e)}} className={styles.box}></span>\n    ...\n)\n\n",".box:hover{\n    height: 150px;\n    top: -75px;\n}"],languages:["js","css"]}),(0,a.jsx)("h2",{children:"Animating out"}),(0,a.jsxs)("p",{children:["To animate out the animation, we will use two key animation concepts: The ",(0,a.jsx)("b",{children:"Sine function"})," and the ",(0,a.jsx)("b",{children:"Linear Interpolation"}),". Let's talk a brief look at them."]}),(0,a.jsx)("h3",{children:"The Sine function"}),(0,a.jsxs)("p",{children:["I found that the Sine function is used ",(0,a.jsx)("b",{children:"a lot"})," in web animations, so don't shy away from it even tho it might be scary at first. Basically, there are 2 important things to know about the Sine function for this specific animation:"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["It always returns a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"-1"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})]})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["It returns ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})," when we give it ",(0,a.jsx)("code",{className:"language-jsx",children:"π/2"})]})})]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot3.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)("h3",{children:"The Linear Interpolation"}),(0,a.jsx)("p",{children:"Linear interpolation is a key concept in animations. It is often used by motion designers, but we can also use it for web animations! In short, it is form of interpolation, which involves the generation of new values based on an existing set of values"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot4.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)(x.Z,{title:"Lerp in Javascript",code:"let value = 10;\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a\nvalue = lerp(value, 0, 0.1);\n\nconsole.log(value) \n//9",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"x"}),": The value we want to interpolate from (start)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"y"}),": The target value we want to interpolate to (end)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"a"}),": The amount by which we want ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," to be closer to ",(0,a.jsx)("code",{className:"language-jsx",children:"y"}),"."]})]})}),(0,a.jsx)("h3",{children:"Translating everything in code"}),(0,a.jsx)("p",{children:"Great. Now we can jump in the code and understand exactly what's going on."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-bezier-curve/video2.mov"}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nlet time = Math.PI / 2;\n\nconst animateIn = () => {\n    //if the animationOut is running, cancel it and reset time\n    if(reqId){\n      cancelAnimationFrame(reqId);\n      time = Math.PI / 2;\n    }\n    setPath(progress);\n    reqId = requestAnimationFrame(animateIn);\n}\n\nconst resetAnimation = () => {\n    cancelAnimationFrame(reqId)\n    animateOut();\n  }\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a;\n\nconst animateOut = () => {\n    let newProgress = progress * Math.sin(time);\n    setPath(newProgress)\n\n    progress = lerp(progress, 0, .04);\n    time+=0.2;\n\n    if(Math.abs(progress) > 0.5){\n      reqId = requestAnimationFrame(animateOut)\n    }\n    //If the slope is almost flat, we stop the animation\n    else{\n      time = Math.PI / 2;\n      progress = 0;\n    }\n}",language:"jsx",highlights:[7,16]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Line 6"}),": To avoid any bugs, we want to cancel the animationOut if it is already running when we animateIn."]})}),(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("b",{children:"key concepts"})," of the animationOut:"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"time"})," is initially set at ",(0,a.jsx)("code",{className:"language-jsx",children:"π/2"}),". Since Math.sin(π/2) = 1, we want our first animation frame to be the current value of the slope (see line 22)."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"progress"}),", which is the slope value, is gradually decremented towards ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," using the ",(0,a.jsx)("code",{className:"language-jsx",children:"lerp"})," function."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"time"})," is incremented by 0.2 for speed reason. It could be incremented by 100 and it would still work, but the animation would be very fast."]})]}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We are done! In conclusion, we used the Linear Interpolation, the Sine function and the Quadratic Cubiz B\xe9zier in order to create this simple, yet common animation among award winning websites."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"- Oli"})]})}function Project_gallery_colored_card_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@13.2.4 myApp"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"index.js"})," and add our own HTML and CSS."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["For the CSS, we're going to use  ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/css-modules/css-modules",children:"CSS Module"}),", so make sure to create a ",(0,a.jsx)("code",{className:"language-jsx",children:"Home.module.css"})," file inside of the ",(0,a.jsx)("code",{className:"language-jsx",children:"styles"})," folder. Thankfully, Next.js has built-in support for CSS Modules"]})}),(0,a.jsx)(g.Z,{titles:["Index.js","Home.module.css"],codes:['import styles from \'../styles/Home.module.css\'\n\nconst projects = [\n  {\n    title: "New York",\n    color: "#F06318"\n  },\n  {\n    title: "San Francisco",\n    color: "#DCF018"\n  },\n  {\n    title: "San Antonio",\n    color: "#18F0E8"\n  },\n  {\n    title: "Nashville",\n    color: "#8C0CF0"\n  },\n  {\n    title: "Houston",\n    color: "#F0183C"\n  },\n  {\n    title: "New Orleans",\n    color: "#F0BA18"\n  },\n  {\n    title: "Oklahoma City",\n    color: "#0C34F0"\n  },\n  {\n    title: "Detroit",\n    color: "#0CBCF0"\n  },\n  {\n    title: "Indianapolis",\n    color: "#91F018"\n  }\n]\n\n\nexport default function Home() {\n  return (\n    <div className={styles.container}>\n       <div className={styles.projectContainer}>\n            {\n              projects.map( (project, index) => {\n                return <div key={index}>\n                  <p>{project.title}</p>\n                </div>\n              })\n            }\n        </div>\n    </div>\n  )\n}\n',".container {\n  display: flex; \n  height: 100vh;\n  align-items: center;\n}\n\n.projectContainer{\n  position: relative;\n  width: 100%;\n}\n\n.projectContainer div{\n  border-top: 1px solid black;\n  cursor: pointer;\n  position: relative;\n  margin-bottom: -2vw;\n  background-color: white;\n}\n\n.projectContainer div p{\n  margin: 0px;\n  font-size: 5vw;\n  padding-left: 10px;\n  text-transform: uppercase;\n}"],languages:["jsx","css"],highlights:[[],[16,17]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note about the CSS:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 16:"})," We use negative ",(0,a.jsx)("code",{className:"language-jsx",children:"margin"}),"  to overlap the divs"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 17:"})," We give the each div a ",(0,a.jsx)("code",{className:"language-jsx",children:"background-color: white"})," to hide the div beneath it"]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/project-gallery-colored-card/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Animating In and Out"}),(0,a.jsxs)("p",{children:["To animate the divs, we're going to use ",(0,a.jsx)(d(),{href:"https://greensock.com/gsap/",target:"_blank",children:"GSAP"})," for it. To use the library, make sure to install it by using ",(0,a.jsx)("code",{className:"language-jsx",children:"npm install gsap"}),"."]}),(0,a.jsx)("p",{children:"With the help of GSAP, we can adjust the divs properties to complete the animation:"}),(0,a.jsx)(g.Z,{titles:["Index.js","Home.module.css"],codes:['...\n\nexport default function Home() {\n\n  const manageMouseEnter = (e, index) => {\n    gsap.to(e.target, {top: "-2vw", backgroundColor: projects[index].color, duration: 0.3})\n  }\n\n  const manageMouseLeave = (e, index) => {\n    gsap.to(e.target, {top: "0", backgroundColor: "white", duration: 0.3, delay: 0.1})\n  }\n\n  return (\n    <div className={styles.container}>\n        <div className={styles.projectContainer}>\n            {\n              projects.map( (project, index) => {\n                return <div onMouseEnter={(e) => {manageMouseEnter(e, index)}} onMouseLeave={(e) => {manageMouseLeave(e, index)}} key={index}>\n                  <p>{project.title}</p>\n                </div>\n              })\n            }\n        </div>\n    </div>\n  )\n}\n',"...\n\n.projectContainer div p{\n  ...\n  pointer-events: none;\n}\n"],languages:["jsx","css"],highlights:[[6,10,18],[16,5]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Pretty simple right? Here's the keys to the animation:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 6:"})," We animate in by adjusting the top property of the hovered div and give it its corresponding color."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 10:"})," We animate out by resetting the top property to 0, and the background-color to white."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 5 (css):"})," We add a pointer-events: none to the p to avoid any bugs"]})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/project-gallery-colored-card/video1.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation. Hope you learned a lot, it was quite a simple one, but understanding that negative margin is the key to this animation can be quite tricky. See you next time"}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"- Oli"})]})}function cartoon_cursor_trailing_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@13.2.4 myApp"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["Let's also create an ",(0,a.jsx)("code",{className:"language-jsx",children:"/images"})," folder inside of the ",(0,a.jsx)("code",{className:"language-jsx",children:"/public"})," folder and add the smiley image, you can add whatever image you'd like or found the one I used ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/olivierlarose/cartoon-cursor-trailing/tree/main/public/medias",children:"here"}),"."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"index.js"})," and add our own HTML and CSS."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["For the CSS, we're going to use  ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/css-modules/css-modules",children:"CSS Module"}),", so make sure to create a ",(0,a.jsx)("code",{className:"language-jsx",children:"Home.module.css"})," file inside of the ",(0,a.jsx)("code",{className:"language-jsx",children:"styles"})," folder. Thankfully, Next.js has built-in support for CSS Modules"]})}),(0,a.jsx)(g.Z,{titles:["Index.js","Home.module.css"],codes:["import styles from '../styles/Home.module.css'\n\nexport default function Home() {\n  return (\n    <div className={styles.main}>\n        <div className={styles.container}>\n          <img className={styles.img} src=\"/images/smiley.svg\"></img>\n        </div>\n    </div>\n  )\n}\n",".main {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n  \n.container{\n  height: 1000px;\n width: 1000px;\n position: relative;\n overflow: hidden;\n border: 4px solid black;\n background-color: yellow;\n}\n  \n.img{\n width: 160px;\n height: 160px;\n position: absolute;\n z-index: 2;\n top: 50%;\n left: 50%;\n transform: translateX(-50%) translateY(-50%);\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/cartoon-cursor-trailing/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Creating the trail"}),(0,a.jsx)("p",{children:"To create a trailing effect, it's going to be pretty easy. We'll detect the mouse movement and add a new div represening a circle at the cursor's position."}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("h3",{children:"Here's what we need to make this happen:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Add a ",(0,a.jsx)("code",{className:"language-jsx",children:"ref"})," to the image and the container."]}),(0,a.jsxs)("li",{children:["Add an ",(0,a.jsx)("code",{className:"language-jsx",children:"OnMouseMove"})," event on the container."]}),(0,a.jsxs)("li",{children:["Create a new ",(0,a.jsx)("code",{className:"language-jsx",children:"div"})," element using Javascript and add it as a child of the container."]}),(0,a.jsxs)("li",{children:["Modify the ",(0,a.jsx)("code",{className:"language-jsx",children:"top"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"left"})," property of the image to move it."]})]})]}),(0,a.jsx)(g.Z,{titles:["Index.js","Home.module.css"],codes:['...\n\nconst container = useRef();\nconst img = useRef();\n\nconst manageMouseMove = (event) => {\n  const { clientX, clientY } = event\n  const containerPosition = container.current.getBoundingClientRect();\n  const x = clientX - containerPosition.x\n const y = clientY - containerPosition.y \n img.current.style.top = y + "px";\n img.current.style.left = x + "px";\n draw(x, y)\n}\n\nconst draw = (x, y) => {\n  const div = document.createElement("div");\n  div.classList.add(styles[\'circle\']);\n  div.style.top = y + "px";\n  div.style.left = x + "px";\n  container.current.append(div);\n}\n\nreturn (\n  <div className={styles.main}>\n      <div ref={container} onMouseMove={(e) => {manageMouseMove(e)}} className={styles.container}>\n        <img ref={img} className={styles.img} src="/images/smiley.svg"></img>\n      </div>\n  </div>\n)',"...\n\n.circle{\n  width: 160px;\n  height: 160px;\n  border-radius: 50%;\n  background-color: white;\n  border: 4px solid black;\n  position: absolute;\n  transform: translateX(-50%) translateY(-50%);\n  z-index: 1;\n}"],languages:["jsx","css"],highlights:[[21,26],[]]}),(0,a.jsx)("h3",{children:"We should then have a little animation!"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cartoon-cursor-trailing/video1.mov"}),(0,a.jsx)("h2",{children:"Removing the trail"}),(0,a.jsx)("p",{children:"Now that we have a nice trailing animation, we can add a final touch by removing some of the divs incrementely. It will also help the performance of the animation."}),(0,a.jsx)("p",{children:"Here's the two ways we're going to remove the trail:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Remove the div after 1.5 seconds of it being created."}),(0,a.jsx)("li",{children:"Automotically remove the last div added if we have more than 25 active divs."})]}),(0,a.jsx)(x.Z,{code:"...\n\nconst draw = (x, y) => {\n  ...\n  container.current.append(div);\n\n  if(container.current.childNodes.length > 25){\n    erase();\n  }\n  else{\n    setTimeout( () => {\n      erase();\n    }, 1500)\n  }\n}\n\nconst erase = () => {\n  container.current.removeChild(container.current.childNodes[1])\n}\n",language:"jsx"}),(0,a.jsx)("h3",{children:"Finally we should have a complete animation like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cartoon-cursor-trailing/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"A nice little cartoonish trail animation made in less than 50 lines of codes. Nice to know that we can simply create new divs and dynamically style them with css, while keeping great performance."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_mask_animation_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['\'use client\'\nimport styles from \'./page.module.css\'\n\nconst phrases = [\n  "It is a long established fact",\n  "that a reader will be distracted",\n  "by the readable content of a page",\n  "when looking at its layout."\n]\n\nexport default function Home() {\n  return (\n    <div className={styles.container}>\n      <MaskText/>\n      <MaskText/>\n      <MaskText/>\n      <MaskText/>\n      <MaskText/>\n    </div>\n  )\n}\n\nexport function MaskText() {\n  return(\n    <div className={styles.body}>\n      {\n        phrases.map( (phrase, index) => {\n          return <div key={index} className={styles.lineMask}>\n            <p>{phrase}</p>\n          </div>\n        })\n      }\n    </div>\n  )\n}\n',".container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-top: 300px;\n  gap: 20vw;\n  margin-bottom: 300px;\n}\n\n.body{\n  font-size: 5vw;\n}\n\n.lineMask p{\n  margin: 0px;\n  font-weight: 700;\n}\n\n"],languages:["jsx","css"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["Nothing too complicated here, we map the phrases and return a ",(0,a.jsx)("code",{className:"language-jsx",children:"div"})," for each of of them."]})}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-mask-animation/video1.mov"}),(0,a.jsx)("h2",{children:"Detect when in view"}),(0,a.jsx)("p",{children:"Before animating the text, we need to find a way to detect when the text is inside the viewport, so that only then we will animate the text."}),(0,a.jsxs)("p",{children:["To do that, we're going to use the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-in-view/",target:"_blank",children:"useInView"})," hook from Framer-Motion. To install it, we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"})]}),(0,a.jsx)(x.Z,{title:"page.js",code:"import { useInView } from 'react-intersection-observer';\n...\nexport function MaskText() {\n\n  const body = useRef(null);\n  const isInView = useInView(body, {once: true, margin: \"75%\"})\n\n  return(\n    <div ref={body} className={styles.body}>\n    ...",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:'margin:"75%"'})," We wait until the body is visible by 75% before considering it to be in view."]})})}),(0,a.jsx)("p",{children:"With that in place, we can now detect when the text is in view, and animate in consequence."}),(0,a.jsx)("h2",{children:"Animate in"}),(0,a.jsx)("p",{children:"For the animation, we will use Framer-Motion, but you could use anything like GSAP or even pure CSS."}),(0,a.jsx)("p",{children:"We can create a new animation variant that will manipule the y attribute of our the text."}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['import { useRef } from \'react\';\nimport { useInView, motion } from \'framer-motion\';\n...\n\nexport function MaskText() {\n\n  const body = useRef(null);\n  const isInView = useInView(body, {once: true, margin: "-75%"})\n\n  const animation = {\n    initial: {y: "100%"},\n    enter: i => ({y: "0", transition: {duration: 0.75, ease: [0.33, 1, 0.68, 1],  delay: 0.075 * i}})\n  }\n\n  return(\n    <div ref={body} className={styles.body}>\n      {\n        phrases.map( (phrase, index) => {\n          return <div key={index} className={styles.lineMask}>\n            <motion.p custom={index} variants={animation} initial="initial" animate={isInView ? "enter" : ""}>{phrase}</motion.p>\n          </div>\n        })\n      }\n    </div>\n  )\n}\n',"...\n.lineMask{\n    overflow: hidden;\n}\n"],languages:["jsx","css"],highlights:[[10,11,12,13],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We add ",(0,a.jsx)("code",{className:"language-jsx",children:"overflow:hidden"})," to the div that encapsulates the div, so that all children will be invisibile outside of its bounds."]}),(0,a.jsxs)("li",{children:["We create a new animation variant that initially set the ",(0,a.jsx)("code",{className:"language-jsx",children:"y"})," property of the text at ",(0,a.jsx)("code",{className:"language-jsx",children:"100%."})]}),(0,a.jsxs)("li",{children:["When the text comes in view, ",(0,a.jsx)("code",{className:"language-jsx",children:"isInView"})," becomes ",(0,a.jsx)("code",{className:"language-jsx",children:"true"}),", triggering the animation and thus setting the ",(0,a.jsx)("code",{className:"language-jsx",children:"y"})," property at ",(0,a.jsx)("code",{className:"language-jsx",children:"0%."})]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"custom"})," attribute is used to transfer the index and create a delay in the animation between the different phrases."]})]})]}),(0,a.jsx)("p",{children:"And that's it! You should see this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-mask-animation/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, it's a very common animation that I find inside of a lot of awwwards winning animation. It's a pretty simple concept, but good to have inside of our toolbox."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function pixel_cursor_trailing_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["For the CSS, we're going to use  ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/css-modules/css-modules",children:"CSS Module"}),", so make sure to create a ",(0,a.jsx)("code",{className:"language-jsx",children:"Home.module.css"})," file inside of the ",(0,a.jsx)("code",{className:"language-jsx",children:"styles"})," folder. Thankfully, Next.js has built-in support for CSS Modules"]})}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client'\nimport styles from './page.module.css'\n\nexport default function Home() {\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.body}>\n        <p>We specialize in turning space into complexe shapes</p>\n      </div>\n    </div>\n  )\n}\n\n",".container{\n  display: flex;\n  height: 100vh;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n}\n\n.container .body{\n  font-size: 6vw;\n  text-align: center;\n  font-weight: 700;\n  width: 70%;\n  position: relative;\n  z-index: 1;\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/pixel-cursor-trailing/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Rendering the blocks"}),(0,a.jsx)("p",{children:"Now that we've added the basic layout, we'll create a series of blocks in HTML that will allow us to create the trailing effect."}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will create blocks of ",(0,a.jsx)("code",{className:"language-jsx",children:"5vw"})," x ",(0,a.jsx)("code",{className:"language-jsx",children:"5vw"})," of height."]}),(0,a.jsx)("li",{children:"We will have 20 columns on the horizontal with a certain amount of blocks inside of them."}),(0,a.jsxs)("li",{children:["To calculate the amount of blocks inside the columns, we will do ",(0,a.jsx)("code",{className:"language-jsx",children:"Math.ceil(window.innerHeight / 5vw)"})]})]})}),(0,a.jsx)("h3",{children:"Storing the Windows width inside the state"}),(0,a.jsx)("p",{children:"Since the creating of the blocks require the value of the windows width, we will initially store it inside the state."}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client'\nimport styles from './page.module.css'\nimport { useState, useEffect } from 'react';\n\nexport default function Home() {\n\n  const [windowsWidth, setWindowsWidth] = useState(0);\n\n  useEffect(() => {\n    setWindowsWidth(window.innerWidth);\n  }, [])\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.body}>\n        <p>We specialize in turning space into complexe shapes</p>\n      </div>\n    </div>\n  )\n}\n",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Note that if you are not using Next.js, and you are using something like Vanilla React or any other Client-side tool, you do not need to store the value of the window inside the state."})})}),(0,a.jsx)("h3",{children:"Rendering the different blocks"}),(0,a.jsx)("p",{children:"Once we have stored the windows width inside the state, we can now use it to render the blocks."}),(0,a.jsx)(g.Z,{titles:["page.js","Home.module.css"],codes:["...\nconst [windowsWidth, setWindowsWidth] = useState(0);\n\nconst getBlocks = () => {\n    const blockSize = windowsWidth * 0.05;\n    const nbOfBlocks = Math.ceil(window.innerHeight / blockSize);\n      return [...Array(nbOfBlocks).keys()].map((_, index) => {\n        return <div key={index}></div>\n    })\n  }\n  return (\n    <div className={styles.container}>\n     ...\n      <div className={styles.grid}>\n        {\n          windowsWidth > 0 && [...Array(20).keys()].map( (_, index) => {\n            return <div key={'b_' + index} className={styles.column}>\n                {\n                  getBlocks()\n                }\n            </div>\n          })\n        }\n      </div>\n    </div>\n  )\n","...\n.container .grid{\n    display: flex;\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: absolute;\n  }\n  \n  .grid .column{\n    width: 5vw;\n  }\n  \n  .column div{\n    width: 100%;\n    height: 5vw;\n    border: 1px solid red;\n  }\n  "],languages:["jsx","css"],highlights:[[7,16],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a couple of important things to note:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 16:"})," 20 columns are rendered."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 7:"})," Each column contains a ",(0,a.jsx)("code",{className:"language-jsx",children:"nbOfBlocks"})," depending on the windows height and the windows width."]})]})]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/pixel-cursor-trailing/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Creating the trail"}),(0,a.jsx)("p",{children:"Now that we have all the blocks, we can simply add a mouse event listener to create thet trail."}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["...\n\n  const getBlocks = () => {\n    const blockSize = windowsWidth * 0.05;\n    const nbOfBlocks = Math.ceil(window.innerHeight / blockSize);\n      return [...Array(nbOfBlocks).keys()].map((_, index) => {\n        return <div onMouseEnter={(e) => {colorize(e.target)}} key={index}></div>\n    })\n  }\n\n  const colorize = (el) => {\n    el.style.backgroundColor = 'black'\n    setTimeout( () => {\n      el.style.backgroundColor = 'transparent';\n    }, 300)\n  }\n\n...","...\n\n.container .body{\n  ...\n  pointer-events: none;\n}"],languages:["jsx","css"],highlights:[[7],[]]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Nothing too complicated here. If we hover a block, we set the background-color to black and after .3s we reset it to transparent."})})}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-cursor-trailing/video1.mov"}),(0,a.jsx)("h2",{children:"Mixing in blend modes"}),(0,a.jsxs)("p",{children:["For a final touch, we'll add a blending mode to the text so to have a nice color effect. Thankfully, CSS is extremely powerful for that and will allow us to create this very easily with the ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode",children:"mix-blend-mode"})," property."]}),(0,a.jsx)(x.Z,{title:"page.module.css",code:"...\n\n.container .body{\n  ...\n  text-transform: uppercase;\n  mix-blend-mode: difference;\n  color: white;\n}\n",language:"css"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-cursor-trailing/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, very fun to see how we can use simple HTML and css to create a trailing effect that looks pixelated."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function mouse_image_gallery_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app myApp"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("h3",{children:"Adding all the images"}),(0,a.jsxs)("p",{children:["The first thing we can do now is to render all the images. Initially, we will put them all with a ",(0,a.jsx)("code",{className:"language-jsx",children:"display:none"}),". You can find the images I used ",(0,a.jsx)(d(),{href:"https://github.com/olivierlarose/mouse-image-gallery",target:"_blank",children:"here"}),"."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["All the images are added inside a new folder: ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsx)("li",{children:"All images are named from 0.jpg to 18.jpg (I have 19 images)."})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client'\nimport styles from './page.module.css'\nimport { useRef } from 'react';\n\nexport default function Home() {\n\n  let refs = []\n  \n  return (\n    <main className={styles.main}>\n       {\n        [...Array(19).keys()].map( (_, index) => {\n          const ref = useRef(null);\n          refs.push(ref)\n          return <img key={index} ref={ref} src={`/images/${index}.jpg`}></img>\n        })\n      }\n    </main>\n  )\n}",".main {\n    display: flex;\n    height: 100vh;\n    position: relative;\n    overflow: hidden;\n}\n\n.main img{\n    width: 30vw;\n    position: absolute;\n    display: none;\n}"],languages:["jsx","css"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the above code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["I have 19 images inside my ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"})," folder, so we can create an Array of 19 empty elements and map it."]}),(0,a.jsx)("li",{children:"For each image, we create a new ref and add it to a refs array."})]})]}),(0,a.jsxs)("p",{children:["After that, we should still see nothing, since we put all the images in ",(0,a.jsx)("code",{className:"language-jsx",children:"display:none"}),"."]}),(0,a.jsx)("h2",{children:"Moving the images"}),(0,a.jsx)("p",{children:"To move the images along with the cursor, we'll add a mouse event on the main container. We will then move the image at the position of the cursor."}),(0,a.jsx)("p",{children:"Since we do not want to move the images at each mouse mouse event trigger, we'll add a step mechanism to slow down the pace at which the images move."}),(0,a.jsxs)("p",{children:["Also, to make it look clean, we add ",(0,a.jsx)("code",{className:"language-jsx",children:"transform: translateX(-50%) translateY(-50%)"})," on the images to center them on the cursor."]}),(0,a.jsx)("p",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['...\n  let refs = []\n  let currentIndex = 0;\n  let steps = 0;\n  let nbOfImages = 0;\n\n  const manageMouseMove = (e) => {\n    const { clientX, clientY, movementX, movementY } = e;\n\n    steps+= Math.abs(movementX) + Math.abs(movementY);\n\n    if(steps >= currentIndex * 150){\n      moveImage(clientX, clientY)\n    }\n\n    if(currentIndex == refs.length){\n      currentIndex = 0;\n      steps = -150;\n    }\n  }\n\n const moveImage = (x, y) => {\n   const currentImage = refs[currentIndex].current;\n   currentImage.style.left = x + "px";\n   currentImage.style.top = y + "px";\n   currentImage.style.display = "block";\n   currentIndex++;\n   nbOfImages++;\n }\n\n return (\n   <main onMouseMove={(e) => {manageMouseMove(e)}} className={styles.main}>\n   ...',"...\n.main img{\n    ...\n    transform: translateX(-50%) translateY(-50%);;\n}"],languages:["jsx","css"],highlights:[[13,16,17,18,22]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the above code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We increment the ",(0,a.jsx)("code",{className:"language-jsx",children:"steps"})," by the amount of movement from the cursor. When it reaches a movement of 150px in either direction (x or y), we move the next image."]}),(0,a.jsxs)("li",{children:["When reaching the last image, we reset the ",(0,a.jsx)("code",{className:"language-jsx",children:"currentIndex"})," to 0 to loop back to the first image"]}),(0,a.jsxs)("li",{children:["When reaching the last image, we also set the ",(0,a.jsx)("code",{className:"language-jsx",children:"steps"})," to -150, so that an image does not immediately appear on the next mouse event move."]})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-image-gallery/video1.mov"}),(0,a.jsx)("h3",{children:"We now have two issues"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"We have too many images"}),(0,a.jsx)("li",{children:"We have an overlapping problem"})]}),(0,a.jsx)("p",{children:"To fix them, we will start by creating a utilitary function that will get the current showm images."}),(0,a.jsx)("h2",{children:"Getting the shown images"}),(0,a.jsx)("p",{children:"To help us remove the images and fix the overlapping issue, we can create a function that will return all images that are currently shown. This will help us reduce the complexity of the code."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\n//Returns an array of the current img elements shown\nconst getCurrentImages = () => {\n   let images = []\n   let indexOfFirst = currentIndex - nbOfImages;\n   for(let i = indexOfFirst ; i < currentIndex ; i++){\n     let targetIndex = i;\n     if(targetIndex < 0) targetIndex += refs.length\n     images.push(refs[targetIndex].current);\n   }\n   return images;\n}\n...",language:"jsx"}),(0,a.jsx)("h2",{children:"Removing the images"}),(0,a.jsx)("p",{children:"With that helper function, we can now easily set a max number of images and remove the first image of our stack."}),(0,a.jsx)(x.Z,{title:"page.js",code:'...\nlet maxNumberOfImages = 8;\n\nconst manageMouseMove = (e) => {\n  \n  if(steps >= currentIndex * 150){\n    ...\n    if(nbOfImages == maxNumberOfImages){\n      removeImage();\n    }\n    ...\n  }\n}\n\nconst removeImage = () => {\n  const images = getCurrentImages();\n  images[0].style.display = "none";\n  nbOfImages--;\n}\n...\n',language:"jsx"}),(0,a.jsx)("p",{children:"Now we have a pretty nice animations, but we still have an overlapping problem."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-image-gallery/video2.mov"}),(0,a.jsx)("h2",{children:"Setting the zIndex"}),(0,a.jsx)("p",{children:"With the help of our helper function, we can easily set the zIndex after moving an image:"}),(0,a.jsx)(x.Z,{title:"page.js",code:"const moveImage = (x, y) => {\n  ...\n  setZIndex()\n}\n\nconst setZIndex = () => {\n   const images = getCurrentImages();\n   for(let i = 0 ; i < images.length ; i++){\n     images[i].style.zIndex = i;\n  }\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"And here we have our final animation:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-image-gallery/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, a visually striking animation that's quite easy to do! A nice animation for photography portfolio or highly visual projects."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function image_slide_project_gallery_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["All the images are added inside a new folder: ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsxs)("li",{children:["You can find the ones I used ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/olivierlarose/image-slide-project-gallery",children:"here"}),"."]})]})}),(0,a.jsxs)("h3",{children:["Setting up the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," component"]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['\'use client\'\nimport styles from \'./page.module.css\'\nimport Project from \'../components/project\';\n\nexport default function Home() {\n\n  const projects = [\n    {\n      title1: "Jomor",\n      title2: "Design",\n      src: "jomor_design.jpeg"\n    },\n    {\n      title1: "La",\n      title2: "Grange",\n      src: "la_grange.jpeg"\n    },\n    {\n      title1: "Deux Huit",\n      title2: "Huit",\n      src: "deux_huit_huit.jpeg"\n    },\n    {\n      title1: "Nothing",\n      title2: "Design Studio",\n      src: "nothing_design_studio.png"\n    },\n    {\n      title1: "Mambo",\n      title2: "Mambo",\n      src: "mambo_mambo.jpeg"\n    }\n  ]\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.gallery}>\n        <p>Featured Work</p>\n          {\n            projects.map( project => {\n              return <Project project={project}/>\n            })\n          }\n      </div>\n    </main>\n  )\n}\n',".main {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  }\n  \n.gallery{\n  width: 70%;\n}"],languages:["jsx","css"]}),(0,a.jsx)("p",{children:"Here we define the values we need for each project inside the projects array. We also map it and return a new component for each project."}),(0,a.jsxs)("h3",{children:["Setting up the ",(0,a.jsx)("code",{className:"language-jsx",children:"project.js"})," component"]}),(0,a.jsx)(g.Z,{titles:["project.jsx","style.module.css"],codes:["import styles from './Style.module.css';\n\nexport default function index({project}) {\n    const { title1, title2, src } = project;\n    return (\n        <div className={styles.project}>\n            <p>{title1}</p>\n            <div className={styles.imgContainer}>\n                <img src={`/medias/${src}`}></img>\n            </div>\n            <p>{title2}</p>\n        </div>\n    )\n}",".project{\n    border-top: 2px solid black;\n    padding-top: 0.8vw;\n    padding-bottom: 0.8vw;\n    cursor: pointer;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n  \n.project p{\n    font-size: 5vw;\n    margin: 0px;\n}\n.project p:nth-of-type(1){\n    margin-right: 0.75vw;\n}\n.project p:nth-of-type(2){\n    margin-left: 0.75vw;\n}\n.project:last-of-type{\n    border-bottom: 2px solid black;\n}\n.project img{\n    width: 10vw;\n}"],languages:["jsx","css"]}),(0,a.jsxs)("p",{children:["Nothing too complicated here. One thing to note is we split the title with two different ",(0,a.jsx)("code",{className:"language-jsx",children:"p"})," and put the image in between."]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/image-slide-project-gallery/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Animating the images"}),(0,a.jsx)("p",{children:"To animate the images, we will need to:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Add some styling to the image container"}),(0,a.jsxs)("li",{children:["Install Framer motion and animate the ",(0,a.jsx)("code",{className:"language-jsx",children:"width: auto"})]})]}),(0,a.jsx)("p",{children:(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"})}),(0,a.jsx)(g.Z,{titles:["project.jsx","style.module.css"],codes:["'use client'\nimport styles from './style.module.css';\nimport { motion } from 'framer-motion';\nimport { useState } from 'react';\n\nconst anim = {\n    initial: {width: 0},\n    open: {width: \"auto\", transition: {duration: 0.4, ease: [0.23, 1, 0.32, 1]}},\n    closed: {width: 0}\n}\n\nexport default function index({project}) {\n\n    const [isActive, setIsActive] = useState(false);\n\n    const { title1, title2, src } = project;\n    return (\n        <div onMouseEnter={() => {setIsActive(true)}} onMouseLeave={() => {setIsActive(false)}} className={styles.project}>\n            <p>{title1}</p>\n            <motion.div variants={anim} animate={isActive ? \"open\" : \"closed\"} className={styles.imgContainer}>\n                <img src={`/medias/${src}`}></img>\n            </motion.div>\n            <p>{title2}</p>\n        </div>\n    )\n}","...\n.project .imgContainer{\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  width: 0;\n}"],languages:["jsx","css"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple of things to note about the code"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"display: flex"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"justify-content: center"})," to make the div grow from its center."]}),(0,a.jsxs)("li",{children:["We trigger the animation by toggling the ",(0,a.jsx)("code",{className:"language-jsx",children:"isActive"})," value when hovering the project."]})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/image-slide-project-gallery/video1.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation! Very easy to animate the width: auto with the help of Framer-motion, and it allows us to create a simple yet eye pleasing animation."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function image_pixelisation_lazy_loading_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app myApp"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("h3",{children:"Adding all the images"}),(0,a.jsxs)("p",{children:["The first thing we can do now is to render all the images.  Initially, we will put them all with a ",(0,a.jsx)("code",{className:"language-jsx",children:"display:none"}),". You can find the images I used ",(0,a.jsx)(d(),{href:"https://github.com/olivierlarose/image-pixelisation-lazy-loading",target:"_blank",children:"here"}),"."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["All the images are added inside a new folder: ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsx)("li",{children:"All images are named from (0.png and 0_small.png) to (7.png and 7_small.png) (I have 8 images)."})]})}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/image-pixelisation-lazy-loading/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the pixelated effect"})}),(0,a.jsx)("p",{children:"From the original image, we need to export a very small version of it, approximately 10-15 pixels of width. We will initially render that small version of the image for the lazy loading."}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/image-pixelisation-lazy-loading/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the pixelated effect"})}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["Then we can create an array of 7 elements, map it and return multiple",(0,a.jsx)("code",{className:"language-jsx",children:"PixelatedImage.jsx"})," components."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["import styles from './page.module.css'\nimport PixelatedImage from '../components/PixelatedImage';\n\nexport default function Home() {\n  return (\n    <div className={styles.main}>\n      {\n        [...Array(7).keys()].map( (_, index) => {\n          return <PixelatedImage src={`/images/${index}.png`} src10={`/images/${index}_small.png`}/>\n        })\n      }\n    </div>\n  )\n}",".main{\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 100px;\n  margin-top: 200px;\n}"],languages:["jsx","css"]}),(0,a.jsxs)("p",{children:["For the ",(0,a.jsx)("code",{className:"language-jsx",children:"PixelatedImage.jsx"})," component, we can create a new ",(0,a.jsx)("code",{className:"language-jsx",children:"/src/components"})," folder and put inside. It should look like this:"]}),(0,a.jsx)(g.Z,{titles:["PixelatedImage.jsx","style.module.css"],codes:["'use client'\nimport styles from './style.module.css';\nimport { useRef, useState } from 'react';\nimport NextImage from 'next/image';\n\nexport default function Index({src, src10}) {\n\n    const [dimension, setDimension] = useState({width: 0, height: 0});\n    const canvas = useRef(null);\n\n    return (\n        <div className={styles.ImageContainer}>\n            <NextImage \n                src={src10}\n                width={0}\n                height={0}\n                onLoadingComplete={(e) => {setDimension({width: e.width, height: e.height})}}\n                priority={true}\n                alt=\"image\"\n            />            \n            <canvas ref={canvas} width={dimension.width} height={dimension.height}></canvas>\n        </div>\n    )\n}",".ImageContainer {\n    position: relative;\n    width: 400px;\n  }\n  \n.ImageContainer canvas{\n    position: absolute;\n    left: 0;\n    z-index: 1;\n}\n  \n.ImageContainer img{\n    image-rendering: pixelated;\n    width: 100%;\n    height: auto;\n}"],languages:["jsx","css"],highlights:[[],[13]]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"We set canvas in position absolute and its width and the height to be equal to the image, so that it perfectly overlaps on top of the image."}),(0,a.jsxs)("li",{children:["To obtain the pixelated effect, make sure to add ",(0,a.jsx)("code",{className:"language-jsx",children:"image-rendering: pixelated"})," on the small images."]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/image-pixelisation-lazy-loading/video1.mov"}),(0,a.jsx)("h2",{children:"Detecting when in view"}),(0,a.jsxs)("p",{children:["To detect when the image enters the viewport, we're going to use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.npmjs.com/package/react-intersection-observer",children:"react-intersection-observer"})," library. Only after the image enters the viewport will we want to download and render the full image. We'll then effectively have a lazy loading."]}),(0,a.jsx)(x.Z,{title:"PixelatedImage.jsx",code:"...\nimport { useInView } from 'react-intersection-observer';\nimport { useRef, useState, useEffect } from 'react';\n\nexport default function Index({src, src10}) {\n\nconst { ref, inView } = useInView({\n    threshold: 0.75,\n    triggerOnce: true\n});\n\nuseEffect(() => {\n    //Render the image when the component is inView and the small image is loaded\n    if(inView && dimension.width > 0){\n        const image = new Image();\n        image.onload = () => {\n            setTimeout( () => {\n                animate(image);\n            }, 150)\n        }\n        image.src = src\n    }\n}, [inView, dimension])\n\nconst drawImage = (image) => {\n    const ctx = canvas.current.getContext(\"2d\", {willReadFrequently: true});\n    ctx.drawImage(image, 0, 0, dimension.width, dimension.height);\n}\n\nconst animate = (image) => {\n    drawImage(image);\n}\n\nreturn (\n    <div className={styles.ImageContainer}>\n        <NextImage \n            ref={ref} \n            ...\n    </div>\n)",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"For now, the animate function only draws the image once."}),(0,a.jsx)("li",{children:"We add a little bit of delay before drawing the image to accentuate the effect."})]})}),(0,a.jsx)("p",{children:" We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/image-pixelisation-lazy-loading/video2.mov"}),(0,a.jsx)("h2",{children:"Creating the pixel effect"}),(0,a.jsxs)("p",{children:["To create the pixel effect, we want to extract the data from the full sized image that we previously drew on the canvas. The ",(0,a.jsx)("code",{className:"language-jsx",children:"getImageData()"})," function returns us an array containing the RGBA values of each pixels."]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"An image of 400 x 600 pixels would return us an array of (400 * 600) * 4 elements."}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Note that we multiply by 4 because for each pixels, the array contains 4 values for it (RGBA)."})})]}),(0,a.jsx)("p",{children:"We can then loop the pixels of our image with a double loop that iterates through the rows (y) and the columns (x) of pixels of the image."}),(0,a.jsx)(x.Z,{code:"for (let y = 0; y < h; y++) //loop the rows of pixels {\n  for (let x = 0; x < w; x++) //loop the column of pixels {\n  }\n}",language:"jsx"}),(0,a.jsxs)("p",{children:["This formula allows us to find the right position of the pixel from the ",(0,a.jsx)("code",{className:"language-jsx",children:"getImageData()"})," array:"]}),(0,a.jsx)(x.Z,{code:"let pos = (x + y * w) * 4;",language:"jsx"}),(0,a.jsx)("p",{children:"We can then extract the RGBA values from that pixel and draw a rectangle on the canvas with those values."}),(0,a.jsx)(x.Z,{code:'ctx.fillStyle = "rgba(" + pixelArr[pos] + "," + pixelArr[pos + 1] + "," + pixelArr[pos + 2] + "," + pixelArr[pos + 3] + ")";\nctx.fillRect(x, y, size, size);',language:"jsx"}),(0,a.jsx)("h3",{children:"It should look like this"}),(0,a.jsx)(x.Z,{title:"PixelatedImage.jsx",code:'const animate = (image, size=20) => {\n    drawImage(image);\n    if(size < 5) return;\n    \n    const w = dimension.width;\n    const h = dimension.height;\n    const ctx = canvas.current.getContext("2d", {willReadFrequently: true});\n    const pixelArr = ctx.getImageData(0, 0, w, h).data;\n    for (let y = 0; y < h; y += size) {\n      for (let x = 0; x < w; x += size) {\n        let pos = (x + y * w) * 4;\n        ctx.fillStyle = "rgba(" + pixelArr[pos] + "," + pixelArr[pos + 1] + "," + pixelArr[pos + 2] + "," + pixelArr[pos + 3] + ")";\n        ctx.fillRect(x, y, size, size);\n      }\n    }\n\n    setTimeout( () => {\n        animate(image, size/2);\n    }, 150)\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Note that instead of iterating through all pixels of the image, we skip a certain amount of them (",(0,a.jsx)("code",{className:"language-jsx",children:"size"}),"), equivalent to the size of the square we will draw."]}),(0,a.jsxs)("li",{children:["We will then recursively call the same function with a smaller ",(0,a.jsx)("code",{className:"language-jsx",children:"size"}),", which will have the effect of drawing more square, and thus having a higher resolution image."]})]})}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/image-pixelisation-lazy-loading/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, a fun way to create a lazy loading, if your website is pixel themed, it can definetely be a nice detail to have!"}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_clip_mask_on_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app myApp"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Managing the medias"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Let's add a .mp4 video inside a new ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsxs)("li",{children:["Let's also add an SVG that will mask the video. We will also put it inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsxs)("li",{children:["You can find everything I used ",(0,a.jsx)(d(),{href:"https://github.com/olivierlarose/text-clip-mask-on-scroll",target:"_blank",children:"here"}),"."]})]})}),(0,a.jsx)("p",{children:"My SVG looks like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/text-clip-mask-on-scroll/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of an SVG"})}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("h3",{children:"Using sticky position"}),(0,a.jsxs)("p",{children:["To make our mask fixed while scrolling, we will use the css position ",(0,a.jsx)(d(),{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/position",target:"_blank",children:"sticky"}),". This will allow the mask to be fixed for the total length of its parent."]}),(0,a.jsx)("h3",{children:"Using mask-image"}),(0,a.jsxs)("p",{children:["To clip the video with the SVG, we will use the css property ",(0,a.jsx)(d(),{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image",target:"_blank",children:"mask-image"}),". By doing this we can easily clip our video using CSS"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client'\nimport { useRef } from 'react';\nimport styles from './page.module.css'\n\nexport default function Home() {\n\n  const container = useRef(null);\n  const stickyMask = useRef(null);\n\n  return (\n    <main className={styles.main}>\n      <div ref={container} className={styles.container}>\n        <div ref={stickyMask} className={styles.stickyMask}>\n          <video autoPlay muted loop>\n            <source src=\"/medias/nature.mp4\" type=\"video/mp4\"/>\n          </video>\n        </div>\n      </div>\n    </main>\n  )\n}",".main{\n  margin-bottom: 100vh;\n}\n\n.container{\n  position: relative;\n  height: 300vh;\n  background-color: rgb(255, 255, 255);\n}\n\n.stickyMask{\n  display: flex;\n  overflow: hidden;\n  position: sticky;\n  top: 0;\n  height: 100vh;\n  align-items: center;\n  justify-content: center;\n  mask-image: url('/medias/mask.svg');\n  mask-position: center center;\n  mask-repeat: no-repeat;\n  mask-size: 80%;\n}\n\n.stickyMask video{\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n}"],languages:["jsx","css"]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-clip-mask-on-scroll/video1.mov"}),(0,a.jsx)("h2",{children:"Adding scroll interactivity"}),(0,a.jsxs)("p",{children:["To scale the mask while scrolling, we will use ",(0,a.jsx)("code",{className:"language-jsx",children:"requestAnimationFrame"})," to continually read the position of the mask relative to the container. After getting the scroll progress value, we can then easily adjust the maskSize CSS property accordingly."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['...\nconst initialMaskSize = .8;\nconst targetMaskSize = 30;\n\nuseEffect( () => {\n  requestAnimationFrame(animate)\n}, [])\n\nconst animate = () => {\n  const maskSizeProgress = targetMaskSize * getScrollProgress();\n  stickyMask.current.style.webkitMaskSize = (initialMaskSize + maskSizeProgress) * 100 + "%";\n  requestAnimationFrame(animate)\n}\n\nconst getScrollProgress = () => {\n  const scrollProgress = stickyMask.current.offsetTop / (container.current.getBoundingClientRect().height - window.innerHeight)\n  return scrollProgress\n}\n\nreturn (\n  <main className={styles.main}>\n    <div ref={container} className={styles.container}>\n      <div ref={stickyMask} className={styles.stickyMask}>\n        <video autoPlay muted loop>\n...',"...\n.stickyMask{\n  ...\n  mask-position: 52.35% center;\n}\n"],languages:["jsx","css"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"initialMaskSize"})," is set at .8 because of the mask-size CSS property of 80% previously added."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"targetMaskSize"})," can be adjusted depending on the size of your SVG mask. 30, which is 3000% was the right value for me."]}),(0,a.jsxs)("li",{children:["To perfectly zoom in the '+' sign, I adjusted the ",(0,a.jsx)("code",{className:"language-jsx",children:"mask-position"})," css property."]})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-clip-mask-on-scroll/video2.mov"}),(0,a.jsx)("h2",{children:"Adding an easing"}),(0,a.jsx)("p",{children:"Our animation works perfectly, but we can refine it by adjusting an easing to it. Currently the mask size scales linearly to the scroll position, we but can add a lerp, that will make the animation much smoother."}),(0,a.jsx)(x.Z,{title:"page.js",code:'...\nconst easing = 0.15;\nlet easedScrollProgress = 0;\n\nconst animate = () => {\n  const maskSizeProgress = targetMaskSize * getScrollProgress();\n  stickyMask.current.style.webkitMaskSize = (initialMaskSize + maskSizeProgress) * 100 + "%";\n  requestAnimationFrame(animate)\n}\n\nconst getScrollProgress = () => {\n  const scrollProgress = stickyMask.current.offsetTop / (container.current.getBoundingClientRect().height - window.innerHeight)\n  const delta = scrollProgress - easedScrollProgress;\n  easedScrollProgress += delta * easing;\n  return easedScrollProgress\n}\n...',language:"jsx",highlights:[2,3,13,14,15]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"Instead of direcly returning the scroll progress, we can return an eased scroll progress that will gradually be incremented over time."})}),(0,a.jsx)("h3",{children:"The final result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-clip-mask-on-scroll/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, A nice way to use the mask css property! Coupled with a scroll interaction and a sticky position, it can make for a really nice landing page."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function svg_curve_loading_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client';\nimport styles from './page.module.css'\nimport { useRef } from 'react'\n\nexport default function Home() {\n\n  const loader = useRef(null);\n  const path = useRef(null);\n  \n  return (\n    <main className={styles.main}>\n\n      <div className={styles.body}>\n        <h1>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.</h1>\n      </div>\n\n      <div ref={loader} className={styles.loader}>\n        <svg>\n          <path ref={path}></path>\n        </svg>\n      </div>\n\n    </main>\n  )\n}",".main{\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n.body{\n     width: 80%;\n    font-size: 2vw;\n    text-align: center;\n}\n  \n.loader{\n    height: calc(100vh + 200px);\n    width: 100%;\n    position: fixed;\n}\n  \n.loader svg{\n    height: 100%;\n    width: 100%;\n}\n  \n.loader svg path{\n    stroke: black;\n    stroke-width: 1px;\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-curve-loading/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Creating the SVG"}),(0,a.jsxs)("p",{children:["To create the SVG, we will use ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths",children:"Line commands and Curve commands"}),"."]}),(0,a.jsx)("p",{children:"More specifically, we will use the Move To command:"}),(0,a.jsx)(x.Z,{title:"Move To",code:"M x y",language:"jsx"}),(0,a.jsx)("p",{children:"And the B\xe9zier Curve command:"}),(0,a.jsx)(x.Z,{title:"B\xe9zier Curve",code:"Q x1 y1, x y",language:"jsx"}),(0,a.jsxs)("p",{children:["Here we initialize a curve value of 200, that we will use in the B\xe9zier curve command. That value is related to the ",(0,a.jsx)("code",{className:"language-jsx",children:"height: calc(100vh + 200px)"})," of the loader."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nimport { useRef, useEffect } from 'react'\n\nexport default function Home() {\n\n  const loader = useRef(null);\n  const path = useRef(null);\n  const initialCurve = 200;\n\n  useEffect(() => {\n    setPath(initialCurve)\n  }, [])\n\n  const loaderHeight = () => {\n    const loaderBounds = loader.current.getBoundingClientRect();\n    return loaderBounds.height;\n  }\n\n  const setPath = (curve) => {\n    const width = window.innerWidth\n    const height = loaderHeight();\n    path.current.setAttributeNS(null, \"d\",\n    `M0 0\n    L${width} 0\n    L${width} ${height}\n    Q${width/2} ${height - curve} 0 ${height}\n    L0 0`\n    )\n  }\n\n  return (\n    ...\n      <div ref={loader} className={styles.loader}>\n        <svg>\n          <path ref={path}></path>\n        </svg>\n      </div>\n  )\n}\n",language:"jsx"}),(0,a.jsx)("p",{children:"The commands are basically drawing a rectangle with the size of (window + 200px), with  curved a bottom line."}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-curve-loading/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("div",{style:{marginTop:"30px"},className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," We see the black SVG taking the full window and we are not seeing the curved bottom, because we set a height of ",(0,a.jsx)("code",{className:"language-jsx",children:"height: calc(100vh + 200px)"}),"."]})}),(0,a.jsx)("h2",{children:"Sliding up the SVG"}),(0,a.jsxs)("p",{children:["To slide up the SVG, we'll simply use ",(0,a.jsx)("code",{className:"language-jsx",children:"requestAnimateFrame"})," and change the ",(0,a.jsx)("code",{className:"language-jsx",children:"top"})," property of the loader."]}),(0,a.jsx)("p",{children:"We will also use the easeOutQuad easing function to make everything smoother."}),(0,a.jsx)(x.Z,{title:"page.js",code:'...\n  const duration = 600;\n  let start;\n\n  useEffect(() => {\n    setPath(initialCurve)\n    setTimeout( () => {\n      requestAnimationFrame(animate)\n    }, 500)\n  }, [])\n\n  const animate = (timestamp) => {\n    if(start === undefined){\n      start = timestamp\n    }\n    const elapsed = timestamp - start;\n\n    loader.current.style.top = easeOutQuad(elapsed, 0, -loaderHeight(), duration) + "px";\n\n    if(elapsed < duration){\n      requestAnimationFrame(animate)\n    }\n  }\n\n  const easeOutQuad = (time, start, end, duration) => {\n    return -end * (time /= duration) * (time - 2) + start;\n  }\n\n  const loaderHeight = () => {\n    const loaderBounds = loader.current.getBoundingClientRect();\n    return loaderBounds.height;\n  }\n  ...\n',language:"jsx",highlights:[8,18]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple of notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"We wait for 0.5s before animating in the SVG, if we had data, we could wait until the data was fetched and then animate in."}),(0,a.jsx)("li",{children:"The animate function runs for 0.6s and gradually moves the loader up the window with an easeOutQuad easing."})]})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-curve-loading/video1.mov"}),(0,a.jsx)("h2",{children:"Curving out the SVG"}),(0,a.jsx)("p",{children:"The last thing we need to finish this animation is to gradually uncurve the animation to give everything a natural look."}),(0,a.jsx)("p",{children:"The good news is everything is correctly set up to easily to that."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nconst animate = (timestamp) => {\n  ...\n  const newCurve = easeOutQuad(elapsed, initialCurve, -200, duration)\n  setPath(newCurve);\n  ...\n}\n...",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," Since the loader is of ",(0,a.jsx)("code",{className:"language-jsx",children:"calc(100vh + 200px)"}),", the target curve needs to be -200 to have it flat at the end of the animation."]})}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-curve-loading/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We are done! Hope you liked this animation. The curving can be applied to a ton of other situation other than a loading, so it's great tool to have it in our toolbox."}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"- Oli"})]})}function infinite_text_move_on_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The background image is added inside a new ",(0,a.jsx)("code",{className:"language-jsx",children:"/public/images"}),"."]}),(0,a.jsxs)("li",{children:["You can find the one I used ",(0,a.jsx)(d(),{href:"https://github.com/olivierlarose/infinite-text-move-on-scroll",children:"here"}),"."]})]})}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Let's also add ",(0,a.jsx)("code",{className:"language-jsx",children:"margin: 0px"})," on the body in the ",(0,a.jsx)("code",{className:"language-jsx",children:"globals.css"})," to make everything clean."]})}),(0,a.jsxs)("h3",{style:{marginTop:"50px"},children:["Setting up the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," component"]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:["'use client'\nimport Image from 'next/image'\nimport styles from './page.module.css'\nimport { useRef } from 'react';\n\nexport default function Home() {\n\n  const firstText = useRef(null);\n  const secondText = useRef(null);\n  const slider = useRef(null);\n\n  return (\n    <main className={styles.main}>\n      <Image \n        src=\"/images/background.jpg\"\n        fill={true}\n        alt=\"background\"\n      />\n      <div className={styles.sliderContainer}>\n        <div ref={slider} className={styles.slider}>\n          <p ref={firstText}>Freelance Developer -</p>\n          <p ref={secondText}>Freelance Developer -</p>\n        </div>\n      </div>\n    </main>\n  )\n}",".main{\n  position: relative;\n  display: flex;\n  height: 100vh;\n  margin-bottom: 100vh;\n  overflow: hidden;\n}\n\n.main img{\n  object-fit: cover;\n}\n\n.sliderContainer{\n  position: absolute;\n  top: calc(100vh - 350px);\n}\n\n.slider{\n  position: relative;\n  white-space: nowrap;\n}\n\n.slider p{\n  position: relative;\n  margin: 0px;\n  color: white;\n  font-size: 230px;\n  font-weight: 500;\n  padding-right: 50px;\n}\n\n.slider p:nth-of-type(2){\n  position: absolute;\n  left: 100%;\n  top: 0;\n}"],languages:["jsx","css"],highlights:[[],[20,33]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple of important things to note about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The second ",(0,a.jsx)("code",{className:"language-jsx",children:"p"})," is set in position ",(0,a.jsx)("code",{className:"language-jsx",children:"absolute"})," with a ",(0,a.jsx)("code",{className:"language-jsx",children:"left: 100%"}),"so that it's perfectly placed at the right of the first."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"white-space: nowrap"})," so the text overflows outside the window."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/infinite-text-move-on-scroll/video1.mov"}),(0,a.jsx)("h2",{children:"Creating the infinite move"}),(0,a.jsxs)("p",{children:["To move the texts, we'll basically use ",(0,a.jsx)("code",{className:"language-jsx",children:"requestAnimationFrame"})," and at each frame we will move the texts by 0.1% to the right."]}),(0,a.jsxs)("p",{children:["We will also use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://greensock.com/scrolltrigger/",children:"GSAP Library"})," to set xPercent value of the texts."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nlet xPercent = 0;\n\nuseEffect( () => {\n  gsap.set(secondText.current, {left: secondText.current.getBoundingClientRect().width})\n  requestAnimationFrame(animate);\n}, [])\n\nconst animate = () => {\n  if(xPercent > 0){\n    xPercent = -100;\n  }\n  gsap.set(firstText.current, {xPercent: xPercent})\n  gsap.set(secondText.current, {xPercent: xPercent})\n  requestAnimationFrame(animate);\n  xPercent += 0.1;\n}\n...",language:"jsx",highlights:[5,6,13,14]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Initially, the xPercent is set at -100%, and is gradually incremented to 0%, when it reaches 0%, it gets reset back to -100%."})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/infinite-text-move-on-scroll/video2.mov"}),(0,a.jsx)("h2",{children:"Adding scroll interaction"}),(0,a.jsx)("p",{children:"With the scroll, we can now change direction depending on the scroll direction."}),(0,a.jsx)("p",{children:"We can also add an extra move on the texts when scrolling to make everything more responsive to the scroll."}),(0,a.jsxs)("p",{children:["To do that, we will use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://greensock.com/scrolltrigger/",children:"ScrollTrigger library from GSAP"}),"."]}),(0,a.jsx)(x.Z,{title:"page.js",code:'...\nlet direction = -1;\n\n  useEffect( () => {\n    gsap.registerPlugin(ScrollTrigger);\n    gsap.to(slider.current, {\n      scrollTrigger: {\n        trigger: document.documentElement,\n        scrub: 0.5,\n        start: 0,\n        end: window.innerHeight,\n        onUpdate: e => direction = e.direction * -1\n      },\n      x: "-500px",\n    })\n    requestAnimationFrame(animate);\n  }, [])\n\n  const animate = () => {\n    if(xPercent < -100){\n      xPercent = 0;\n    }\n    else if(xPercent > 0){\n      xPercent = -100;\n    }\n    gsap.set(firstText.current, {xPercent: xPercent})\n    gsap.set(secondText.current, {xPercent: xPercent})\n    requestAnimationFrame(animate);\n    xPercent += 0.1 * direction;\n  }\n  ...',language:"jsx",highlights:[12,20,21,29]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"ScrollTrigger allows us to set translate the texts by 500px depending on the progress of the start(0) and the end(window.innerHeight)."}),(0,a.jsx)("li",{children:"ScrollTrigger also allows us to easly read the direction of the scroll."})]})]}),(0,a.jsx)("h3",{children:"And here we should have the final animation:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/infinite-text-move-on-scroll/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation! Very interesting to know how to move text on an infinite basis, it's actually quite easy when leveraging CSS values with percentage. It's a good animation to know and it's quite a popular one as well!"}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_disperse_effect_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css","global.css"],codes:["'use client';\nimport styles from './page.module.css'\n\nexport default function Home() {\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.body}>\n\n        <div className='introLine'>\n          <p>Nathan</p>\n          <p>Smith</p>\n        </div>\n\n        <div className='introLine'>\n          <p>Design</p>\n          <p>&</p>\n        </div>\n\n        <div className='introLine'>\n          <p>Art</p>\n          <p>Direction</p>\n        </div>\n\n        <div className='introLine'>\n          <p>+447533063596</p>\n        </div>\n\n        <div className='introLine'>\n          <p>→Email</p>\n        </div>\n\n        <div className='introLine'>\n          <p>→Insta</p>\n        </div>\n\n      </div>\n    </main>\n  )\n}",".main{\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.body{\n  width: 50vw;\n  color: white;\n}","body{\n  font-family: 'Regular';\n  background-color: black;\n  margin: 0px;\n}\n\n.introLine{\n  display: flex;\n  font-size: 6vw;\n  justify-content: space-between;\n  text-transform: uppercase;\n}\n\n.introLine p{\n  margin: 0px;\n}\n\n.introLine:nth-of-type(5), .introLine:nth-of-type(6){\n  display: inline-flex;\n}\n.introLine:nth-of-type(6){\n  right: -40px;\n  position: relative;\n}\n\n.introLine p{\n  margin: 0px;\n}"],languages:["jsx","css","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/text-disperse-effect/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of an SVG"})}),(0,a.jsx)("h2",{children:"Replace the Text by a Component"}),(0,a.jsxs)("p",{children:["For the texts that we need to animate, we'll create a component inside ",(0,a.jsx)("code",{className:"language-jsx",children:"/src/components/TextDisperse/"})," for them. We can then import and render that component inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"}),"."]}),(0,a.jsx)(g.Z,{titles:["TextDisperse/index.jsx","page.js"],codes:["export default function TextDipserse({children}) {\n  \n  const getChars = (element) => {\n    let chars = [];\n    const word = element.props.children\n    word.split(\"\").forEach( (char, i) => {\n      chars.push(<span key={char + i}>{char}</span>)\n    })\n    return chars;\n  }\n\n  return (\n    <div className='introLine'>\n    { getChars(children) }\n    </div>\n  )\n}","'use client';\nimport TextDipserse from './components/TextDisperse';\nimport styles from './page.module.css'\n\nexport default function Home() {\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.body}>\n\n        ...\n        \n        <TextDipserse>\n          <p>+447533063596</p>\n        </TextDipserse>\n       \n        <TextDipserse>\n          <p>→Email</p>\n        </TextDipserse>\n\n        <TextDipserse>\n          <p>→Insta</p>\n        </TextDipserse>\n\n      </div>\n    </main>\n  )\n}"],languages:["jsx","css"],highlights:[[],[13,14,15,17,18,19,21,22,23]]}),(0,a.jsx)("h2",{children:"Create the Animation File"}),(0,a.jsx)("p",{children:"For the animations, we will create an array of keys with the properties that we want to modify:"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here are the properties that will change:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"x"}),(0,a.jsx)("li",{children:"y"}),(0,a.jsx)("li",{children:"rotationZ"})]})]}),(0,a.jsx)(x.Z,{title:"TextDisperse/animation.js",code:'export const transforms = [\n  {\n      x: -0.8,\n      y: -0.6,\n      rotationZ: -29\n  },\n  {\n      x: -0.2,\n      y: -0.4,\n      rotationZ: -6\n  },\n  {\n      x: -0.05,\n      y: 0.1,\n      rotationZ: 12\n  },\n  {\n      x: -0.05,\n      y: -0.1,\n      rotationZ: -9\n  },\n  {\n      x: -0.1,\n      y: 0.55,\n      rotationZ: 3\n  },\n  {\n      x: 0,\n      y: -0.1,\n      rotationZ: 9\n  },\n  {\n      x: 0,\n      y: 0.15,\n      rotationZ: -12\n  },\n  {\n      x: 0,\n      y: 0.15,\n      rotationZ: -17\n  },\n  {\n      x: 0,\n      y: -0.65,\n      rotationZ: 9\n  },\n  {\n      x: 0.1,\n      y: 0.4,\n      rotationZ: 12\n  },\n  {\n      x: 0,\n      y: -0.15,\n      rotationZ: -9\n  },\n  {\n      x: 0.2,\n      y: 0.15,\n      rotationZ: 12\n  },\n  {\n      x: 0.8,\n      y: 0.6,\n      rotationZ: 20\n  }\n]\n\nexport const disperse = {\n  open: (i) => ({\n    x: transforms[i].x + "em",\n    y: transforms[i].y + "em",\n    rotateZ: transforms[i].rotationZ,\n    transition: {duration: 0.75, ease: [0.33, 1, 0.68, 1]},\n    zIndex: 1\n  }),\n  closed: {\n    x: 0,\n    y: 0,\n    rotateZ: 0,\n    transition: {duration: 0.75, ease: [0.33, 1, 0.68, 1]},\n    zIndex: 0\n  }\n}',language:"jsx"}),(0,a.jsx)("h3",{children:"Integrating the Animations"}),(0,a.jsxs)("p",{children:["For the animations, we will use ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/",children:"Framer Motion"})," and use the animation from the ",(0,a.jsx)("code",{children:"animation.js"})," file:"]}),(0,a.jsx)(x.Z,{title:"TextDisperse/index.jsx",code:"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { disperse } from './anim';\n\nexport default function TextDipserse({children, setBackground}) {\n  \n    const [isAnimated, setIsAnimated] = useState(false);\n  \n    const getChars = (element) => {\n      let chars = [];\n      const word = element.props.children\n      word.split(\"\").forEach( (char, i) => {\n        chars.push(<motion.span custom={i} variants={disperse} animate={isAnimated ? \"open\" : \"closed\"} key={char + i}>{char}</motion.span>)\n      })\n      return chars;\n    }\n  \n    const manageMouseEnter = () => {\n      setIsAnimated(true);\n    }\n    const manageMouseLeave = () => {\n      setIsAnimated(false);\n    }\n  \n    return (\n      <div style={{cursor: \"pointer\"}} onMouseEnter={() => {manageMouseEnter()}} onMouseLeave={() => {manageMouseLeave(false)}} className='introLine'>\n      { getChars(children) }\n      </div>\n    )\n  }",language:"jsx",highlights:[7,13,19,22]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-disperse-effect/video1.mov"}),(0,a.jsx)("h2",{children:"Darkening the background"}),(0,a.jsxs)("p",{children:["To darken the background, we can create a state in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," file and give the responsibility of setting it to the ",(0,a.jsx)("code",{className:"language",children:"TextDisperse"})," component."]}),(0,a.jsx)(g.Z,{titles:["TextDisperse/index.jsx","page.js","page.module.css"],codes:["...\nexport default function TextDipserse({children, setBackground}) {\n    ...\n    const manageMouseEnter = () => {\n      setBackground(true)\n      setIsAnimated(true);\n    }\n    const manageMouseLeave = () => {\n      setBackground(false)\n     setIsAnimated(false);\n   }\n  \n    return (\n      <div style={{cursor: \"pointer\"}} onMouseEnter={() => {manageMouseEnter()}} onMouseLeave={() => {manageMouseLeave(false)}} className='introLine'>\n      { getChars(children) }\n      </div>\n    )\n}","...\nexport default function Home() {\n\n  const background = useRef(null);\n\n  const setBackground = (isActive) => {\n    gsap.to(background.current, {opacity: isActive ? 0.8 : 0})\n  }\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.body}>\n\n        ...\n\n        <TextDisperse setBackground={setBackground}>\n          <p>+447533063596</p>\n        </TextDisperse>\n\n        <TextDisperse setBackground={setBackground}>\n          <p>→Email</p>\n        </TextDisperse>\n\n        <TextDisperse setBackground={setBackground}>\n          <p>→Insta</p>\n        </TextDisperse>\n\n      </div>\n      <div ref={background} className={styles.background}></div>\n    </main>\n  )\n}","...\n.background{\n  background-color: black;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  opacity: 0;\n}"],languages:["jsx","jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-disperse-effect/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That was it for this animation, very stylish animation and surprisingly easy to do as well!"}),(0,a.jsx)("p",{children:"Hope you learned a lot :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_gradient_opacity_on_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css","global.css"],codes:['\'use client\'\nimport styles from \'./page.module.css\'\nimport { useRef } from \'react\';\n\nconst phrase = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters.";\n\nexport default function Home() {\n\n  let refs = useRef([]);\n  const container = useRef(null);\n\n  const splitWords = (phrase) => {\n    let body = [];\n    phrase.split(" ").forEach( (word, i) => {\n      const letters = splitLetters(word);\n      body.push(<p key={word + "_" + i}>{letters}</p>)\n    })\n    return body\n  }\n\n  const splitLetters = (word) => {\n    let letters = []\n    word.split("").forEach( (letter, i) => {\n      letters.push(<span key={letter + "_" + i} ref={el => {refs.current.push(el)}}>{letter}</span>)\n    })\n    return letters;\n  }\n\n  return (\n    <main ref={container} className={styles.main}>\n      <div ref={body} className={styles.body}>\n        {\n          splitWords(phrase)\n        }\n      </div>\n    </main>\n  )\n}',".main{\n    display: flex;\n    height: 100vh;\n    align-items: flex-end;\n    justify-content: center;\n    margin-bottom: 100vh;\n    color: rgb(211, 211, 211);\n}\n\n.body{\n    width: 90%;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.body p{\n    font-size: 3.5vw;\n    margin: 0px;\n    margin-right: 1.5vw;\n    font-weight: 700;\n}\n\n.body span{\n    opacity: 0.2;\n}","\nbody{\n    background-color: black;\n}"],languages:["jsx","css","css"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Notes about the code:"})}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:(0,a.jsxs)("p",{children:["Here we split the phrase in characters and add each one of those characters inside a ",(0,a.jsx)("code",{className:"language-jsx",children:"refs"})," array, that we will later use to animate everything."]})})})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-gradient-opacity-on-scroll/video1.mov"}),(0,a.jsx)("h2",{children:"Incrementing the opacity on scroll"}),(0,a.jsxs)("p",{children:["To gradually increment the opacity of each characters, we will use the ",(0,a.jsx)(d(),{href:"https://greensock.com/scrolltrigger/",target:"_blank",children:"ScrollTrigger"})," plugin from GSAP."]}),(0,a.jsxs)("p",{children:["We can easily animate each characters individually by providing the ",(0,a.jsx)("code",{className:"language-jsx",children:"refs"})," array and give a ",(0,a.jsx)("code",{className:"language-jsx",children:"stagger"})," value to the gsap functions:"]}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nimport { useRef, useEffect } from 'react';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport gsap from 'gsap';\n\n  let refs = useRef([]);\n  const container = useRef(null);\n\n  useEffect( () => {\n    gsap.registerPlugin(ScrollTrigger);\n    createAnimation();\n  }, [])\n\n  const createAnimation = () => {\n      gsap.to(refs.current, {\n        scrollTrigger: {\n            trigger: container.current,\n            scrub: true,\n            start: `top`,\n            end: `+=${window.innerHeight / 1.5}`,\n        },\n        opacity: 1,\n        ease: \"none\",\n        stagger: 0.1\n    })\n  }\n...\n",language:"jsx",highlights:[15,24]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["Note that if we'd like to adjust the gradient, the ",(0,a.jsx)("code",{className:"language-jsx",children:"stagger"})," value is the one to adjust."]})}),(0,a.jsx)("h3",{children:"We should have the final animation:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-gradient-opacity-on-scroll/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"I've seen this animation in about 50% of every single awwwards winning website of May 2023, so I thought it would be interesting to remake it! Hope you learned something :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function project_gallery_mouse_hover_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"This project gallery will be composed of 3 different components:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Page Component"}),": the parent, has the state and the data and imports the other two components."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Project Component"}),": a component that represents a single project."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Modal Component"}),": a component that represents the dynamic modal."]})]})]}),(0,a.jsx)("h2",{children:"The Page component"}),(0,a.jsxs)("p",{children:["The page component ",(0,a.jsx)("code",{className:"language-jsx",children:"/app/page.js"})," is the parent of the project gallery and is responsable for the data and the state."]}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.css"],codes:['\'use client\';\nimport styles from \'./page.module.css\'\nimport { useState } from \'react\';\nimport Project from \'../components/project\';\nimport Modal from \'../components/modal\';\n\nconst projects = [\n  {\n    title: "C2 Montreal",\n    src: "c2montreal.png",\n    color: "#000000"\n  },\n  {\n    title: "Office Studio",\n    src: "officestudio.png",\n    color: "#8C8C8C"\n  },\n  {\n    title: "Locomotive",\n    src: "locomotive.png",\n    color: "#EFE8D3"\n  },\n  {\n    title: "Silencio",\n    src: "silencio.png",\n    color: "#706D63"\n  }\n]\n\nexport default function Home() {\n\n  const [modal, setModal] = useState({active: false, index: 0})\n\n  return (\n  <main className={styles.main}>\n    <div className={styles.body}>\n      {\n        projects.map( (project, index) => {\n          return <Project index={index} title={project.title} setModal={setModal} key={index}/>\n        })\n      }\n    </div>\n    <Modal modal={modal} projects={projects}/>\n  </main>\n  )\n}\n',".main{\n    display: flex;\n    height: 100vh;\n    align-items: center;\n    justify-content: center;\n}\n\n.body{\n    width: 1000px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}"],languages:["jsx","css"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," With that code, we should still see a blank page, because the ",(0,a.jsx)("code",{className:"language-jsx",children:"Project"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"Modal"})," components are still empty."]})}),(0,a.jsx)("h2",{children:"The Project Component"}),(0,a.jsxs)("p",{children:["The project component represents a single project and has a hover interactivity on it. When hovering it, there's a small css animation and it also sets the ",(0,a.jsx)("code",{className:"language-jsx",children:"index"})," inside of the modal state."]}),(0,a.jsx)(g.Z,{titles:["project/index.jsx","project/style.module.css"],codes:["'use client';\nimport React from 'react'\nimport styles from './style.module.css';\n\nexport default function index({index, title, setModal}) {\n\n    return (\n        <div onMouseEnter={() => {setModal({active: true, index})}} onMouseLeave={() => {setModal({active: false, index})}} className={styles.project}>\n            <h2>{title}</h2>\n            <p>Design & Development</p>\n        </div>\n    )\n}",".project{\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n    padding: 50px 100px 50px 100px;\n    border-top: 1px solid rgb(201, 201, 201);\n    cursor: pointer;\n    transition: all 0.2s;\n}\n.project:last-of-type{\n    border-bottom: 1px solid rgb(201, 201, 201);\n}\n\n.project:hover{\n    opacity: 0.5;\n}\n\n.project:hover h2{\n    transform: translateX(-10px);\n}\n\n.project:hover p{\n    transform: translateX(10px);\n}\n\n.project h2{\n    font-size: 60px;\n    margin: 0px;\n    font-weight: 400;\n    transition: all 0.4s;\n}\n\n.project p{\n    transition: all 0.4s;\n    font-weight: 300;\n}"],languages:["jsx","css"],highlights:[[8],[15,16,17,19,20,21,23,24,25]]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8:"})," We set the state of the modal when hovering the project."]}),(0,a.jsx)("li",{children:"The project animations are done with pure CSS."})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/project-gallery-mouse-hover/video1.mov"}),(0,a.jsx)("h2",{children:"The Modal Component"}),(0,a.jsxs)("p",{children:["Now we enter the nitty gritty, the modal is defintely the hard part of this tutorial. To do it, we will use the ",(0,a.jsx)("code",{className:"language-jsx",children:"next/image"}),", the ",(0,a.jsx)("code",{className:"language-jsx",children:"GSAP"})," library and ",(0,a.jsx)("code",{className:"language-jsx",children:"Framer Motion"})]}),(0,a.jsx)("h3",{children:"Let's install the required libraries:"}),(0,a.jsx)("code",{className:"language-jsx",children:"npm i gsap framer-motion"}),(0,a.jsx)("p",{children:"Next let's start by doing the enter and exit animation of the modal. We basically use Framer Motion to scale it up and down. We'll also use CSS for the slide animation."}),(0,a.jsx)(g.Z,{titles:["modal/index.jsx","modal/style.module.css"],codes:['import { useRef } from \'react\';\nimport { motion } from \'framer-motion\';\nimport Image from \'next/image\';\nimport styles from \'./style.module.css\';\n\nconst scaleAnimation = {\n    initial: {scale: 0, x:"-50%", y:"-50%"},\n    enter: {scale: 1, x:"-50%", y:"-50%", transition: {duration: 0.4, ease: [0.76, 0, 0.24, 1]}},\n    closed: {scale: 0, x:"-50%", y:"-50%", transition: {duration: 0.4, ease: [0.32, 0, 0.67, 0]}}\n}\n\nexport default function index({modal, projects}) {\n\n  const { active, index } = modal;\n\n  return (\n    <>\n        <motion.div variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"} className={styles.modalContainer}>\n            <div style={{top: index * -100 + "%"}} className={styles.modalSlider}>\n            {\n                projects.map( (project, index) => {\n                const { src, color } = project\n                return <div className={styles.modal} style={{backgroundColor: color}} key={`modal_${index}`}>\n                    <Image \n                    src={`/images/${src}`}\n                    width={300}\n                    height={0}\n                    alt="image"\n                    />\n                </div>\n                })\n            }\n            </div>\n        </motion.div>\n        <motion.div className={styles.cursor} variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"}></motion.div>\n        <motion.div className={styles.cursorLabel} variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"}>View</motion.div>\n    </>\n  )\n}\n',".modalContainer{\n    height: 350px;\n    width: 400px;\n    position: absolute;\n    background-color: white;\n    overflow: hidden;\n    pointer-events: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modalSlider{\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    transition: top 0.5s cubic-bezier(0.76, 0, 0.24, 1);\n}\n\n.modal{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal img{\n    height: auto;\n}\n\n.cursor, .cursorLabel{\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background-color: #455CE9;\n    color: white;\n    position: absolute;\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 14px;\n    font-weight: 300;\n    pointer-events: none;\n}\n\n.cursorLabel{\n    background-color: transparent;\n}"],languages:["jsx","css"],highlights:[[6,19],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The scaling is made with Framer Motion through the ",(0,a.jsx)("code",{className:"language-jsx",children:"scaleAnimation"})," const. When a project is hovered, the state is changed which animates in and out the modal, the cursor and the cursor label."]}),(0,a.jsx)("li",{children:"The sliding animation is made through CSS, depending on the hovered project, the top position is adjusted accordingly."})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/project-gallery-mouse-hover/video2.mov"}),(0,a.jsx)("h3",{children:"Moving the modal along the mouse"}),(0,a.jsxs)("p",{children:["To move the modal with the mouse move event, we use the ",(0,a.jsx)("code",{className:"language-jsx",children:"GSAP"})," library to easily do that."]}),(0,a.jsx)(x.Z,{title:"/modal/index.jsx",code:'import { useRef, useEffect } from \'react\';\nimport gsap from \'gsap\';\n\n  ...\n  const modalContainer = useRef(null);\n  const cursor = useRef(null);\n  const cursorLabel = useRef(null);\n\n  useEffect( () => {\n    //Move Container\n    let xMoveContainer = gsap.quickTo(modalContainer.current, "left", {duration: 0.8, ease: "power3"})\n    let yMoveContainer = gsap.quickTo(modalContainer.current, "top", {duration: 0.8, ease: "power3"})\n    //Move cursor\n    let xMoveCursor = gsap.quickTo(cursor.current, "left", {duration: 0.5, ease: "power3"})\n    let yMoveCursor = gsap.quickTo(cursor.current, "top", {duration: 0.5, ease: "power3"})\n    //Move cursor label\n    let xMoveCursorLabel = gsap.quickTo(cursorLabel.current, "left", {duration: 0.45, ease: "power3"})\n    let yMoveCursorLabel = gsap.quickTo(cursorLabel.current, "top", {duration: 0.45, ease: "power3"})\n\n    window.addEventListener(\'mousemove\', (e) => {\n      const { pageX, pageY } = e;\n      xMoveContainer(pageX)\n      yMoveContainer(pageY)\n      xMoveCursor(pageX)\n      yMoveCursor(pageY)\n      xMoveCursorLabel(pageX)\n      yMoveCursorLabel(pageY)\n    })\n  }, [])\n\n  return (\n    <>\n        <motion.div ref={modalContainer} variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"} className={styles.modalContainer}>\n            <div style={{top: index * -100 + "%"}} className={styles.modalSlider}>\n            {\n               ...\n            }\n            </div>\n        </motion.div>\n        <motion.div ref={cursor} className={styles.cursor} variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"}></motion.div>\n        <motion.div ref={cursorLabel} className={styles.cursorLabel} variants={scaleAnimation} initial="initial" animate={active ? "enter" : "closed"}>View</motion.div>\n    </>\n  )\n}\n',language:"jsx",highlights:[33,40,41]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"3 refs are created in order to target the modal, the cursor and the cursor label"}),(0,a.jsxs)("li",{children:["the movement is created with the ",(0,a.jsx)("code",{className:"language-jsx",children:"quickTo"})," function from ",(0,a.jsx)("code",{className:"language-jsx",children:"GSAP"})," library."]}),(0,a.jsx)("li",{children:"Note that the durations vary in order to create a delay between the different moving elements."})]})]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/project-gallery-mouse-hover/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"Hope you liked this tutorial, I've seen similar project galleries in a lot of awwwards winning website and so I thought it'd be intersting to know how it's possible to make something similar. Hope you learned something :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}function smooth_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"This landing page will be composed of 4 components:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Page Component"}),": the parent, initializes the Locomotive Scroll and imports the other two components."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Intro Component"}),": the first section, features a background image with a clip-path animation and a body with an animated title and image."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Description Component"}),": the second section, features scroll animated paragraphs."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Projects Component"}),": the last section, features a pinned image and a state-based project gallery."]})]})]}),(0,a.jsxs)("p",{children:["The 3 components are created inside a ",(0,a.jsx)("code",{className:"language-jsx",children:"/src/components/"})," folder."]}),(0,a.jsx)("h2",{children:"The Page Component"}),(0,a.jsxs)("p",{children:["The page component is the parent of the other 3 components. It also manages the smooth scroll which is very simply done with ",(0,a.jsx)(d(),{href:"https://scroll.locomotive.ca/docs/#/",target:"_blank",children:"Locomotive Scroll v5"})]}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client';\nimport { useEffect } from 'react';\nimport styles from './page.module.css'\nimport Intro from '../components/Intro';\nimport Description from '../components/Description';\nimport Projects from '../components/Projects';\n\nexport default function Home() {\n\n  useEffect( () => {\n    (\n      async () => {\n          const LocomotiveScroll = (await import('locomotive-scroll')).default\n          const locomotiveScroll = new LocomotiveScroll();\n      }\n    )()\n  }, [])\n\n  return (\n      <main className={styles.main}>\n        <Intro />\n        <Description />\n        <Projects />\n      </main>\n  )\n}\n",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," The Locomotive Scroll is purely a client-side library, so we need to import it in an async way after the component mounts. If we don't do this, we will receive an error mentionning the window does not exist."]}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:(0,a.jsx)("p",{children:"With that, we now have a native smooth scroll, amazing!"})})})]}),(0,a.jsx)("h2",{children:"The Intro Component"}),(0,a.jsx)("p",{children:"The Intro is composed of 3 main elements:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"The background image:"})," animated with Scroll Trigger, using the clip-path property"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"The main image:"})," animated with Scroll Trigger, using the height property and Locomotive Scroll with data-scroll-speed"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"The title:"})," animated with Locomotive Scroll with data-scroll-speed"]})]}),(0,a.jsx)(g.Z,{titles:["Intro/index.jsx","Intro/style.module.css"],codes:["'use client';\nimport React, { useLayoutEffect, useRef } from 'react'\nimport styles from './style.module.css';\nimport Image from 'next/image';\nimport gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\nexport default function Index() {\n\n    const background = useRef(null);\n    const introImage = useRef(null);\n    const homeHeader = useRef(null);\n\n    useLayoutEffect( () => {\n        gsap.registerPlugin(ScrollTrigger);\n\n        const timeline = gsap.timeline({\n            scrollTrigger: {\n                trigger: document.documentElement,\n                scrub: true,\n                start: \"top\",\n                end: \"+=500px\",\n            },\n        })\n\n        timeline\n            .from(background.current, {clipPath: `inset(15%)`})\n            .to(introImage.current, {height: \"200px\"}, 0)\n    }, [])\n\n    return (\n        <div ref={homeHeader} className={styles.homeHeader}>\n            <div className={styles.backgroundImage} ref={background}>\n                <Image \n                    src={'/images/background.jpeg'}\n                    fill={true}\n                    alt=\"background image\"\n                    priority={true}\n                />\n            </div>\n            <div className={styles.intro}>\n                    <div ref={introImage} data-scroll data-scroll-speed=\"0.3\" className={styles.introImage}>\n                        <Image\n                            src={'/images/intro.png'}\n                            alt=\"intro image\"\n                            fill={true} \n                            priority={true}\n                        />\n                    </div>\n                    <h1 data-scroll data-scroll-speed=\"0.7\">SMOOTH SCROLL</h1>\n             </div>\n        </div>\n    )\n}","\n.homeHeader{\n    position: relative;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.backgroundImage{\n    width: 100%;\n    height: 140vh;\n    position: absolute;\n    filter: brightness(60%);\n}\n\n.backgroundImage img{\n    object-fit: cover;\n}\n\n.intro{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    margin-top: 35vh;\n}\n\n.intro h1{\n    color: white;\n    font-size: 7vw;\n    z-index: 3;\n    text-align: center;\n    white-space: nowrap;\n}\n\n.introImage{\n    filter: brightness(70%);\n    width: 350px;\n    height: 475px;\n    position: absolute;\n}\n\n.introImage img{\n    object-fit: cover;\n    object-position: top;\n}"],languages:["jsx","css"],highlights:[[26,27,28,42,50],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"A ScrollTrigger timeline is created from the top of the document to +=500px."}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 27:"})," The background is animated ",(0,a.jsx)("b",{children:"from"})," ",(0,a.jsx)("code",{className:"language-jsx",children:"clipPath: inset(15%)"})," for the duration of the timeline."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 28:"})," The main image height is reduced ",(0,a.jsx)("b",{children:"to"})," ",(0,a.jsx)("code",{className:"language-jsx",children:"200px"})," for the duration of the timeline."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 42 and 50:"})," A parallax on the main image and the title is created using the data-scroll-speed from Locomotive Scroll."]})]})]}),(0,a.jsx)("h3",{children:"Here's the result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/smooth-scroll/video1.mov"}),(0,a.jsx)("h2",{children:"The Description Component"}),(0,a.jsx)("p",{children:"The Description component features an internal component called AnimatedText. An array of phrases is iterated to return that component."}),(0,a.jsx)("p",{children:"Inside of it, a new ScrollTrigger is created from the top of each paragraphs and ends at +=400px. The left value and the opacity are adjusted during the duration of the scroll."}),(0,a.jsx)(g.Z,{titles:["Description/index.jsx","Description/style.module.css"],codes:['import React, { useLayoutEffect, useRef } from \'react\'\nimport { ScrollTrigger } from \'gsap/ScrollTrigger\';\nimport gsap from \'gsap\';\nimport styles from \'./style.module.css\';\n\nconst phrases = ["Los Flamencos National Reserve", "is a nature reserve located", "in the commune of San Pedro de Atacama", "The reserve covers a total area", "of 740 square kilometres (290 sq mi)"]\n\nexport default function Index() {\n\n  return (\n    <div className={styles.description} >\n        {\n            phrases.map( (phrase, index) => {\n                return <AnimatedText key={index}>{phrase}</AnimatedText>\n            })\n        }\n    </div>\n  )\n}\n\nfunction AnimatedText({children}) {\n    const text = useRef(null);\n\n    useLayoutEffect( () => {\n        gsap.registerPlugin(ScrollTrigger);\n        gsap.from(text.current, {\n            scrollTrigger: {\n                trigger: text.current,\n                scrub: true,\n                start: "0px bottom",\n                end: "bottom+=400px bottom",\n            },\n            opacity: 0,\n            left: "-200px",\n            ease: "power3.Out"\n        })\n    }, [])\n\n    return <p ref={text}>{children}</p>\n}',"\n.description{\n    position: relative;\n    color: white;\n    font-size: 3vw;\n    text-transform: uppercase;\n    margin-top: 30vw;\n    margin-left: 10vw;\n}\n.description p{\n    margin: 0px;\n    position: relative;\n}"],languages:["jsx","css"],highlights:[[14,33,34],[]]}),(0,a.jsx)("h3",{children:"Here's the result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/smooth-scroll/video2.mov"}),(0,a.jsx)("h2",{children:"The Projects Component"}),(0,a.jsx)("p",{children:"The Projects component is simple HTML and CSS. The only thing we animate is a pin on the image."}),(0,a.jsx)("p",{children:"There's also an internal state to track which project is current highlighted, which will dynamically change the src of the image."}),(0,a.jsx)(g.Z,{titles:["Projects/index.jsx","Projects/style.module.css"],codes:['import React, { useState, useLayoutEffect, useRef } from \'react\'\nimport styles from \'./style.module.css\';\nimport Image from \'next/image\';\nimport gsap from \'gsap\';\nimport { ScrollTrigger } from \'gsap/ScrollTrigger\';\n\nconst projects = [\n    {\n        title: "Salar de Atacama",\n        src: "salar_de_atacama.jpg"\n    },\n    {\n        title: "Valle de la luna",\n        src: "valle_de_la_muerte.jpeg"\n    },\n    {\n        title: "Miscanti Lake",\n        src: "miscani_lake.jpeg"\n    },\n    {\n        title: "Miniques Lagoons",\n        src: "miniques_lagoon.jpg"\n    },\n]\n\nexport default function Index() {\n\n    const [selectedProject, setSelectedProject] = useState(0);\n    const container = useRef(null);\n    const imageContainer = useRef(null);\n\n    useLayoutEffect( () => {\n        gsap.registerPlugin(ScrollTrigger);\n        ScrollTrigger.create({\n            trigger: imageContainer.current,\n            pin: true,\n            start: "top-=100px",\n            end: document.body.offsetHeight - window.innerHeight - 50,\n        })\n    }, [])\n\n    return (\n        <div ref={container} className={styles.projects}>\n            <div className={styles.projectDescription}>\n                <div ref={imageContainer} className={styles.imageContainer}>\n                    <Image \n                        src={`/images/${projects[selectedProject].src}`}\n                        fill={true}\n                        alt="project image"\n                        priority={true}\n                    />\n                </div>\n                <div className={styles.column}>\n                    <p>The flora is characterized by the presence of high elevation wetland, as well as yellow straw, broom sedge, tola de agua and tola amaia.</p>\n                </div>\n                <div className={styles.column}>\n                    <p>Some, like the southern viscacha, vicu\xf1a and Darwins rhea, are classified as endangered species. Others, such as Andean goose, horned coot, Andean gull, puna tinamou and the three flamingo species inhabiting in Chile (Andean flamingo, Chilean flamingo, and Jamess flamingo) are considered vulnerable.</p>\n                </div>\n            </div>\n\n            <div className={styles.projectList}>\n                {\n                    projects.map( (project, index) => {\n                        return <div key={index} onMouseOver={() => {setSelectedProject(index)}} className={styles.projectEl}>\n                            <h2>{project.title}</h2>\n                        </div>\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n',"\n.projects{\n    position: relative;\n    color: white;\n    margin-top: 25vh;\n    padding: 10%;\n}\n\n.projectDescription{\n    display: flex;\n    height: 700px;\n    justify-content: space-between;\n    gap: 5%;\n}\n\n.imageContainer{\n    position: relative;\n    height: 100%;\n    width: 40%;\n}\n\n.imageContainer img{\n    object-fit: cover;\n}\n\n.column{\n    display: flex;\n    height: 100%;\n    width: 20%;\n    font-size: 1.6vw;\n}\n\n.column:last-of-type{\n    align-items: flex-end;\n    font-size: 1vw;\n}\n\n.projectList{\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    margin-top: 200px;\n}\n\n.projectEl{\n    width: 100%;\n    color: white;\n    text-transform: uppercase;\n    font-size: 3vw;\n    border-bottom: 1px solid white;\n    display: flex;\n    justify-content: flex-end;\n}\n.projectEl h2{\n    margin: 0px;\n    margin-top: 40px;\n    margin-bottom: 20px;\n    cursor: default;\n}"],languages:["jsx","css"],highlights:[[28,36,63,64,65,66],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The main image is pinned using a ScrollTrigger, that starts at -=100px of the top of the image and ends at 50px before the end of the scroll."}),(0,a.jsx)("li",{children:"The state is managed with the mouse events when hovering a project, which dynamically changes the image."})]})]}),(0,a.jsx)("h3",{children:"Here's the result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/smooth-scroll/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this one-pager!"}),(0,a.jsx)("p",{children:"Hope you liked this tutorial, I've seen similar one-pager on a lot of awwwards winning website and so I thought it'd be interesting to know how it's possible to make something similar. Hope you learned something :)"}),(0,a.jsx)("p",{children:"-Oli"})]})}let f="export const opacity = {\n    initial: {\n        opacity: 0\n    },\n    open: {\n        opacity: 1,\n        transition: {duration: 0.35}\n    },\n    closed: {\n        opacity: 0,\n        transition: {duration: 0.35}\n    }\n}";function navigation_menu_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Since we are working on a header that will be shared among multiple routes, we should import it inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"layout.js"})," root component."]}),(0,a.jsxs)("li",{children:["Let's also import the ",(0,a.jsx)(d(),{target:"_blank",href:"https://fonts.google.com/specimen/Manrope",children:"Manrope"})," font."]})]})}),(0,a.jsxs)("p",{children:["The Header component is create inside a ",(0,a.jsx)("code",{className:"language-jsx",children:"src/components/"})," folder."]}),(0,a.jsx)(g.Z,{titles:["layout.js","globals.css"],codes:["import './globals.css'\nimport { Inter } from 'next/font/google'\nimport Header from '../components/header';\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  )\n}","@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@300;400;500;700&display=swap');\n\nbody{\n    margin: 0px;\n    font-family: 'Manrope', sans-serif;\n}"],languages:["jsx","css"],highlights:[[3,16],[]]}),(0,a.jsx)("h2",{children:"The Header Component"}),(0,a.jsx)("p",{children:"The Header Component acts as the parent of all the other components. It will also contain the state, which will track if the nav is active or not."}),(0,a.jsxs)("p",{children:["For the animation, Framer Motion is used, to install it we can run: ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"})]}),(0,a.jsx)(g.Z,{titles:["Header/index.js","Header/style.module.css","Header/anim.js"],codes:['\'use client\';\nimport styles from \'./style.module.css\';\nimport Link from \'next/link\';\nimport { useState } from \'react\';\nimport { motion } from \'framer-motion\';\nimport { opacity } from \'./anim\';\n\nexport default function index() {\n\n    const [isActive, setIsActive] = useState(false);\n\n    return (\n        <div className={styles.header}>\n            <div className={styles.bar}>\n                <Link href="/">Olivier</Link>\n                <div onClick={() => {setIsActive(!isActive)}} className={styles.el}>\n                    <div className={`${styles.burger} ${isActive ? styles.burgerActive : ""}`}></div>\n                    <div className={styles.label}>\n                        <motion.p variants={opacity} animate={!isActive ? "open" : "closed"}>Menu</motion.p>\n                        <motion.p variants={opacity} animate={isActive ? "open" : "closed"}>Close</motion.p>\n                    </div>\n                </div>\n                <motion.div variants={opacity} animate={!isActive ? "open" : "closed"} className={styles.shopContainer}>\n                    <p className={styles.shop}>Shop</p>\n                    <div className={styles.el}>\n                        <svg width="19" height="20" viewBox="0 0 19 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.66602 1.66667H2.75449C2.9595 1.66667 3.06201 1.66667 3.1445 1.70437C3.2172 1.73759 3.2788 1.79102 3.32197 1.85829C3.37096 1.93462 3.38546 2.0361 3.41445 2.23905L3.80887 5M3.80887 5L4.68545 11.4428C4.79669 12.2604 4.85231 12.6692 5.04777 12.977C5.22 13.2481 5.46692 13.4637 5.75881 13.5978C6.09007 13.75 6.50264 13.75 7.32777 13.75H14.4593C15.2448 13.75 15.6375 13.75 15.9585 13.6087C16.2415 13.4841 16.4842 13.2832 16.6596 13.0285C16.8585 12.7397 16.9319 12.3539 17.0789 11.5823L18.1819 5.79141C18.2337 5.51984 18.2595 5.38405 18.222 5.27792C18.1892 5.18481 18.1243 5.1064 18.039 5.05668C17.9417 5 17.8035 5 17.527 5H3.80887ZM8.33268 17.5C8.33268 17.9602 7.95959 18.3333 7.49935 18.3333C7.03911 18.3333 6.66602 17.9602 6.66602 17.5C6.66602 17.0398 7.03911 16.6667 7.49935 16.6667C7.95959 16.6667 8.33268 17.0398 8.33268 17.5ZM14.9993 17.5C14.9993 17.9602 14.6263 18.3333 14.166 18.3333C13.7058 18.3333 13.3327 17.9602 13.3327 17.5C13.3327 17.0398 13.7058 16.6667 14.166 16.6667C14.6263 16.6667 14.9993 17.0398 14.9993 17.5Z" stroke="#4D3D30" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"></path></svg>\n                        <p>Cart(0)</p>\n                    </div>\n                </motion.div>\n            </div>\n        </div>\n    )\n}','.header{\n    background-color: #f4f0ea;\n    position: fixed;\n    width: 100%;\n    box-sizing: border-box;\n    padding: 10px;\n}\n\n.bar{\n    display: flex;\n    justify-content: center;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 400;\n    position: relative;\n}\n\n.bar p{\n    margin: 0px;\n}\n\n.bar a{\n    text-decoration: none;\n    color: black;\n    position: absolute;\n    left: 0;\n}\n\n.shopContainer{\n    display: flex;\n    gap: 30px;\n    position: absolute;\n    right: 0;\n}\n\n.el{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    cursor: pointer;\n}\n\n.label{\n    position: relative;\n    display: flex;\n    align-items: center;\n    height: 100%;\n}\n\n.label p:nth-of-type(2){\n    position: absolute;\n}\n\n.label p:nth-of-type(2){\n    opacity: 0;\n}\n\n.shop{\n    display: none;\n}\n\n.burger{\n    width: 22.5px;\n    position: relative;\n    pointer-events: none;\n}\n\n.burger::after, .burger::before{\n    content: "";\n    height: 1px;\n    width: 100%;\n    background-color: black;\n    position: relative;\n    display: block;\n    transition: all 1s cubic-bezier(0.76, 0, 0.24, 1);\n}\n\n.burger::after{\n    top: -4px;\n}\n.burger::before{\n    top: 4px;\n}\n\n.burgerActive::after{\n    transform: rotate(45deg);\n    top: -1px;\n}\n\n.burgerActive::before{\n    transform: rotate(-45deg);\n    top: 1px;\n}\n\n@media only screen and (min-width: 600px) {\n    .header{\n        padding: 20px;\n    }\n    .bar{\n        font-size: 15px;\n    }\n   \n    .shop{\n        display: block;\n        cursor: pointer;\n    }\n}',f],languages:["jsx","css","js"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Framer Motion is used for the animations which are based on the state."}),(0,a.jsx)("li",{children:"Overall nothing too complicated, lots of css to have a nice layout that fits all sizes of window."})]})]}),(0,a.jsx)("h3",{children:"Here's the result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/navigation-menu/video1.mov"}),(0,a.jsx)("h2",{children:"The Nav Component"}),(0,a.jsxs)("p",{children:["We import the Nav inside of the Header using ",(0,a.jsx)("code",{className:"language-jsx",children:"AnimatePresence"})," from Framer Motion."]}),(0,a.jsx)(x.Z,{title:"Header/index.jsx",code:"...\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Nav from './nav';\n\nexport default function index() {\n    ...\n    const [isActive, setIsActive] = useState(false);\n\n    return (\n        <div className={styles.header}>\n            ...               \n            <AnimatePresence mode=\"wait\">\n                {isActive && <Nav/>}\n            </AnimatePresence>\n        </div>\n    )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:'mode="wait"'})," is extremely important here, it forces the Nav and all its children to trigger their exit animation before unmounting. "]}),(0,a.jsx)("li",{children:"With that, we can add an enter and exit animation on all the components and they will be automatically triggered by the mounting and unmounting of the Nav."})]})}),(0,a.jsx)("p",{children:"The Nav component is the parent of 3 other components:"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:["The 3 components are created in the ",(0,a.jsx)("code",{className:"language-jsx",children:"src/header/nav"})," folder:"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Body Component:"})," Features the main links that will do the routing."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Footer Component:"}),"The footer of the nav."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Image Component:"}),"The dynamic image, will change when hovering on the links inside the Body component."]})]})]}),(0,a.jsx)(g.Z,{titles:["Nav/index.js","Nav/style.module.css","Header/anim.js"],codes:['\'use client\';\nimport styles from \'./style.module.css\';\nimport { useState } from \'react\';\nimport { motion } from \'framer-motion\';\nimport { height } from \'../anim\';\nimport Body from \'./Body\';\nimport Footer from \'./Footer\';\nimport Image from \'./Image\';\n\nconst links = [\n  {\n    title: "Home",\n    href: "/",\n    src: "home.png"\n  },\n  {\n    title: "Shop",\n    href: "/shop",\n    src: "shop.png"\n  },\n  {\n    title: "About Us",\n    href: "/about",\n    src: "home.png"\n  },\n  {\n    title: "Lookbook",\n    href: "/lookbook",\n    src: "lookbook.png"\n  },\n  {\n    title: "Contact",\n    href: "/contact",\n    src: "contact.png"\n  }\n]\n\nexport default function Index() {\n\n  const [selectedLink, setSelectedLink] = useState({isActive: false, index: 0});\n\n  return (\n    <motion.div variants={height} initial="initial" animate="enter" exit="exit" className={styles.nav}>\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <Body links={links} selectedLink={selectedLink} setSelectedLink={setSelectedLink}/>\n          <Footer />\n        </div>\n        <Image src={links[selectedLink.index].src} selectedLink={selectedLink}/>\n      </div>\n    </motion.div>\n  )\n}',".nav{\n   overflow: hidden;\n}\n\n.wrapper{\n    display: flex;\n    gap: 50px;\n    margin-bottom: 80px;\n}\n\n.container{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n@media only screen and (min-width: 1000px) {\n   \n    .wrapper{\n        margin-bottom: 0px;\n        justify-content: space-between;\n    }\n}",'...\nconst transition = {duration: 1, ease: [0.76, 0, 0.24, 1]}\n\nexport const height = {\n    initial: {\n      height: 0\n    },\n    enter: {\n      height: "auto",\n      transition\n    },\n    exit: {\n      height: 0,\n      transition\n    }\n}'],languages:["jsx","css","js"],highlights:[[46,47,49],[],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 46:"})," The Body is imported and has as parameters the links array, the state and the ability to set the state."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 47:"})," The Footer is imported and does not need any parameters."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 49:"})," The Image is imported and given the src of the selected link as well as if it should be active."]})]})]}),(0,a.jsx)("p",{children:"Now can we work on the Body component and see how all of that fits together."}),(0,a.jsx)("h2",{children:"The Body Component"}),(0,a.jsx)(g.Z,{titles:["Body/index.js","Body/style.module.css","Header/anim.js"],codes:['import { motion } from \'framer-motion\';\nimport Link from \'next/link\';\nimport styles from \'./style.module.css\';\nimport { blur, translate } from \'../../anim\';\n\nexport default function Body({links, selectedLink, setSelectedLink}) {\n\n    const getChars = (word) => {\n        let chars = [];\n        word.split("").forEach( (char, i) => {\n          chars.push(\n            <motion.span \n                custom={[i * 0.02, (word.length - i) * 0.01]} \n                variants={translate} initial="initial" \n                animate="enter" \n                exit="exit" \n                key={char + i}>\n                {char}\n            </motion.span>\n            )\n        })\n        return chars;\n    }\n    \n    return (\n        <div className={styles.body}>\n        {\n            links.map( (link, index) => {\n                const { title, href } = link;\n                return <Link key={`l_${index}`} href={href}>\n                <motion.p \n                    onMouseOver={() => {setSelectedLink({isActive: true, index})}} \n                    onMouseLeave={() => {setSelectedLink({isActive: false, index})}} \n                    variants={blur} \n                    animate={selectedLink.isActive && selectedLink.index != index ? "open" : "closed"}>\n                    {getChars(title)}\n                </motion.p>\n                </Link>\n            })\n        }\n        </div>\n    )\n}',".body{\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: 40px;\n}\n\n.body a{\n    color: black;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n\n.body p{\n    margin: 0px;\n    display: flex;\n    overflow: hidden;\n    font-size: 32px;\n    padding-right: 30px;\n    padding-top: 10px;\n    font-weight: 300;\n}\n\n@media only screen and (min-width: 1000px) {\n   \n    .body{\n        max-width: 1200px;\n        margin-top: 80px;\n    }\n    .body p{\n        font-size: 5vw;\n        padding-right: 2vw;\n    }\n}",'export const blur = {\n    initial: {\n        filter: "blur(0px)",\n        opacity: 1\n    },\n    open: {\n        filter: "blur(4px)",\n        opacity: 0.6,\n        transition: {duration: 0.3}\n    },\n    closed: {\n        filter: "blur(0px)",\n        opacity: 1,\n        transition: {duration: 0.3}\n\n    }\n}\n\nexport const translate = {\n    initial: {\n        y: "100%",\n        opacity: 0\n    },\n    enter: (i) => ({\n        y: 0,\n        opacity: 1,\n        transition: {duration: 1, ease: [0.76, 0, 0.24, 1], delay: i[0]}\n    }),\n    exit: (i) => ({\n        y: "100%",\n        opacity: 0,\n        transition: {duration: 0.7, ease: [0.76, 0, 0.24, 1], delay: i[1]}\n    })\n}'],languages:["jsx","css","js"],highlights:[[8,32,33],[],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8:"})," The title of the links are split into characters and for each of them, a Framer animation is created with a certain delay that comes from the ",(0,a.jsx)("code",{className:"language-jsx",children:"custom"})," value."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 13:"})," The animation on the single characters is created through a Framer motion animation. We pass a custom array containing a delay for the enter animation and a delay for the exit animation."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 32-33:"})," The blur is created with a Framer animation and a state which is modified with mouse events."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/navigation-menu/video2.mov"}),(0,a.jsx)("h2",{children:"The Image Component"}),(0,a.jsx)("p",{children:"The image component is intrinsically linked to the Body Component. Since the Body mutates the state, the Image component will then consume it to know which image to show:"}),(0,a.jsx)(g.Z,{titles:["Image/index.js","Image/style.module.css","Header/anim.js"],codes:["import React from 'react'\nimport { motion } from 'framer-motion';\nimport Image from 'next/image';\nimport styles from './style.module.css';\nimport { opacity } from '../../anim';\n\nexport default function Index({src, selectedLink}) {\n  return (\n    <motion.div variants={opacity} initial=\"initial\" animate={selectedLink.isActive ? \"open\" : \"closed\"} className={styles.imageContainer}>\n        <Image \n        src={`/images/${src}`}\n        fill={true}\n        alt=\"image\"\n        />\n    </motion.div>\n  )\n}",".imageContainer{\n    display: none;\n}\n\n@media only screen and (min-width: 1000px) {\n   \n    .imageContainer{\n        display: block;\n        width: 500px;\n        height: 350px;\n        position: relative;\n    }\n    .imageContainer img{\n        object-fit: cover;\n    }\n}",f],languages:["jsx","css","js"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/navigation-menu/video3.mov"}),(0,a.jsx)("h2",{children:"The Footer component"}),(0,a.jsx)("p",{children:"The footer is pretty straight forward, just a bit of HTML, CSS and the same translate animation as the Body component but we a fixed delay."}),(0,a.jsx)(g.Z,{titles:["Footer/index.js","Footer/style.module.css","Header/anim.js"],codes:['import styles from \'./style.module.css\';\nimport { translate } from \'../../anim\';\nimport { motion } from \'framer-motion\';\n\nexport default function Footer() {\n    return (\n        <div className={styles.footer}>\n            <ul>\n                <motion.li \n                    custom={[0.3, 0]} \n                    variants={translate} initial="initial" \n                    animate="enter" \n                    exit="exit">\n                    <span>Made by:</span>Studio Lumio\n                </motion.li>\n            </ul>\n            <ul>\n                <motion.li  \n                    custom={[0.3, 0]} \n                    variants={translate} initial="initial" \n                    animate="enter" \n                    exit="exit">\n                    <span>Typography:</span> Google Fonts\n                </motion.li>\n            </ul>\n            <ul>\n                <motion.li\n                    custom={[0.3, 0]} \n                    variants={translate} initial="initial" \n                    animate="enter" \n                    exit="exit">\n                    <span>Images:</span> Freepik, Envato\n                </motion.li>\n            </ul>\n            <ul>\n                <motion.li\n                    custom={[0.3, 0]} \n                    variants={translate} initial="initial" \n                    animate="enter" \n                    exit="exit">\n                    Privacy Policy\n                </motion.li>\n                <motion.li \n                    custom={[0.3, 0]} \n                    variants={translate} initial="initial" \n                    animate="enter" \n                    exit="exit">\n                    Terms & Conditions\n                </motion.li>\n            </ul>\n        </div>\n    )\n}',".footer{\n    display: flex;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    font-size: 12px;\n    text-transform: uppercase;\n    margin-top: 40px;\n}\n\n.footer ul{\n    width: 50%;\n    margin-top: 10px;\n    overflow: hidden;\n    list-style-type: none;\n    padding: 0;\n}\n.footer li span{\n    color: #9f9689;\n}\n\n@media only screen and (min-width: 1000px) {\n    .footer{\n        justify-content: space-between;\n    }\n    .footer ul{\n        width: auto\n    }\n}",'export const translate = {\n    initial: {\n        y: "100%",\n        opacity: 0\n    },\n    enter: (i) => ({\n        y: 0,\n        opacity: 1,\n        transition: {duration: 1, ease: [0.76, 0, 0.24, 1], delay: i[0]}\n    }),\n    exit: (i) => ({\n        y: "100%",\n        opacity: 0,\n        transition: {duration: 0.7, ease: [0.76, 0, 0.24, 1], delay: i[1]}\n    })\n}'],languages:["jsx","css","js"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/navigation-menu/video4.mov"}),(0,a.jsx)("h2",{children:"Background animation"}),(0,a.jsx)("p",{children:"The last touch we can to wrap everything up and make the menu look even better is to add a sliding background inside of the Header component."}),(0,a.jsx)(g.Z,{titles:["Header/index.js","Header/style.module.css","Header/anim.js"],codes:["'use client';\nimport styles from './style.module.css';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { opacity, background } from './anim';\n...\n\nexport default function index() {\n\n    const [isActive, setIsActive] = useState(false);\n\n    return (\n        <div className={styles.header}>\n            ...\n            <motion.div variants={background} initial=\"initial\" animate={isActive ? \"open\" : \"closed\"} className={styles.background}></motion.div>\n            ...\n        </div>\n    )\n}","...\n.background{\n    background-color: black;\n    opacity: 0.5;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    left: 0;\n    top: 100%;\n}",'\nexport const background = {\n    initial: {\n        height: 0\n    },\n    open: {\n        height: "100vh",\n        transition\n    },\n    closed: {\n        height: 0,\n        transition\n    }\n}\n'],languages:["jsx","css","js"]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/navigation-menu/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this Navbar!"}),(0,a.jsx)("p",{children:"Hope you liked this tutorial, it's quite heavy since there is a lot of HTML and CSS. But if you learned one thing from all of that then my purpose is completed."}),(0,a.jsx)("p",{children:"-Oli"})]})}function mouse_scale_image_gallery_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]})})}),(0,a.jsx)("h3",{children:"Setting up the Data"}),(0,a.jsxs)("p",{children:["All the info about the projects will be stored inside an array. We can create a new ",(0,a.jsx)("code",{className:"language-jsx",children:"src/data.js"})," and put the array inside:"]}),(0,a.jsx)(x.Z,{title:"src/data.js",code:'export const projects = [\n    {\n        name: "MAVEN 11",\n        client: "analogueagency",\n        description: "New web design for the blockchain investment fund Maven 11.",\n        src: "maven.jpg",\n        year: 2022,\n    },\n    {\n        name: "Wix Playground Homepage",\n        client: "Wix Playground",\n        description: "Wix Playground is powered by the Wix.com design team.",\n        src: "wix.jpg",\n        year: 2022,\n    },\n    {\n        name: "POWELL—STUDIO",\n        client: "POWELL—STUDIO",\n        description: "The online presence for Powell—Studio.",\n        src: "powell.jpg",\n        year: 2023,\n    },\n    ...\n]',language:"js"}),(0,a.jsx)("h2",{children:"Page Component"}),(0,a.jsxs)("p",{children:["We can then work on the page component. It has the main title and will import the ",(0,a.jsx)("code",{className:"language-jsx",children:"double"})," component:"]}),(0,a.jsx)(g.Z,{titles:["page.js","style.module.scss","global.css"],codes:["import styles from './page.module.scss'\nimport { projects } from '../data';\nimport Double from '../components/double';\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n      <h1>We use design and technology to create brands and products that perform, delight, and scale.</h1>\n      <div className={styles.gallery}>\n        {/* <Double projects={[projects[0], projects[1]]}/>\n        <Double projects={[projects[2], projects[3]]} reversed={true}/>\n        <Double projects={[projects[4], projects[5]]}/>\n        <Double projects={[projects[6], projects[7]]} reversed={true}/> */}\n      </div>\n    </main>\n  )\n}",".main{\n    margin-top: 5vh;\n    color: white;\n    padding-bottom: 10vh;\n  \n    h1{\n      padding: 20px;\n      font-size: 5vw; \n      max-width: 80%;\n      font-weight: 400;\n    }\n}","body{\n    margin: 0px;\n    background-color: black;\n}"],languages:["jsx","css","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/mouse-scale-image-gallery/screenshot1.png",fill:!0,priority:!1,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Double Component"}),(0,a.jsx)("p",{children:"The next step is to work on the Double component. It takes 2 projects as props and a boolean to know if the animation should be reversed on not."}),(0,a.jsx)(g.Z,{titles:["components/Double/index.jsx","Double/styles.module.scss"],codes:["'use client';\nimport styles from './style.module.scss';\nimport Image from 'next/image';\nimport { useRef } from 'react'; \n\nexport default function Index({projects, reversed}) {\n\n    const firstImage = useRef(null);\n    const secondImage = useRef(null);\n\n    return(\n      <div className={styles.double}>\n  \n        <div ref={firstImage} className={styles.imageContainer}>\n          <div className={styles.stretchyWrapper}>\n            <Image \n              src={`/images/${projects[0].src}`}\n              fill={true}\n              alt={\"image\"}\n            />\n          </div>\n          <div className={styles.body}>\n              <h3>{projects[0].name}</h3>\n              <p>{projects[0].description}</p>\n              <p>{projects[0].year}</p>\n          </div>\n        </div>\n  \n        <div ref={secondImage} className={styles.imageContainer}>\n          <div className={styles.stretchyWrapper}>\n            <Image \n              src={`/images/${projects[1].src}`}\n              fill={true}\n              alt={\"image\"}\n            />\n          </div>\n          <div className={styles.body}>\n              <h3>{projects[1].name}</h3>\n              <p>{projects[1].description}</p>\n              <p>{projects[1].year}</p>\n          </div>\n        </div>\n  \n      </div>\n    )\n}",".double{\n    display: flex;\n    margin-top: 10vh;\n    height: 45vw;\n\n    .imageContainer{\n      &:nth-of-type(1){\n        width: 66.66%;\n      }\n      &:nth-of-type(2){\n        width: 33.33%;\n      }\n      \n      .stretchyWrapper{\n        padding-bottom: 66%;\n        position: relative;\n\n        img{\n          object-fit: cover;\n        }\n      }\n    }\n\n    &:nth-child(even){\n      .imageContainer{\n        &:nth-of-type(1){\n          width: 33.33%;\n        }\n        &:nth-of-type(2){\n          width: 66.66%;\n        }\n      }\n    }\n\n    .body{\n      font-size: 16px;\n      padding: 10px;\n      h3{ \n        font-size: 1.2em;\n        margin-bottom: 5px;\n        margin-top: 0px;\n        font-weight: 400;\n      }\n\n      p{\n        font-size: 1em;\n        margin: 0px;\n        color: rgb(187, 187, 187);\n        &:nth-of-type(2){\n          color: rgb(101, 101, 101);\n        }\n      }\n    }\n}"],languages:["jsx","css"],highlights:[[],[15]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Little explanation about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We have two main image containers with a ",(0,a.jsx)("code",{className:"language-jsx",children:"stretchyWrapper"})," inside of them."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 15 of CSS:"})," We use a padding with a percentage value of 66.66% in order to have an aspect ratio of 3:2. Read more ",(0,a.jsx)(d(),{target:"_blank",href:"https://stackoverflow.com/questions/1495407/maintain-the-aspect-ratio-of-a-div-with-css",children:"Here"})]}),(0,a.jsx)("li",{children:"That way, we can later on animate the width of the image container and the image inside of it will keep its aspect ratio."})]})]}),(0,a.jsx)("h3",{children:"We should have something like this for now"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-scale-image-gallery/video1.mov"}),(0,a.jsx)("h2",{children:"Animating on Mouse Move"}),(0,a.jsx)("p",{children:"To animate the images, we can get the xPercent of the mouse from the mouse move event."}),(0,a.jsx)(x.Z,{title:"Double/index.jsx",code:"...\nexport default function Index({projects, reversed}) {\n\n    const firstImage = useRef(null);\n    const secondImage = useRef(null);\n    let xPercent = reversed ? 100 : 0;\n    \n    const manageMouseMove = (e) => {\n        const { clientX } = e;\n        xPercent = (clientX / window.innerWidth) * 100;\n        \n        const firstImagePercent = 66.66 - (xPercent * 0.33);\n        const secondImagePercent = 33.33 + (xPercent * 0.33);\n        firstImage.current.style.width = `${firstImagePercent}%`\n        secondImage.current.style.width = `${secondImagePercent}%`\n    }\n\n    return(\n      <div onMouseMove={(e) => {manageMouseMove(e)}} className={styles.double}>\n      ...\n",language:"js",highlights:[12,13]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"xPercent:"})," A value between 0 and 100 depending on the position of the cursor."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"First image:"})," Animated from 66.66% to 33.33%, depending on the position of the cursor"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Second image:"})," Animated from 33.66% to 66.33%, depending on the position of the cursor"]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-scale-image-gallery/video2.mov"}),(0,a.jsx)("h2",{children:"Adding an easing"}),(0,a.jsx)("p",{children:"The animation is essential done, but we I personnally would prefer it if it was smooth. Right now it kinda feels gittery and unpolished."}),(0,a.jsxs)("p",{children:["However, to make the animation smooth, we're going to complicate things quite a bit. We need to convert the animation into one that uses ",(0,a.jsx)("code",{className:"language-jsx",children:"requestAnimationFrame"})," instead of directly being triggered by a mouse move event. That way, we have more control over the animation."]}),(0,a.jsx)(x.Z,{title:"Double/index.jsx",code:"...\nexport default function Index({projects, reversed}) {\n\n    const firstImage = useRef(null);\n    const secondImage = useRef(null);\n    let requestAnimationFrameId = null;\n    let xPercent = reversed ? 100 : 0;\n    let currentXPercent = reversed ? 100 : 0;\n    const speed = 0.15;\n    \n    const manageMouseMove = (e) => {\n        const { clientX } = e;\n        xPercent = (clientX / window.innerWidth) * 100;\n        \n        if(!requestAnimationFrameId){\n            requestAnimationFrameId = window.requestAnimationFrame(animate);\n        }\n    }\n\n    const animate = () => {\n        //Add easing to the animation\n        const xPercentDelta = xPercent - currentXPercent;\n        currentXPercent = currentXPercent + (xPercentDelta * speed)\n        \n        //Change width of images between 33.33% and 66.66% based on cursor\n        const firstImagePercent = 66.66 - (currentXPercent * 0.33);\n        const secondImagePercent = 33.33 + (currentXPercent * 0.33);\n        firstImage.current.style.width = `${firstImagePercent}%`\n        secondImage.current.style.width = `${secondImagePercent}%`\n        \n        if(Math.round(xPercent) == Math.round(currentXPercent)){\n            window.cancelAnimationFrame(requestAnimationFrameId);\n            requestAnimationFrameId = null;\n        }\n        else{\n            window.requestAnimationFrame(animate)\n        }\n    }\n\n    return(\n      <div onMouseMove={(e) => {manageMouseMove(e)}} className={styles.double}>\n      ...\n",language:"js",highlights:[22,23,31]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Explanation about the above code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 22 and 23:"})," This is how the easing is made. Instead of incrementing the width directly from the ",(0,a.jsx)("code",{className:"language-jsx",children:"xPercent"})," of the mouse, we delay it using a ",(0,a.jsx)("code",{className:"language-jsx",children:"speed"})," value to slow it down."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 31"}),": If the ",(0,a.jsx)("code",{className:"language-jsx",children:"xPercent"})," and the ",(0,a.jsx)("code",{className:"language-jsx",children:"currentXPercent"})," (easing) are the approximately the same value, we stop the requestAnimationFrame."]})]})]}),(0,a.jsx)("h3",{children:"We should have the final animation:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mouse-scale-image-gallery/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"Hope you liked this tutorial, very useful to know the little trick with the padding as well as knowing how to create an easing with the requestAnimationFrame!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function floating_image_gallery_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]})})}),(0,a.jsx)("h3",{children:"Formating the data"}),(0,a.jsxs)("p",{children:["We're going to render the images using the ",(0,a.jsx)(d(),{href:"https://nextjs.org/docs/app/api-reference/components/image",target:"_blank",children:"next/image"}),". Since we want to use the natural aspect ratio of the images (we're going to specify the width and let the height be auto), we need to ",(0,a.jsx)(d(),{href:"https://nextjs.org/docs/app/building-your-application/optimizing/images#local-images",target:"_blank",children:"staticaly import"})," them."]}),(0,a.jsx)(x.Z,{title:"src/data.js",code:"import floating1 from '../public/images/floating_1.jpg';\nimport floating2 from '../public/images/floating_2.jpg';\nimport floating3 from '../public/images/floating_3.jpg';\nimport floating4 from '../public/images/floating_4.jpg';\nimport floating5 from '../public/images/floating_5.jpg';\nimport floating6 from '../public/images/floating_6.jpg';\nimport floating7 from '../public/images/floating_7.jpg';\nimport floating8 from '../public/images/floating_8.jpg';\n\nexport { \n    floating1, \n    floating2, \n    floating3, \n    floating4, \n    floating5, \n    floating6, \n    floating7, \n    floating8\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Page component"}),(0,a.jsx)("p",{children:"We can then import the data in a cleaner fashion and create the title of the page."}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss","globals.css"],codes:["import styles from './page.module.scss'\nimport {\n    floating1, \n    floating2, \n    floating3, \n    floating4, \n    floating5, \n    floating6, \n    floating7, \n    floating8\n} from '../data'\n\nexport default function Home() {\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.title}>\n        <h1>Floating Images Gallery</h1>\n        <p>Next.js and GSAP</p>\n      </div>\n    </main>\n  )\n}",".main{  \n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n  position: relative;\n  .title{\n      position: absolute;\n      left: 50%;\n      top: 45%;\n      transform: translateX(-50%) translateY(-50%);\n      font-size: 18px;\n      h1{\n          font-weight: 400;\n          color: white;\n          margin: 0px;\n          text-align: center;\n      }\n      p{\n          color: grey;\n          margin: 0px;\n          text-align: center;\n          margin-top: 10px;\n      }\n  }\n}","body{\n    background-color: black;\n    margin: 0px;\n}"],languages:["jsx","css","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/floating-image-gallery/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the pixelated effect"})}),(0,a.jsx)("h2",{children:"Adding the Images"}),(0,a.jsx)("p",{children:"To animate the images, we're actually not going to directly change their position. Instead we will change the position of their parent (div). That way, we have a more performance optimized animaiton."}),(0,a.jsx)("p",{children:"We will have 3 main divs called plane:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["'use client';\nimport Image from 'next/image';\nimport { useRef } from 'react';\n\nexport default function Home() {\n  \n    const plane1 = useRef(null);\n    const plane2 = useRef(null);\n    const plane3 = useRef(null);\n\n    return (\n    <main className={styles.main}>\n      <div ref={plane1} className={styles.plane}>\n          <Image \n            src={floating1}\n            alt='image'\n            width={300}\n          />\n           <Image \n            src={floating2}\n            alt='image'\n            width={300}\n          />\n          <Image \n            src={floating7}\n            alt='image'\n            width={225}\n          />\n      </div>\n      <div ref={plane2} className={styles.plane}>\n          <Image \n            src={floating4}\n            alt='image'\n            width={250}\n          />\n           <Image \n            src={floating6}\n            alt='image'\n            width={200}\n          />\n          <Image \n            src={floating8}\n            alt='image'\n            width={225}\n          />\n      </div>\n      <div ref={plane3} className={styles.plane}>\n          <Image \n            src={floating3}\n            alt='image'\n            width={150}\n          />\n           <Image \n            src={floating5}\n            alt='image'\n            width={200}\n          />\n      </div>\n      ...\n    </main>\n  )\n}",".main{  \n  ...\n  .plane{\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    img{\n        position: absolute;\n    }\n    &:nth-of-type(1){\n        filter: brightness(0.7);\n        img{\n            &:nth-of-type(1){\n                left:90%;\n                top: 70%;\n            }\n            &:nth-of-type(2){\n                left: 5%;\n                top: 65%;\n            }\n            &:nth-of-type(3){\n                left: 35%;\n                top: 0%;\n            }\n        }\n    }\n    &:nth-of-type(2){\n        filter: brightness(0.6);\n        img{\n            &:nth-of-type(1){\n                left: 5%;\n                top: 10%;\n            }\n            &:nth-of-type(2){\n                left: 80%;\n                top: 5%;\n            }\n            &:nth-of-type(3){\n                left: 60%;\n                top: 60%;\n            }\n        }\n    }\n    &:nth-of-type(3){\n        filter: brightness(0.5);\n        img{\n            &:nth-of-type(1){\n                left: 65%;\n                top: 2.5%;\n            }\n            &:nth-of-type(2){\n                left: 40%;\n                top: 75%;\n            }\n        }\n    }\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/floating-image-gallery/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the pixelated effect"})}),(0,a.jsx)("h2",{children:"Animating the Images"}),(0,a.jsx)("p",{children:"Like I said earlier, I'm not directly changing the position of the images but rather their parent:"}),(0,a.jsx)("p",{children:"We're also going to use the Linear Interpolation to create the easing:"}),(0,a.jsx)("h3",{children:"The Linear Interpolation"}),(0,a.jsx)("p",{children:"Linear interpolation is a key concept in animations. It is often used by motion designers, but we can also use it for web animations! In short, it is form of interpolation, which involves the generation of new values based on an existing set of values"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot4.png",layout:"fill",objectFit:"contain",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)(x.Z,{title:"Lerp in Javascript",code:"let value = 10;\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a\nvalue = lerp(value, 0, 0.1);\n\nconsole.log(value) \n//9",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"x"}),": The value we want to interpolate from (start)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"y"}),": The target value we want to interpolate to (end)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"a"}),": The amount by which we want ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," to be closer to ",(0,a.jsx)("code",{className:"language-jsx",children:"y"}),"."]})]})}),(0,a.jsx)("h3",{children:"Translating everything in code:"}),(0,a.jsx)("p",{children:"Great. Now we can jump in the code and understand exactly what's going on."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nexport default function Home() {\n\n  const plane1 = useRef(null);\n  const plane2 = useRef(null);\n  const plane3 = useRef(null);\n  let requestAnimationFrameId = null;\n  let xForce = 0;\n  let yForce = 0;\n const easing = 0.08;\n const speed = 0.01;\n\n  const manageMouseMove = (e) => {\n    const { movementX, movementY } = e\n    xForce += movementX * speed;\n    yForce += movementY * speed;\n\n    if(requestAnimationFrameId == null){\n      requestAnimationFrameId = requestAnimationFrame(animate);\n    }\n  }\n\n  const lerp = (start, target, amount) => start * (1 - amount) +target * amount;\n\n  const animate = () => {\n    xForce = lerp(xForce, 0, easing);\n    yForce = lerp(yForce, 0, easing);\n    gsap.set(plane1.current, {x: `+=${xForce}`, y: `+=${yForce}`})\n    gsap.set(plane2.current, {x: `+=${xForce * 0.5}`, y: `+=${yForce * 0.5}`})\n    gsap.set(plane3.current, {x: `+=${xForce * 0.25}`, y: `+=${yForce * 0.25}`})\n\n    if(Math.abs(xForce) < 0.01) xForce = 0;\n    if(Math.abs(yForce) < 0.01) yForce = 0;\n    \n    if(xForce != 0 || yForce != 0){\n      requestAnimationFrame(animate);\n    }\n    else{\n      cancelAnimationFrame(requestAnimationFrameId)\n      requestAnimationFrameId = null;\n    }\n  }\n\n  return (\n    <main onMouseMove={(e) => {manageMouseMove(e)}} className={styles.main}>\n    ...\n    ",language:"jsx",highlights:[28,29,30]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 19:"})," When the mouse moves, if there is no active requestAnimationFrame instance, we start a new one."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 26, 27:"})," We use the linear interpolation to create an easing. Instead of directly linking the movement of the mouse with the movement of the images, we slow down that value using the lerp."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 28, 29, 30:"})," Depending on the plane, we reduce the strength of the animation."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 32, 33, 35:"})," If the easing is done, we cancel the instance of requestAnimationFrame."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/floating-image-gallery/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"That was it for this animation! Very quick but a very nice end result. Also interesting to know how to use the lerp to create an easing inside a requestAnimationFrame."}),"            ",(0,a.jsx)("p",{children:"-Oli"})]})}function curved_menu_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]})})}),(0,a.jsx)("h3",{children:"Creating the Header Component"}),(0,a.jsx)("p",{children:"The Header Component is imported inside of the layout so it gets persisted accross multiple pages. You can understand that logic with Nextjs component hierarchy:"}),(0,a.jsx)(x.Z,{title:"layout.js",code:"import './globals.css'\nimport { Inter } from 'next/font/google'\nimport Header from '../components/header';\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  )\n}\n",language:"jsx",highlights:[3,15]}),(0,a.jsx)("h2",{children:"Burger Menu"}),(0,a.jsx)("p",{children:"We create a state to track if the menu is active or not. Then we can toggle a css animation using a conditional class, and use the before and after pseudo elements to create the burger menu."}),(0,a.jsx)(g.Z,{titles:["Header/index.jsx","Header/style.module.scss"],codes:["'use client'\nimport styles from './style.module.scss'\nimport { useState } from 'react';\n\nexport default function Home() {\n\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <>\n    <div onClick={() => {setIsActive(!isActive)}} className={styles.button}>\n      <div className={`${styles.burger} ${isActive ? styles.burgerActive : \"\"}`}></div>\n    </div>\n    </>\n  )\n}",'.button{\n    position: fixed;\n    right: 0px;\n    margin: 20px;\n    z-index: 2;\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background-color: #455CE9;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.burger{\n    width: 100%;\n    &::after, &::before{\n        content: "";\n        display: block;\n        height: 1px;\n        width: 40%;\n        margin: auto;\n        background-color: white;\n        position: relative;\n        transition: transform 0.3s;\n    }\n\n    &::after{\n        top: -5px;\n    }\n\n    &::before{\n        top: 5px;\n    }\n}\n\n.burgerActive{\n\n    &::after{\n        transform: rotate(45deg);\n        top: -1px;\n    }\n\n    &::before{\n        transform: rotate(-45deg);\n        top: 0px;\n    }\n    \n}'],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/curved-menu/video1.mov"}),(0,a.jsx)("h2",{children:"Navigation Menu"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:["The animations are made with the ",(0,a.jsx)("code",{className:"language-jsx",children:"AnimatePresence"})," components from Framer Motion."]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["With the ",(0,a.jsx)("code",{className:"language-jsx",children:'mode="wait"'})," it forces the Nav to trigger its exit animation before unmounting."]}),(0,a.jsxs)("li",{children:["All animations are defined inside of an external ",(0,a.jsx)("code",{className:"language-jsx",children:"anim.js"})," file."]})]})]}),(0,a.jsx)(g.Z,{titles:["Header/index.jsx","Header/anim.js"],codes:['...\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <>\n        <div onClick={() => {setIsActive(!isActive)}} className={styles.button}>\n            <div className={`${styles.burger} ${isActive ? styles.burgerActive : ""}`}></div>\n        </div>\n        <AnimatePresence mode="wait">\n           {isActive && <Nav />}\n       </AnimatePresence>\n   </>\n  )\n','export const menuSlide = {\n    initial: {x: "calc(100% + 100px)"},\n    enter: {x: "0", transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1]}},\n    exit: {x: "calc(100% + 100px)", transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1]}}\n}\n\nexport const slide = {\n    initial: {x: 80},\n    enter: i => ({x: 0, transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1], delay: 0.05 * i}}),\n    exit: i => ({x: 80, transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1], delay: 0.05 * i}})\n}\n\nexport const scale = {\n    open: {scale: 1, transition: {duration: 0.3}},\n    closed: {scale: 0, transition: {duration: 0.4}}\n}'],languages:["jsx","jsx"]}),(0,a.jsxs)("p",{children:["I use an array of objects to render the different links. That way, I can use the index to create a cascade animaiton. I also use the ",(0,a.jsx)("code",{className:"language-jsx",children:"usePathname"})," hook and the ",(0,a.jsx)("code",{className:"language-jsx",children:"useState"})," hook to track which link is active."]}),(0,a.jsx)(g.Z,{titles:["Nav/index.jsx","Nav/style.module.scss"],codes:['import React, { useState } from \'react\'\nimport styles from \'./style.module.scss\';\nimport { motion } from \'framer-motion\';\nimport { usePathname } from \'next/navigation\';\nimport { menuSlide } from \'../anim\';\nimport Link from \'./link\';\n\nconst navItems = [\n  {\n    title: "Home",\n    href: "/",\n  },\n  {\n    title: "Work",\n    href: "/work",\n  },\n  {\n    title: "About",\n    href: "/about",\n  },\n  {\n    title: "Contact",\n    href: "/contact",\n  },\n]\n\nexport default function index() {\n\n  const pathname = usePathname();\n  const [selectedIndicator, setSelectedIndicator] = useState(pathname);\n\n  return (\n    <motion.div \n      variants={menuSlide} \n      initial="initial" \n      animate="enter" \n      exit="exit" \n      className={styles.menu}\n      >\n       <div className={styles.body}>\n            <div onMouseLeave={() => {setSelectedIndicator(pathname)}} className={styles.nav}>\n                    <div className={styles.header}>\n                        <p>Navigation</p>\n                    </div>\n                    {\n                      navItems.map( (data, index) => {\n                        return <Link \n                        key={index} \n                        data={{...data, index}} \n                        isActive={selectedIndicator == data.href} \n                        setSelectedIndicator={setSelectedIndicator}>\n                        </Link>\n                      })\n                    }\n            </div>\n            <div className={styles.footer}>\n                <a>Awwwards</a>\n                <a>Instagram</a>\n                <a>Dribble</a>\n                <a>LinkedIn</a>\n            </div>\n        </div>\n    </motion.div>\n  )\n}',".menu{\n    height: 100vh;\n    background-color: rgb(41, 41, 41);\n    position: fixed;\n    right: 0;\n    top: 0;\n    color: white;\n\n    .body{\n        box-sizing: border-box;\n        height: 100%;\n        padding: 100px;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n\n        .nav{\n            display: flex;\n            flex-direction: column;\n            font-size: 56px;\n            gap: 12px;\n            margin-top: 80px;\n\n            .header{\n                color: rgb(153, 153, 153);\n                border-bottom: 1px solid rgb(153, 153, 153);\n                text-transform: uppercase;\n                font-size: 11px;\n                margin-bottom: 40px;\n            }\n\n            a{\n                text-decoration: none;\n                color: white;\n                font-weight: 300;\n            }\n            \n        }\n    }\n    .footer{\n        display: flex;\n        width: 100%;\n        justify-content: space-between;\n        font-size: 12px;\n        gap: 40px;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("p",{children:"There's also a Link component to externalize some html and make everything cleaner."}),(0,a.jsx)(g.Z,{titles:["Link/index.jsx","Link/style.module.scss"],codes:['import styles from \'./style.module.scss\';\nimport Link from \'next/link\';\nimport { motion } from \'framer-motion\';\nimport { slide, scale } from \'../../anim\';\n\nexport default function Index({data, isActive, setSelectedIndicator}) {\n  \n    const { title, href, index} = data;\n  \n    return (\n      <motion.div \n        className={styles.link} \n        onMouseEnter={() => {setSelectedIndicator(href)}} \n        custom={index} \n        variants={slide} \n        initial="initial" \n        animate="enter" \n        exit="exit"\n      >\n        <motion.div \n          variants={scale} \n          animate={isActive ? "open" : "closed"} \n          className={styles.indicator}>\n        </motion.div>\n        <Link href={href}>{title}</Link>\n      </motion.div>\n    )\n}',".link{\n    position: relative;\n    display: flex;\n    align-items: center;\n    \n    .indicator{\n        width: 10px;\n        height: 10px;\n        background-color: white;\n        border-radius: 50%;\n        position: absolute;\n        left: -30px;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h2",{children:"SVG Curve"}),(0,a.jsx)("p",{children:"To create the curve, I create a custom SVG using path commands:"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)(d(),{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands",target:"_blank"}),"SVG Path commands:"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Move To:"})," Picks up the drawing instrument and setting it down at the specified position."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line To:"})," Draws a straight line from the current point to the specified end point"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:" Quadratic B\xe9zier Curve:"}),"Draws a curve from the current point to the specified point. Use a control point to create the curve."]})]})]}),(0,a.jsx)("p",{children:"Framer Motion is used to interpolate from one curve to the next."}),(0,a.jsx)(g.Z,{titles:["Curve/index.jsx","Curve/style.module.scss"],codes:["import React from 'react'\nimport { motion } from 'framer-motion';\nimport styles from './styles.module.scss';\n\nexport default function Index() {\n\n  const initialPath = `M100 0 L100 ${window.innerHeight} Q-100 ${window.innerHeight/2} 100 0`\n  const targetPath = `M100 0 L100 ${window.innerHeight} Q100 ${window.innerHeight/2} 100 0`\n\n  const curve = {\n    initial: {\n        d: initialPath\n    },\n    enter: {\n        d: targetPath,\n        transition: {duration: 1, ease: [0.76, 0, 0.24, 1]}\n    },\n    exit: {\n        d: initialPath,\n        transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1]}\n    }\n  }\n\n  return (\n    <svg className={styles.svgCurve}>\n        <motion.path variants={curve} initial=\"initial\" animate=\"enter\" exit=\"exit\"></motion.path>\n    </svg>\n  )\n}",".svgCurve{\n    position: absolute;\n    top: 0;\n    left: -99px;\n    width: 100px;\n    height: 100%;\n    fill: rgb(41, 41, 41);\n    stroke: none;\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/curved-menu/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"That was it for this animation! Path commands are quite hard to use at first, but when you get used to it, it's possible to create really animations. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function awwwards_landing_page_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here's a list of all the libraries we need for this landing page:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Sass for the stylesheets: ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["Framer Motion for animations: ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["GSAP for animations: ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i gsap"}),"."]}),(0,a.jsxs)("li",{children:["Locomotive Scroll for smooth scroll: ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i npm install locomotive-scroll@beta"}),"."]})]})]}),(0,a.jsx)("h3",{children:"Initializing the Page"}),(0,a.jsx)("p",{children:"The root page will be the one initializing the smooth scroll and importing all the other components:"}),(0,a.jsx)(g.Z,{titles:["page.js","globals.scss"],codes:["'use client';\nimport { useEffect } from 'react'\n\nexport default function Home() {\n\n  useEffect( () => {\n    (\n      async () => {\n          const LocomotiveScroll = (await import('locomotive-scroll')).default\n          const locomotiveScroll = new LocomotiveScroll();\n      }\n    )()\n  }, [])\n\n  return (\n    <main>\n      {/* <AnimatePresence mode='wait'>\n        {isLoading && <Preloader />}\n      </AnimatePresence>\n      <Landing />\n      <Description />\n      <Projects />\n      <SlidingImages />\n      <Contact /> */}\n    </main>\n  )\n}\n","body{\n    margin: 0px;\n    overflow: hidden; /* Hide scrollbars */\n    /* cursor: wait; Add after Preloader*/\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h2",{children:"Landing, Projects, Header Components"}),(0,a.jsx)("p",{children:"I'm going to grab the code that I previously made for these 3 components."}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"I already have a tutorial specifically for these animations. You can check them out here:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Landing: "}),(0,a.jsx)(d(),{target:"_blank",href:"/tutorials/infinite-text-move-on-scroll",children:"here"})]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Projects:"})," ",(0,a.jsx)(d(),{target:"_blank",href:"/tutorials/project-gallery-mouse-hover",children:"here"})]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Navigation bar:"})," ",(0,a.jsx)(d(),{target:"_blank",href:"/tutorials/curved-menu",children:"here"})]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video1.mov"}),(0,a.jsx)("h2",{children:"Header Component"}),(0,a.jsx)("p",{children:"Here we will add the header. It will be a normal header with 3 navigations items, but when scrolling for more than 100vh, it will be swapped for a burger menu."}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We use ",(0,a.jsx)(d(),{target:"_blank",href:"https://greensock.com/scrolltrigger/",children:"ScrollTrigger"})," by GSAP to create this transition."]}),(0,a.jsx)("li",{children:"We also use CSS to create the logo animation."}),(0,a.jsxs)("li",{children:["For the curved menu, you check it out ",(0,a.jsx)(d(),{target:"_blank",href:"/tutorials/curved-menu",children:"here"}),"."]})]})}),(0,a.jsx)(g.Z,{titles:["Header/index.jsx","Header/style.module.scss"],codes:["'use client';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport styles from './style.module.scss';\nimport { usePathname } from 'next/navigation';\nimport { AnimatePresence } from 'framer-motion';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport Nav from './nav';\nimport gsap from 'gsap';\n\nexport default function index() {\n    const header = useRef(null);\n    const [isActive, setIsActive] = useState(false);\n    const pathname = usePathname();\n    const button = useRef(null);\n\n    useEffect( () => {\n      if(isActive) setIsActive(false)\n    }, [pathname])\n\n    useLayoutEffect( () => {\n        gsap.registerPlugin(ScrollTrigger)\n        gsap.to(button.current, {\n            scrollTrigger: {\n                trigger: document.documentElement,\n                start: 0,\n                end: window.innerHeight,\n                onLeave: () => {gsap.to(button.current, {scale: 1, duration: 0.25, ease: \"power1.out\"})},\n                onEnterBack: () => {gsap.to(button.current, {scale: 0, duration: 0.25, ease: \"power1.out\"})}\n            }\n        })\n    }, [])\n\n    return (\n        <>\n        <div ref={header} className={styles.header}>\n            <div className={styles.logo}>\n                <p className={styles.copyright}>\xa9</p>\n                <div className={styles.name}>\n                    <p className={styles.codeBy}>Code by</p>\n                    <p className={styles.dennis}>Dennis</p>\n                    <p className={styles.snellenberg}>Snellenberg</p>\n                </div>\n            </div>\n            <div className={styles.nav}>\n                <div className={styles.el}>\n                    <a>Work</a>\n                    <div className={styles.indicator}></div>\n                </div>\n                <div className={styles.el}>\n                    <a>About</a>\n                    <div className={styles.indicator}></div>\n                </div>\n                <div className={styles.el}>\n                    <a>Contact</a>\n                    <div className={styles.indicator}></div>\n                </div>\n            </div>\n        </div>\n        <div ref={button} className={styles.headerButtonContainer}>\n            <div onClick={() => {setIsActive(!isActive)}} className={`${styles.button}`}>\n                <div className={`${styles.burger} ${isActive ? styles.burgerActive : \"\"}`}></div>\n            </div>\n        </div>\n        <AnimatePresence mode=\"wait\">\n            {isActive && <Nav />}\n        </AnimatePresence>\n        </>\n    )\n}",'.header{\n    position: absolute;\n    display: flex;\n    z-index: 1;\n    top: 0;\n    color: white;\n    padding: 35px;\n    justify-content: space-between;\n    width: 100%;\n    font-weight: 300;\n    box-sizing: border-box;\n    align-items: center;\n    \n    .logo{\n        display: flex;\n        cursor: pointer;\n        p{\n            margin: 0px;\n            transition: all 0.5s cubic-bezier(0.76, 0, 0.24, 1);\n        }\n        .name{\n            display: flex;\n            position: relative;\n            overflow: hidden;\n            white-space: nowrap;\n            margin-left: 5px;\n            transition: all 0.5s cubic-bezier(0.76, 0, 0.24, 1);\n            p{\n                position: relative;\n                transition: transform 0.5s cubic-bezier(0.76, 0, 0.24, 1);\n                &:nth-of-type(2){\n                    padding-left: 0.3em;\n                }\n                &:nth-of-type(3){\n                    position: absolute;\n                    left: 120px;\n                    padding-left: 0.3em;\n                }\n            }\n        }\n        &:hover{\n            .copyright{\n                transform: rotate(360deg);\n            }\n            .name{\n                padding-right: 30px;\n                .codeBy{\n                    transform: translateX(-100%);\n                }\n                .dennis{\n                    transform: translateX(-65px);\n                }\n                .snellenberg{\n                    transform: translateX(-65px);\n                }\n            }\n        }\n    }\n    .nav{\n        display: flex;\n        align-items: center;\n\n        .el{\n            display: flex;\n            flex-direction: column;\n            position: relative;\n            z-index: 1;\n            padding: 15px;\n            cursor: pointer;\n            &:hover{\n                .indicator{\n                    transform: scale(1);\n                }\n            }\n            .indicator{\n                position: absolute;\n                width: 5px;\n                height: 5px;\n                top: 45px;\n                left: 50%;\n                background-color: white;\n                border-radius: 50%;\n                transform: scale(0) translateX(-50%);\n                transition: transform 0.2s cubic-bezier(0.76, 0, 0.24, 1);\n            }\n        }\n        a{\n            cursor: pointer;\n        }\n    } \n}\n.headerButtonContainer{\n    transform: scale(0);\n    position: fixed;\n    right: 0px;\n    z-index: 4;\n\n    .button{\n        position: relative;\n        margin: 20px;\n        width: 80px;\n        height: 80px;\n        border-radius: 50%;\n        background-color: #1C1D20;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    \n    .burger{\n        width: 100%;\n        position: relative;\n        z-index: 1;\n        &::after, &::before{\n            content: "";\n            display: block;\n            height: 1px;\n            width: 40%;\n            margin: auto;\n            background-color: white;\n            position: relative;\n            transition: transform 0.3s;\n        }\n    \n        &::after{\n            top: -5px;\n        }\n    \n        &::before{\n            top: 5px;\n        }\n    }\n    \n    .burgerActive{\n    \n        &::after{\n            transform: rotate(45deg);\n            top: -1px;\n        }\n    \n        &::before{\n            transform: rotate(-45deg);\n            top: 0px;\n        }\n        \n    }\n}'],languages:["jsx","scss"],highlights:[[20],[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"A couple notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 20:"})," The burger menu is initially set at ",(0,a.jsx)("code",{className:"language-jsx",children:"scale(0)"})," and then it is animated to ",(0,a.jsx)("code",{className:"language-jsx",children:"scale(1)"})," after ",(0,a.jsx)("code",{className:"language-jsx",children:"100vh"})," of scroll."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 41-56 (CSS)"})," The logo is animated using with simple css animations."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video2.mov"}),(0,a.jsx)("h2",{children:"Description Component"}),(0,a.jsx)("p",{children:"The description is 2 simple paragraphs with a button."}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The button will have a slight parallax that we can easily make with Locomotive Scroll."}),(0,a.jsx)("li",{children:"The first paragraph is split in words and is animated using a mask an Framer Motion."})]}),(0,a.jsx)(g.Z,{titles:["Description/index.jsx","Description/style.module.scss"],codes:['import styles from \'./style.module.scss\';\nimport { useInView, motion } from \'framer-motion\';\nimport { useRef } from \'react\';\nimport { slideUp, opacity } from \'./animation\';\nexport default function index() {\n\n    const phrase = "Helping brands to stand out in the digital era. Together we will set the new status quo. No nonsense, always on the cutting edge.";\n    const description = useRef(null);\n    const isInView = useInView(description)\n    return (\n        <div ref={description} className={styles.description}>\n            <div className={styles.body}>\n                <p>\n                {\n                    phrase.split(" ").map( (word, index) => {\n                        return <span className={styles.mask}><motion.span variants={slideUp} custom={index} animate={isInView ? "open" : "closed"} key={index}>{word}</motion.span></span>\n                    })\n                }\n                </p>\n                <motion.p variants={opacity} animate={isInView ? "open" : "closed"}>The combination of my passion for design, code & interaction positions me in a unique place in the web design world.</motion.p>\n                <div data-scroll data-scroll-speed={0.1}>\n                    <div className={styles.button}>\n                        <p>About me</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}',".description{\n    padding-left: 200px;\n    padding-right: 200px;\n    margin-top: 200px;\n    display: flex;\n    justify-content: center;\n    .body{\n        max-width: 1400px;\n        display: flex;\n        gap: 50px;\n        position: relative;\n        p{\n            margin: 0px;\n            &:nth-of-type(1){\n                font-size: 36px;\n                gap: 8px;\n                line-height: 1.3;\n                span{\n                    margin-right: 3px;\n                }\n                .mask{\n                    position: relative;\n                    overflow: hidden;\n                    display: inline-flex;\n                }\n            }\n            &:nth-of-type(2){\n                font-size: 18px;\n                width: 80%;\n                font-weight: 300;\n            }\n        }\n        .button{\n            top: 80%;\n            left: calc(100% - 200px); \n            width: 180px;\n            height: 180px;\n            background-color: #1C1D20;\n            color: white;\n            border-radius: 50%;\n            position: absolute;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            p{\n                margin: 0px;\n                font-size: 16px;\n                font-weight: 300;\n                position: relative;\n                z-index: 1;\n            }\n        }\n    }\n    .moreWork{\n        padding: 20px;\n        border-radius: 40px;\n        border: 1px solid grey;\n    }\n}"],languages:["jsx","scss"],highlights:[[16,21],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"A couple notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 16:"})," The phrase is split into words and then the span are animated with Framer Motion when the paragraph comes into the view using the ",(0,a.jsx)("code",{className:"language-jsx",children:"useInView"})," Hook."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 21:"})," A slight parallax is added to the button with Locomotive Scroll and ",(0,a.jsx)("code",{className:"language-jsx",children:"data-scroll-speed"}),"."]})]})]}),(0,a.jsx)("p",{children:"The animations are defined in an external file:"}),(0,a.jsx)(x.Z,{title:"Description/anim.js",code:'export const slideUp = {\n    initial: {\n        y: "100%"\n    },\n    open: (i) => ({\n        y: "0%",\n        transition: {duration: 0.5, delay: 0.01 * i}\n    }),\n    closed: {\n        y: "100%",\n        transition: {duration: 0.5}\n    }\n}\n\nexport const opacity = {\n    initial: {\n        opacity: 0\n    },\n    open: {\n        opacity: 1,\n        transition: {duration: 0.5}\n    },\n    closed: {\n        opacity: 0,\n        transition: {duration: 0.5}\n    }\n}',language:"jsx",highlights:[7]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"A couple notes about the code:"}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 7:"})," The letter by letter animation is created by using the index of each letter as delay."]})})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video3.mov"}),(0,a.jsx)("h2",{children:"Sliding Images Component"}),(0,a.jsx)("p",{children:"For the sliding images, we will use Framer Motion to create the double horizontal slider and animated the circle."}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useScroll:"})," We track the progress of the window starting when ",(0,a.jsx)("code",{className:"language-jsx",children:'["start end"]'})," the top of the container hits the bottom of the window until ",(0,a.jsx)("code",{className:"language-jsx",children:'["end start"]'})," the end of the container hits and the top of the window."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useTransform:"})," we use the input of one value to output another value."]})]}),(0,a.jsx)(g.Z,{titles:["SlidingImages/index.jsx","SlidingImages/style.module.scss"],codes:['import { useRef } from \'react\';\nimport { useScroll, useTransform, motion } from \'framer-motion\';\nimport styles from \'./style.module.scss\';\nimport Image from \'next/image\';\n\nconst slider1 = [\n    {\n        color: "#e3e5e7",\n        src: "c2.jpg"\n    },\n    {\n        color: "#d6d7dc",\n        src: "decimal.jpg"\n    },\n    {\n        color: "#e3e3e3",\n        src: "funny.jpg"\n    },\n    {\n        color: "#21242b",\n        src: "google.jpg"\n    }\n]\n\nconst slider2 = [\n    {\n        color: "#d4e3ec",\n        src: "maven.jpg"\n    },\n    {\n        color: "#e5e0e1",\n        src: "panda.jpg"\n    },\n    {\n        color: "#d7d4cf",\n        src: "powell.jpg"\n    },\n    {\n        color: "#e1dad6",\n        src: "wix.jpg"\n    }\n]\n\nexport default function index() {\n\n    const container = useRef(null);\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ["start end", "end start"]\n    })\n\n    const x1 = useTransform(scrollYProgress, [0, 1], [0, 150])\n    const x2 = useTransform(scrollYProgress, [0, 1], [0, -150])\n    const height = useTransform(scrollYProgress, [0, 0.9], [50, 0])\n\n    return (\n        <div ref={container} className={styles.slidingImages}>\n            <motion.div style={{x: x1}} className={styles.slider}>\n                    {\n                        slider1.map( (project, index) => {\n                            return <div className={styles.project} style={{backgroundColor: project.color}} >\n                                <div key={index} className={styles.imageContainer}>\n                                    <Image \n                                    fill={true}\n                                    alt={"image"}\n                                    src={`/images/${project.src}`}/>\n                                </div>\n                            </div>\n                        })\n                    }\n                </motion.div>\n                <motion.div style={{x: x2}} className={styles.slider}>\n                    {\n                        slider2.map( (project, index) => {\n                            return <div className={styles.project} style={{backgroundColor: project.color}} >\n                                <div key={index} className={styles.imageContainer}>\n                                    <Image \n                                    fill={true}\n                                    alt={"image"}\n                                    src={`/images/${project.src}`}/>\n                                </div>\n                            </div>\n                        })\n                    }\n                </motion.div>\n                <motion.div style={{height}} className={styles.circleContainer}>\n                    <div className={styles.circle}></div>\n                </motion.div>\n        </div>\n    )\n}',".slidingImages{\n    display: flex;\n    flex-direction: column;\n    gap: 3vw;\n    position: relative;\n    margin-top: 200px;\n    background-color: white;\n    z-index: 1;\n    margin-bottom: 100vh;\n    .slider{\n        display: flex;\n        position: relative;\n        gap: 3vw;\n        width: 120vw;\n        left: -10vw;\n        .project{\n            width: 25%;\n            height: 20vw;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            .imageContainer{\n                position: relative;\n                width: 80%;\n                height: 80%;\n                img{\n                    object-fit: cover;\n                }\n            }\n        }\n    }\n    .circleContainer{\n        position: relative;\n        margin-top: 100px;\n        .circle{\n            height: 1550%;\n            width: 120%;\n            left: -10%;\n            border-radius: 0 0 50% 50%;\n            background-color: white;\n            z-index: 1;\n            position: absolute;\n            box-shadow: 0px 60px 50px rgba(0, 0, 0, 0.748);\n        }\n    }\n}"],languages:["jsx","scss"],highlights:[[47,58,72,86],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"A couple notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 47:"})," The progress of the scroll is tracked starting from the container."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 58, 72"}),": The images are translated by 150 and -150 depending on the scroll value."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 86"}),": The height of the circle is modified depending on the scroll value."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video4.mov"}),(0,a.jsx)("h2",{children:"Contact Component"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"The footer has 3 parallax animations:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The scroll is tracked from ",(0,a.jsx)("code",{className:"language-jsx",children:'["start end"]'})," the moment the top of the container touches the end of the window until the end of the container touches the end of the window."]}),(0,a.jsx)("li",{children:"They are created using the scroll value and inputing it inside the useTransform from Framer Motion."})]})]}),(0,a.jsx)(g.Z,{titles:["Contact/index.jsx","Contact/style.module.scss"],codes:['import styles from \'./style.module.scss\';\nimport Image from \'next/image\';\nimport { useRef } from \'react\';\nimport { useScroll, motion, useTransform, useSpring } from \'framer-motion\';\nimport Magnetic from \'../common/Magnetic\';\n\nexport default function index() {\n    const container = useRef(null);\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ["start end", "end end"]\n    })\n    const x = useTransform(scrollYProgress, [0, 1], [0, 100])\n    const y = useTransform(scrollYProgress, [0, 1], [-500, 0])\n    const rotate = useTransform(scrollYProgress, [0, 1], [120, 90])\n    return (\n        <motion.div style={{y}} ref={container} className={styles.contact}>\n            <div className={styles.body}>\n                <div className={styles.title}>\n                    <span>\n                        <div className={styles.imageContainer}>\n                            <Image \n                            fill={true}\n                            alt={"image"}\n                            src={`/images/background.jpg`}\n                            />\n                        </div>\n                        <h2>Let\'s work</h2>\n                    </span>\n                    <h2>together</h2>\n                    <motion.div style={{x}} className={styles.buttonContainer}>\n                        <div backgroundColor={"#334BD3"} className={styles.button}>\n                            <p>Get in touch</p>\n                        </div>\n                    </motion.div>\n                    <motion.svg style={{rotate, scale: 2}} width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg">\n                        <path d="M8 8.5C8.27614 8.5 8.5 8.27614 8.5 8L8.5 3.5C8.5 3.22386 8.27614 3 8 3C7.72386 3 7.5 3.22386 7.5 3.5V7.5H3.5C3.22386 7.5 3 7.72386 3 8C3 8.27614 3.22386 8.5 3.5 8.5L8 8.5ZM0.646447 1.35355L7.64645 8.35355L8.35355 7.64645L1.35355 0.646447L0.646447 1.35355Z" fill="white"/>\n                    </motion.svg>\n                </div>\n                <div className={styles.nav}>\n                        <div className={styles.button}>\n                            <p>info@dennissnellenberg.com</p>\n                        </div>\n                        <div className={styles.button}>\n                            <p>+31 6 27 84 74 30</p>\n                        </div>\n                </div>\n                <div className={styles.info}>\n                    <div>\n                        <span>\n                            <h3>Version</h3>\n                            <p>2022 \xa9 Edition</p>\n                        </span>\n                        <span>\n                            <h3>Version</h3>\n                            <p>11:49 PM GMT+2</p>\n                        </span>\n                    </div>\n                    <div>\n                        <span>\n                            <h3>socials</h3>\n                            <Magnetic>\n                                <p>Awwwards</p>\n                            </Magnetic>\n                        </span>\n                        <Magnetic>\n                            <p>Instagram</p>\n                        </Magnetic>\n                        <Magnetic>\n                            <p>Dribbble</p>\n                        </Magnetic>\n                        <Magnetic>\n                            <p>Linkedin</p>\n                        </Magnetic>\n                    </div>\n                </div>\n            </div>\n        </motion.div>\n    )\n}','.contact{\n    color: white;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: #141516;\n    position: relative;\n    .button{\n        border-radius: 3em;\n        border: 1px solid rgb(136, 136, 136);\n        cursor: pointer;\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 15px 60px 15px 60px;\n    \n        p{\n            position: relative;\n            z-index: 1;\n            transition: color 0.4s linear;\n        }\n    \n    }\n    .body{\n        padding-top: 200px;\n        width: 100%;\n        max-width: 1800px;\n        background-color: #141516;\n\n        .title{\n            border-bottom: 1px solid rgb(134, 134, 134);\n            padding-bottom: 100px;\n            margin-left: 200px;\n            margin-right: 200px;\n            position: relative;\n            span{\n                display: flex;\n                align-items: center;\n                .imageContainer{\n                    width: 100px;\n                    height: 100px;\n                    position: relative;\n                    border-radius: 50%;\n                    overflow: hidden;\n\n                    img{\n                        object-fit: cover;\n                    }\n                }\n                h2{\n                    margin-left: 0.3em;\n                }\n            }\n            h2{\n                font-size: 5vw;\n                margin: 0px;\n                font-weight: 300;\n            }\n            .buttonContainer{\n                position: absolute;\n                left: calc(100% - 400px); \n                top: calc(100% - 75px);\n\n                .button{\n                    width: 180px;\n                    height: 180px;\n                    background-color: #455CE9;\n                    color: white;\n                    border-radius: 50%;\n                    position: absolute;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    cursor: pointer;\n                    padding: 0px;\n                    p{\n                        margin: 0px;\n                        font-size: 16px;\n                        font-weight: 300;\n                        z-index: 2;\n                        position: relative;\n                    }\n                }\n            }\n            \n            svg{\n                position: absolute;\n                top: 30%;\n                left: 100%;\n            }\n        }\n        .nav{\n            display: flex;\n            gap: 20px;\n            margin-top: 100px;\n            margin-left: 200px;\n            margin-right: 200px;\n        }\n        .info{\n            display: flex;\n            justify-content: space-between;\n            margin-top: 200px;\n            padding: 20px;\n            div{\n                display: flex;\n                gap: 10px;\n                align-items: flex-end;\n                p, h3{\n                    margin: 0px;\n                    padding: 2.5px;\n                    cursor: pointer;\n                }\n                p{\n                    &::after{\n                        content: "";\n                        width: 0%;\n                        height: 1px;\n                        background-color: white;\n                        display: block;\n                        margin-top: 2px;\n                        position: relative;\n                        left: 50%;\n                        transform: translateX(-50%);\n                        transition: width 0.2s linear;\n                    }\n                    &:hover{\n                        &::after{\n                            width: 100%;\n                        }\n                    }\n                }\n                span{\n                    display: flex;\n                    flex-direction: column;\n                    gap: 15px;\n                }\n                h3{\n                    color: grey;\n                    cursor: default;\n                    font-weight: 300;\n                    font-size: 1em;\n                }\n            }\n            \n        }\n    }   \n}'],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video5.mov"}),(0,a.jsx)("h2",{children:"Preloader Component"}),(0,a.jsx)("p",{children:"For the preloader, we actually don't need to check for any data. So it's more of an introduction page than a loader."}),(0,a.jsx)("p",{children:"The first step for the preloader to work is to create a state with a isLoading value. That way, we can control when the loader should disappear."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nexport default function Home() {\n\n    const [isLoading, setIsLoading] = useState(true);\n  \n    useEffect( () => {\n      (\n        async () => {\n            const LocomotiveScroll = (await import('locomotive-scroll')).default\n            const locomotiveScroll = new LocomotiveScroll();\n  \n            setTimeout( () => {\n              setIsLoading(false);\n              document.body.style.cursor = 'default'\n              window.scrollTo(0,0);\n            }, 2000)\n        }\n      )()\n    }, [])\n  \n    return (\n      <main>\n        <AnimatePresence mode='wait'>\n          {isLoading && <Preloader />}\n        </AnimatePresence>\n    ...\n",language:"jsx",highlights:[12,13,14,15,16,24]}),(0,a.jsx)(g.Z,{titles:["Preloader/index.jsx","Preloader/style.module.scss"],codes:['\'use client\';\nimport styles from \'./style.module.scss\';\nimport { useEffect, useState } from \'react\';\nimport { motion } from \'framer-motion\';\nimport { opacity, slideUp } from \'./anim\';\n\nconst words = ["Hello", "Bonjour", "Ciao", "Ol\xe0", "やあ", "Hall\xe5", "Guten tag", "Hallo"]\n\nexport default function Index() {\n    const [index, setIndex] = useState(0);\n    const [dimension, setDimension] = useState({width: 0, height:0});\n\n    useEffect( () => {\n        setDimension({width: window.innerWidth, height: window.innerHeight})\n    }, [])\n\n    useEffect( () => {\n        if(index == words.length - 1) return;\n        setTimeout( () => {\n            setIndex(index + 1)\n        }, index == 0 ? 1000 : 150)\n    }, [index])\n\n    const initialPath = `M0 0 L${dimension.width} 0 L${dimension.width} ${dimension.height} Q${dimension.width/2} ${dimension.height + 300} 0 ${dimension.height}  L0 0`\n    const targetPath = `M0 0 L${dimension.width} 0 L${dimension.width} ${dimension.height} Q${dimension.width/2} ${dimension.height} 0 ${dimension.height}  L0 0`\n\n    const curve = {\n        initial: {\n            d: initialPath,\n            transition: {duration: 0.7, ease: [0.76, 0, 0.24, 1]}\n        },\n        exit: {\n            d: targetPath,\n            transition: {duration: 0.7, ease: [0.76, 0, 0.24, 1], delay: 0.3}\n        }\n    }\n\n    return (\n        <motion.div variants={slideUp} initial="initial" exit="exit" className={styles.introduction}>\n            {dimension.width > 0 && \n            <>\n                <motion.p variants={opacity} initial="initial" animate="enter"><span></span>{words[index]}</motion.p>\n                <svg>\n                    <motion.path variants={curve} initial="initial" exit="exit"></motion.path>\n                </svg>\n            </>\n            }\n        </motion.div>\n    )\n}',".introduction{\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    z-index: 99;\n    background-color: #141516;\n    svg{\n        position: absolute;\n        top: 0;\n        width: 100%;\n        height: calc(100% + 300px);\n        path{\n            fill: #141516;\n        }\n    }\n    p{\n        display: flex;\n        color: white;\n        font-size: 42px;\n        align-items: center;\n        position: absolute;\n        z-index: 1;\n        span{\n            display: block;\n            width: 10px;\n            height: 10px;\n            background-color: white;\n            border-radius: 50%;\n            margin-right: 10px;\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("p",{children:"All the animations are also defined in an external file:"}),(0,a.jsx)(x.Z,{title:"Preloader/anim.js",code:'export const opacity = {\n    initial: {\n        opacity: 0\n    },\n    enter: {\n        opacity: 0.75,\n        transition: {duration: 1, delay: 0.2}\n    },\n}\n\nexport const slideUp = {\n    initial: {\n        top: 0\n    },\n    exit: {\n        top: "-100vh",\n        transition: {duration: 0.8, ease: [0.76, 0, 0.24, 1], delay: 0.2}\n    }\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"To add extra polishing, we can also add a simple slide up animation on the Landing page to make everything more smooth."})}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video8.mov"}),(0,a.jsx)("h2",{children:"Magnetic Component"}),(0,a.jsx)("p",{children:"Almost all clickable elements of this website have a magnetic effect. What we can do is create a re-usable component that will warp all the elements with want to become magnetic."}),(0,a.jsx)("p",{children:"We can then wrap all the clickable elements we'd like to be magnetic."}),(0,a.jsx)(x.Z,{title:"Magnetic/index.jsx",code:'import React, { useEffect, useRef } from \'react\'\nimport gsap from \'gsap\';\n\nexport default function index({children}) {\n    const magnetic = useRef(null);\n\n    useEffect( () => {\n        const xTo = gsap.quickTo(magnetic.current, "x", {duration: 1, ease: "elastic.out(1, 0.3)"})\n        const yTo = gsap.quickTo(magnetic.current, "y", {duration: 1, ease: "elastic.out(1, 0.3)"})\n\n        magnetic.current.addEventListener("mousemove", (e) => {\n            const { clientX, clientY } = e;\n            const {height, width, left, top} = magnetic.current.getBoundingClientRect();\n            const x = clientX - (left + width/2)\n            const y = clientY - (top + height/2)\n            xTo(x * 0.35);\n            yTo(y * 0.35)\n        })\n        magnetic.current.addEventListener("mouseleave", (e) => {\n            xTo(0);\n            yTo(0)\n        })\n    }, [])\n\n    return (\n        React.cloneElement(children, {ref:magnetic})\n    )\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"Here we add a ref to the children and add an event listener that moves the element along the mouse. When the mouse leaves the element, it resets back to 0 with an elastic ease."})}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video6.mov"}),(0,a.jsx)("h2",{children:"Button Component"}),(0,a.jsx)("p",{children:"After creating the Magnetic component, we can now create a re-usable button component that will be used accross the site."}),(0,a.jsx)("p",{children:"We can then replace all the buttons with this re-usable component."}),(0,a.jsx)(g.Z,{titles:["Rounded/index.jsx","Rounded/style.module.scss"],codes:['import React from \'react\'\nimport { useEffect, useRef } from \'react\';\nimport styles from \'./style.module.scss\';\nimport gsap from \'gsap\';\nimport Magnetic from \'../Magnetic\';\n\nexport default function index({children, backgroundColor="#455CE9", ...attributes}) {\n\n  const circle = useRef(null);\n  let timeline = useRef(null);\n  let timeoutId = null;\n  useEffect( () => {\n    timeline.current = gsap.timeline({paused: true})\n    timeline.current\n      .to(circle.current, {top: "-25%", width: "150%", duration: 0.4, ease: "power3.in"}, "enter")\n      .to(circle.current, {top: "-150%", width: "125%", duration: 0.25}, "exit")\n  }, [])\n  \n  const manageMouseEnter = () => {\n    if(timeoutId) clearTimeout(timeoutId)\n    timeline.current.tweenFromTo(\'enter\', \'exit\');\n  }\n\n  const manageMouseLeave = () => {\n    timeoutId = setTimeout( () => {\n      timeline.current.play();\n    }, 300)\n  }\n\n  return (\n    <Magnetic>\n      <div className={styles.roundedButton} style={{overflow: "hidden"}} onMouseEnter={() => {manageMouseEnter()}} onMouseLeave={() => {manageMouseLeave()}} {...attributes}>\n          {\n            children\n          }\n        <div ref={circle} style={{backgroundColor}} className={styles.circle}></div>\n      </div>\n    </Magnetic>\n  )\n}',".roundedButton{\n    border-radius: 3em;\n    border: 1px solid rgb(136, 136, 136);\n    cursor: pointer;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 15px 60px 15px 60px;\n\n    p{\n        position: relative;\n        z-index: 1;\n        transition: color 0.4s linear;\n    }\n\n    &:hover{\n        p{\n            color: white;\n        }\n    }\n}\n\n.circle{\n    width: 100%;\n    height: 150%;\n    position: absolute;\n    border-radius: 50%;\n    top: 100%;\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video7.mov"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-landing-page/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"That was it for this animation! Path commands are quite hard to use at first, but when you get used to it, it's possible to create really animations. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function mask_cursor_effect_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h2",{children:"Mouse Position Hook"}),(0,a.jsx)("p",{children:"We can start by creating a custom hook to get the position of the mouse."}),(0,a.jsx)(x.Z,{title:"useMousePosition.js",code:'import { useState, useEffect } from "react";\n\nconst useMousePosition = () => {\n  const [mousePosition, setMousePosition] = useState({ x: null, y: null });\n\n  const updateMousePosition = e => {\n    setMousePosition({ x: e.clientX, y: e.clientY });\n  };\n\n  useEffect(() => {\n    window.addEventListener("mousemove", updateMousePosition);\n\n    return () => window.removeEventListener("mousemove", updateMousePosition);\n  }, []);\n\n  return mousePosition;\n};\n\nexport default useMousePosition;',language:"jsx"}),(0,a.jsx)("h2",{children:"Mask Component"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["'use client'\nimport styles from './page.module.scss'\nimport { useState } from 'react';  \nimport { motion } from 'framer-motion';\nimport useMousePosition from './utils/useMousePosition';\n\nexport default function Home() {\n\n  const [isHovered, setIsHovered] = useState(false);\n  const { x, y } = useMousePosition();\n  const size = isHovered ? 400 : 40;\n\n  return (\n    <main className={styles.main}>\n      <motion.div \n        className={styles.mask}\n        animate={{\n          WebkitMaskPosition: `${x - (size/2)}px ${y - (size/2)}px`,\n          WebkitMaskSize: `${size}px`,\n        }}\n        transition={{ type: \"tween\", ease: \"backOut\", duration:0.5}}\n      >\n          <p onMouseEnter={() => {setIsHovered(true)}} onMouseLeave={() => {setIsHovered(false)}}>\n            A visual designer - with skills that haven't been replaced by A.I (yet) - making good shit only if the paycheck is equally good.\n          </p>\n      </motion.div>\n\n      <div className={styles.body}>\n        <p>I'm a <span>selectively skilled</span> product designer with strong focus on producing high quality & impactful digital experience.</p>\n      </div>\n\n    </main>\n  )\n}",".main{\n    height: 100vh;\n  \n    .mask, .body{\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #afa18f;\n      font-size: 64px;\n      line-height: 66px;\n      cursor: default;\n      \n      p{\n        width: 1000px;\n        padding:40px;\n      }\n      span{\n        color: #ec4e39;\n      }\n    }\n  \n    .mask{\n      mask-image: url('../../public/mask.svg');\n      mask-repeat: no-repeat;\n      mask-size: 40px;\n      background: #ec4e39;\n      position: absolute;\n      color: black;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"The code is pretty straight forward. We use the position of the mouse to move the mask position which reveals the text. Both divs are perfectly stacked on top of each others to create the desired effect."})}),(0,a.jsx)("h3",{children:"The result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/mask-cursor-effect/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Quick and simple and we can have a very clean hover effect like this by using the CSS mask property. Hope you learned someting."}),(0,a.jsx)("p",{children:"-Oli"})]})}function sliding_stairs_menu_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]})})}),(0,a.jsx)("h3",{children:"Header Component"}),(0,a.jsx)("p",{children:"The main header is imported inside the Layout.js, that way, it will persist across multiple pages."}),(0,a.jsx)(x.Z,{title:"layout.js",code:"import './globals.css'\nimport { Inter } from 'next/font/google'\nimport Header from '../components/header';\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"The Burger Menu"}),(0,a.jsx)("p",{children:"We're going to start off this animation by creating the burger menu. It's a simple Div in position fixed with an SVG inside of it. There's initially a background with a height of 0. When hovering the burger menu, this height of the background is animated using CSS."}),(0,a.jsx)(x.Z,{title:"Header/index.jsx",code:"'use client';\nimport { useState } from 'react'\nimport Burger from './burger';\n\nexport default function () {\n\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n    return (\n        <div>\n            <Burger openMenu={() => {setMenuIsOpen(true)}}/>\n        </div>\n    )\n}",language:"jsx"}),(0,a.jsx)(g.Z,{titles:["Burger/index.jsx","Burger/style.module.css"],codes:['import styles from \'./style.module.scss\';\n\nexport default function ({openMenu}) {\n    return (\n        <div onClick={() => {openMenu()}} className={styles.button}>\n            <div className={styles.background}></div>\n            <svg width="56" height="7" viewBox="0 0 56 7" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <line x1="56" y1="0.5" x2="4.37114e-08" y2="0.500005" stroke="white"/>\n                <line x1="56" y1="6.5" x2="28" y2="6.5" stroke="white"/>\n            </svg>\n            <p>Menu</p>\n        </div>\n    )\n}',".button{\n  width: 150px;\n  height: 30px;\n  background-color: black;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  position: fixed;\n  right: 0;\n  top: 0;\n  padding: 10px;\n  cursor: pointer;\n\n  p{\n      display: none;\n      color: white;\n      margin: 0px;\n      text-transform: uppercase;\n      transition: color 0.5s;\n  }\n\n  svg{\n      position: absolute;\n      right: 20px;\n      top: 20px;\n\n      line{\n          transition: stroke 0.5s;\n      }\n  }\n\n  .background{\n      background-color: #D3FD50;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: -1;\n      height: 0;\n      transition: height 0.3s;\n  }\n\n  &:hover{\n      p{\n          color: black;\n      }\n      svg{\n          line{\n              stroke: black;\n          }\n      }\n      .background{\n          height: 100%;\n      }\n  }\n}\n\n@media only screen and (min-width: 600px) {\n  .button{\n      height: 120px;\n      p{\n          display: block;\n      }\n  }\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sliding-stairs-menu/video1.mov"}),(0,a.jsx)("h2",{children:"The Stairs Component"}),(0,a.jsx)("p",{children:"To make the Stairs Component, we'll start using the AnimatePresence hook from Framer Motion, which will allow us to force the component to trigger it's exit animation before being unmounted."}),(0,a.jsx)(x.Z,{title:"Header/index.jsx",code:'...\nexport default function () {\n\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  return (\n      <div>\n          <Burger openMenu={() => {setMenuIsOpen(true)}}/>\n          <AnimatePresence mode="wait">\n              {\n                  menuIsOpen && <Stairs />\n              }\n          </AnimatePresence>\n      </div>\n  )\n}',language:"jsx",highlights:[9,10,11,12,13]}),(0,a.jsx)(g.Z,{titles:["Stairs/index.jsx","Stairs/style.module.css","anim.js"],codes:["import React from 'react'\nimport styles from './style.module.scss';\nimport { height, background, mountAnim } from '../anim';\nimport { motion } from 'framer-motion';\n\nexport default function index() {\n\n  return (\n    <div className={styles.stairs}>\n      {\n        [...Array(5)].map( (_, index) => {\n          return <Stair key={index} index={index}/>\n        })\n      }\n      <Background />\n    </div>\n  )\n}\n\nconst Stair = ({index}) => {\n  return <motion.div \n  variants={height} \n  {...mountAnim}\n  custom={4 - index} \n  className={styles.stair}>\n  </motion.div>\n}\n\nconst Background = () => {\n  return <motion.div \n    variants={background} \n    {...mountAnim}\n    className={styles.background}>\n  </motion.div>\n}",".stairs{\n  top: 0;\n  left: 0;\n  position: fixed;\n  z-index: 2;\n  height: 100vh;\n  display: flex;\n  transition: all 1s;\n  pointer-events: none;\n}\n.stair{\n  width: 20vw;\n  height: 100%;\n  background-color: black;\n}\n\n.background{\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: black;\n}","export const mountAnim = {'initial': 'initial', 'animate': 'enter', 'exit': 'exit'}\n\nexport const height = {\n    initial: {\n        height: 0\n    },\n    enter: (i) => ({\n        height: \"100%\",\n        transition: {duration: 0.5, delay: 0.05 * i, ease: [0.33, 1, 0.68, 1]}\n    }),\n    exit: (i) => ({\n        height: 0,\n        transition: {duration: 0.3, delay: 0.05 * i, ease: [0.33, 1, 0.68, 1]}\n    })\n}\n\nexport const background = {\n    initial: {\n        opacity: 0\n    },\n    enter: {\n        opacity: 0.5,\n        transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n    },\n    exit: {\n        opacity: 0,\n        transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n    }\n}"],languages:["jsx","css","js"],highlights:[[12,15],[],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple of notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 12:"})," 5 Stairs are returned with a custom array. Each of them are animated using the ",(0,a.jsx)("code",{className:"language-jsx",children:"height"})," animation declared in the ",(0,a.jsx)("code",{className:"language-jsx",children:"anim.js"})," file. The delay is created using the custom attribute and the index."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 15:"})," a simple background taking the full height and width of the window. Animated with the ",(0,a.jsx)("code",{children:"background"})," variant."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sliding-stairs-menu/video2.mov"}),(0,a.jsx)("h2",{children:"The Menu Component"}),(0,a.jsx)("p",{children:"The first thing we need to do is import the component inside of the Header. I also put it inside the AnimatePresence to force an exit animation before unmounting."}),(0,a.jsx)(x.Z,{title:"Header/index.jsx",code:'...\nexport default function () {\n\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  return (\n      <div>\n          <Burger openMenu={() => {setMenuIsOpen(true)}}/>\n          <AnimatePresence mode="wait">\n              {\n                  menuIsOpen && <>\n                  <Stairs />\n                  <Menu closeMenu={() => {setMenuIsOpen(false)}}/>\n                  </>\n              }\n          </AnimatePresence>\n      </div>\n  )\n}',language:"jsx",highlights:[13]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"The header has 3 sections:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Close Menu Icon:"})," An animated SVG, uses the slideLeft animation and has the ability to close the toggle the state of the menu."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Body (containing the links):"})," An array is mapped to return custom Link Components."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Footer:"})," A simple footer, nothing special going on here."]})]})]}),(0,a.jsx)(g.Z,{titles:["Menu/index.jsx","Menu/style.module.css","anim.js"],codes:['import { motion } from \'framer-motion\';\nimport { opacity, slideLeft, mountAnim } from \'../anim\';\nimport styles from \'./style.module.scss\';\nimport Link from \'./link\';\n\nconst menu = [\n  {\n    title: "Projects",\n    description: "To See Everything",\n    images: [\'projects1.jpg\', \'projects2.jpg\']\n  },\n  {\n    title: "Agence",\n    description: "To Learn Everything",\n    images: [\'agence1.jpg\', \'agence2.jpg\']\n  },\n  {\n    title: "Contact",\n    description: "To Send a FAX",\n    images: [\'contact1.jpg\', \'contact2.jpg\']\n  }\n]\n\nexport default function index({closeMenu}) {\n\n  return (\n    <div className={styles.menu}>\n\n        <div className={styles.header}>\n          <motion.svg \n            variants={slideLeft} \n            {...mountAnim}\n            onClick={() => {closeMenu()}} \n            width="68" \n            height="68" \n            viewBox="0 0 68 68" \n            fill="none" \n            xmlns="http://www.w3.org/2000/svg">\n              <path d="M1.5 1.5L67 67" stroke="white"/>\n              <path d="M66.5 1L0.999997 66.5" stroke="white"/>\n          </motion.svg>\n        </div>\n\n        <div className={styles.body}>\n          {\n            menu.map( (el, index) => {\n              return <Link data={el} index={index} key={index}/>\n            })\n          }\n        </div>\n\n        <motion.div \n          variants={opacity} \n          {...mountAnim} \n          custom={0.5} \n          className={styles.footer}>\n          <a>FB</a>\n          <a>IG</a>\n          <a>IN</a>\n          <a>BE</a>\n        </motion.div>\n\n    </div>\n  )\n}',".menu{\n  position: fixed;\n  display: flex;\n  z-index: 3;\n  height: 100%;\n  width: 100%;\n  flex-direction: column;\n  justify-content: space-between;\n  .header{\n      display: flex;\n      justify-content: flex-end;\n      padding: 20px;\n      svg{\n          cursor: pointer;\n          width: 100px;\n          height: 100px;\n          path{\n              transition: color 0.5s;\n          }\n\n          &:hover{\n              path{\n                  stroke: #D3FD50;\n              }\n          }\n      }\n  }\n  .body{\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translateX(-50%) translateY(-50%);\n      width: 100%;\n  }\n  .footer{\n      color: white;\n      display: flex;\n      justify-content: center;     \n      gap: 10px;\n      padding: 20px;   \n\n      a{\n          font-size: 3vw;\n          border: 2px solid white;\n          padding: 0px 10px 0px 10px;\n          border-radius: 30px;\n          cursor: pointer;\n      }\n  }\n}","... \nexport const opacity = {\n  initial: {\n      opacity: 0\n  },\n  enter: (i) => ({\n      opacity: 1,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1], delay: i}\n  }),\n  exit: {\n      opacity: 0,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n  }\n}\n\nexport const slideLeft = {\n  initial: {\n      x: 150\n  },\n  enter: {\n      x: 0,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n  },\n  exit: {\n      x: 150,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n  }\n}\n\nexport const rotateX = {\n  initial: {\n      rotateX: 90,\n      opacity: 0\n  },\n  enter: (i) => ({\n      rotateX: 0,\n      opacity: 1,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1], delay: 0.3 + (i * 0.05)}\n  }),\n  exit: {\n      opacity: 0,\n      transition: {duration: 0.5, ease: [0.33, 1, 0.68, 1]}\n  }\n}"],languages:["jsx","css","js"],highlights:[[29,44,52]]}),(0,a.jsx)("p",{children:"And here's the Link component:"}),(0,a.jsx)(g.Z,{titles:["Link/index.jsx","Link/style.module.css"],codes:["import styles from './style.module.scss'\nimport { motion } from 'framer-motion';\nimport { mountAnim, rotateX } from '../../anim';\nimport Link from 'next/link';\n\nexport default function link({data, index}) {\n\n    const { title, description, images } = data;\n    return (\n        <motion.div \n          variants={rotateX} \n          {...mountAnim}\n          custom={index} \n          className={styles.el}\n          >\n            <Link href=\"/\">{title}</Link>\n        </motion.div>\n    )\n}",".el{\n  border-top: 1px solid white;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n  perspective: 80vw;\n  transform-origin: top;\n  &:last-of-type{\n      border-bottom: 1px solid white;\n  }\n  a, p{\n      color: white;\n      text-transform: uppercase;\n      font-size: 8vw;\n      line-height: 8.2vw;\n      font-weight: 400;\n      margin: 0px;\n      text-decoration: none;\n  }\n}"],languages:["jsx","css"],highlights:[[11,12,13]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple of notes about the code:"}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The link is animated using the ",(0,a.jsx)("code",{className:"language-jsx",children:"rotateX(90deg)"}),", ",(0,a.jsx)("code",{className:"language-jsx",children:"perspective: 80vw"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"transform-origin: top"}),". The delay is created with the custom attribute and the index."]})})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sliding-stairs-menu/video3.mov"}),(0,a.jsx)("h2",{children:"The Slider Component"}),(0,a.jsx)("p",{children:"The slider component is definitely the hardest part of this tutorial. It's composed of two main animations"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"The sliding animation:"})," made with simple CSS"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"The hover animation:"})," made using useAnimation from Framer Motion."]})]}),(0,a.jsx)("p",{children:"We can modify the previous Link component that we had and add the slider:"}),(0,a.jsx)(g.Z,{titles:["Link/index.jsx","Link/style.module.css"],codes:["...\nimport { motion, useAnimate } from 'framer-motion';\nimport Image from 'next/image';\nimport { useRef } from 'react';\nimport Link from 'next/link';\n\nexport default function link({data, index}) {\n    const { title, description, images } = data;\n    const [scope, animate] = useAnimate();\n    const outer = useRef(null);\n    const inner = useRef(null);\n\n    const animateIn = async (e) => {\n        const bounds = e.target.getBoundingClientRect();\n        const direction = e.clientY < bounds.top + (bounds.height / 2) ? -1 : 1;\n\n        await animate(outer.current, {top: `${direction * 100}%`}, {duration:0})\n        await animate(inner.current, {top: `${-1 * direction * 100}%`}, {duration:0})\n\n        animate([outer.current, inner.current], {top: \"0%\"}, {duration:0.3})\n    }\n\n    const animateOut = (e) => {\n        const bounds = e.target.getBoundingClientRect();\n        const direction = e.clientY < bounds.top + (bounds.height / 2) ? -1 : 1;\n\n        animate(outer.current, {top: `${direction * 100}%`}, {duration:0.3})\n        animate(inner.current, {top: `${-1 * direction * 100}%`}, {duration:0.3})\n    }\n\n    return (\n        <motion.div \n          ...\n          onMouseEnter={ (e) => {animateIn(e)}} \n          onMouseLeave={(e) => {animateOut(e)}} \n          ref={scope}\n          >\n            <Link href=\"/\">{title}</Link>\n            <div ref={outer} className={styles.outer}>\n                <div ref={inner} className={styles.inner}>\n                    {\n                        [...Array(2)].map( (_, index) => {\n                        return <SliderContent key={index} images={images} description={description}/>\n                        })\n                    }\n                </div>\n            </div>\n        </motion.div>\n    )\n}\n\nconst SliderContent = ({images, description}) => {\n    return <div className={styles.container}>\n        <div className={styles.imageContainer}>\n            <Image \n                src={`/images/${images[0]}`}\n                fill\n                alt=\"image\"\n            />\n        </div>\n        <p>{description}</p>\n        <div className={styles.imageContainer}>\n            <Image \n                src={`/images/${images[1]}`}\n                fill\n                alt=\"image\"\n            />\n        </div>\n        <p>{description}</p>\n    </div>\n}","...\n  .outer{\n      display: flex;\n      position: absolute;\n      height: 100%;\n      width: 100%;\n      overflow: hidden;\n      pointer-events: none;\n      .inner{\n          background-color: #D3FD50;\n          position: absolute;\n          white-space: nowrap;\n          height: 100%;\n          top: 100%;\n          display: flex;\n          .container{\n              display: flex;\n              align-items: center;\n              animation: slider 12s linear infinite;\n              transition: opacity 0.3s;\n              position: relative;\n              opacity: 0;\n              \n              &:nth-of-type(2){\n                  transition-delay: -4s;\n\n              }\n              &:nth-of-type(3){\n                  transition-delay: -6s;\n              }\n              .imageContainer{\n                  height: 6vw;\n                  width: 16vw;\n                  position: relative;\n                  overflow: hidden;\n                  border-radius: 3vw;\n                  margin-left: 1vw;\n                  margin-right: 1vw;\n                  display: flex;\n                  img{\n                      object-fit: cover;\n                  }\n              }\n              p{\n                  color: black;\n              }\n          }\n      }\n      .background{\n          background-color: #D3FD50;\n          position: absolute;\n          height: 100%;\n          width: 100%;\n          top: 100%;\n      }\n  }\n  &:hover{\n      .outer{\n          .container{\n              opacity: 1;a\n          }\n      }\n  }\n}\n\n@keyframes slider{\n  from {\n      transform: translate3d(0, 0, 0);\n  }\n  to {\n      transform: translate3d(-100%, 0, 0);\n  }\n}\n"],languages:["jsx","css"],highlights:[[13,24],[66]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 66 (CSS):"})," The infinite sliding is made with pure CSS."]}),(0,a.jsxs)("li",{children:["For the background animation, it's quite complicated. Essentially, we move two divs to the same position but coming from opposite directions. We use the ",(0,a.jsx)("code",{className:"language-jsx",children:"useAnimate()"})," from Framer motion to create imperative animations."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Animate In:"})," When we hover the main container, we check if the mouse comes from the top or the bottom of it. That way, we can immediately (duration: 0s) place the outer and inner div at a certain position. We then animate (duration: 0.3s) both of them to ",(0,a.jsx)("code",{className:"language-jsx",children:"top:0%"})]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Animate Out:"})," When we hover out of the main container, we check if we are leaving from the top or the bottom of it. We then animate the outer and inner div depending on that."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sliding-stairs-menu/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"Insane menu made quite easily with Framer Motion and CSS! I was quite shook to see how we can animate two divs at the same time to create this effect. Almost feels like a glitch. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function parallax_scroll_slider_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Lenis Scroll for the smooth scroll, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animations, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("p",{children:"The first thing we can do is do the overall layout. The Layout be structured as such:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Spacer"}),(0,a.jsx)("li",{children:"Gallery"}),(0,a.jsx)("p",{children:"Spacer"})]}),(0,a.jsx)("p",{children:"Two spacers are added on top and at the end of the gallery simply to visualize the parallax."}),(0,a.jsx)(g.Z,{titles:["Page.js","page.module.scss"],codes:['\'use client\';\nimport { useEffect } from \'react\';\nimport styles from \'./page.module.scss\'\nimport Image from \'next/image\';\nimport Lenis from \'@studio-freight/lenis\'\n\nconst images = [\n  "1.jpg",\n  "2.jpg",\n  "3.jpg",\n  "4.jpg",\n  "5.jpg",\n  "6.jpg",\n  "7.jpg",\n  "8.jpg",\n  "9.jpg",\n  "10.jpg",\n  "11.jpg",\n  "12.jpg",\n]\n\nexport default function Home() {\n  \n  useEffect( () => {\n    const lenis = new Lenis()\n\n    const raf = (time) => {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n  }, [])\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.spacer}></div>\n      <div className={styles.gallery}>\n        <div className={styles.galleryWrapper}>\n          <Column images={[images[0], images[1], images[2]]}/>\n          <Column images={[images[3], images[4], images[5]]}/>\n          <Column images={[images[6], images[7], images[8]]}/>\n          <Column images={[images[9], images[10], images[11]]}/>\n        </div>\n      </div>\n      <div className={styles.spacer}></div>\n    </main>\n  )\n}\n\nconst Column = ({images}) => {\n  return (\n    <div \n      className={styles.column}\n      >\n      {\n        images.map( (src, i) => {\n          return <div key={i} className={styles.imageContainer}>\n            <Image \n              src={`/images/${src}`}\n              alt=\'image\'\n              fill\n            />\n          </div>\n        })\n      }\n    </div>\n  )\n}',".gallery{\n    height: 175vh;\n    overflow: hidden;\n    background: rgb(45, 45, 45);\n    .galleryWrapper{\n        position: relative;\n        top: -12.5vh;\n        height: 200vh;\n        display: flex;\n        gap: 2vw;\n        padding: 2vw;\n        .column{\n            position: relative;\n            height: 100%;\n            width: 25%;\n            min-width: 250px;\n            display: flex;\n            flex-direction: column;\n            gap: 2vw;\n            white-space: nowrap;\n            .imageContainer{\n                position: absolute;\n                height: 33%;\n                width: 100%;\n                position: relative;\n                border-radius: 1vw;\n                overflow: hidden;\n                img{\n                    object-fit: cover;\n                }\n            }\n        }\n    }\n}\n.spacer{\n    height: 100vh;\n}"],languages:["jsx","scss"],highlights:[[24],[7,8]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the above code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 24:"})," We set the smooth scroll with Lenis Scroll"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 7-8 (CSS)"})," We make the gallery wrapper bigger than it's parent to have an initial overlap on the images."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/parallax-scroll-slider/video1.mov"}),(0,a.jsx)("h2",{children:"Adding the Parallax"}),(0,a.jsx)("p",{children:"To create the parallax, we will use two hooks from the Framer Motion library:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useScroll:"})," is used to track the progression of the scroll"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useTransform:"})," is used to transform the value of the progression of the scroll [0,1] into new values that will be used for the parallax"]})]}),(0,a.jsx)(x.Z,{title:"useScroll Hook",code:"const { scrollYProgress } = useScroll({\n    target: gallery,\n    offset: ['start end', 'end start']\n})",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Offset:"})," The tracker starts at ",(0,a.jsx)("code",{className:"language-jsx",children:"['start end']"})," the start of the target and the end of the window and ends at ",(0,a.jsx)("code",{className:"language-jsx",children:"['end start']"})," the end of the target and the start of the window."]})}),(0,a.jsx)(x.Z,{title:"useTransform Hook",code:"const y = useTransform(scrollYProgress, [0, 1], [0, height * 2])\nconst y2 = useTransform(scrollYProgress, [0, 1], [0, height * 3.3])\nconst y3 = useTransform(scrollYProgress, [0, 1], [0, height * 1.25])\nconst y4 = useTransform(scrollYProgress, [0, 1], [0, height * 3])",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Height is the height of the window."}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 1:"})," The range ",(0,a.jsx)("code",{className:"language-jsx",children:"[0, 1]"})," is transformed into ",(0,a.jsx)("code",{className:"language-jsx",children:"[0, height * 2]"})," and stored into a ",(0,a.jsx)("code",{className:"language-jsx",children:"const y"})]}),(0,a.jsxs)("li",{children:["Four ",(0,a.jsx)("code",{className:"language-jsx",children:"y"})," values are created (for the 4 columns of images). These values will be added to the style of the columns in order to translate them on the Y axis depending the progress of the scroll"]})]})}),(0,a.jsx)("p",{children:"Putting everything together:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["'use client';\nimport { useEffect, useRef, useState } from 'react';\nimport { useTransform, useScroll, motion } from 'framer-motion';\n...\n\nexport default function Home() {\n  \n  const gallery = useRef(null);\n  const [dimension, setDimension] = useState({width:0, height:0});\n\n  const { scrollYProgress } = useScroll({\n    target: gallery,\n    offset: ['start end', 'end start']\n  })\n  const { height } = dimension;\n  const y = useTransform(scrollYProgress, [0, 1], [0, height * 2])\n  const y2 = useTransform(scrollYProgress, [0, 1], [0, height * 3.3])\n  const y3 = useTransform(scrollYProgress, [0, 1], [0, height * 1.25])\n  const y4 = useTransform(scrollYProgress, [0, 1], [0, height * 3])\n\n  useEffect( () => {\n    ...\n\n    const resize = () => {\n      setDimension({width: window.innerWidth, height: window.innerHeight})\n    }\n\n    window.addEventListener(\"resize\", resize)\n    requestAnimationFrame(raf);\n    resize();\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    }\n  }, [])\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.spacer}></div>\n      <div ref={gallery} className={styles.gallery}>\n        <div className={styles.galleryWrapper}>\n          <Column ... y={y}/>\n          <Column ... y={y2}/>\n          <Column ... y={y3}/>\n          <Column ... y={y4}/>\n        </div>\n      </div>\n      <div className={styles.spacer}></div>\n    </main>\n  )\n}\n\nconst Column = ({images, y}) => {\n  return (\n    <motion.div \n      className={styles.column}\n      style={{y}}\n      >\n      ...\n    </motion.div>\n  )\n}",".gallery{\n    ...\n    .galleryWrapper{\n        ...\n        .column{\n            ...\n            &:nth-of-type(1){\n                top: -30%;\n            }\n            &:nth-of-type(2){\n                top: -70%;\n            }\n            &:nth-of-type(3){\n                top: -30%;\n            }\n            &:nth-of-type(4){\n                top: -60%;\n            }\n        }\n    }\n}"],languages:["jsx","scss"],highlights:[[11,12,13,14,16,17,18,19,42,43,44,45,46,57],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 42:"})," The y values are given to the Column components to create the parallax effect."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"CSS:"})," The .column are moved to have the desired layout combined with the y movement."]})]})]}),(0,a.jsx)("h3",{children:"We should have the final result:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/parallax-scroll-slider/video.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"Insane animation that's actually quite nice for a project presentation. Relatively easy to do with Framer Motion with the hooks provided by the library. Hope you learned something."}),(0,a.jsx)("p",{children:"-Oli"})]})}function svg_mask_scroll_index(){return(0,a.jsx)("div",{className:"blog"})}function magnetic_button_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will also use GSAP for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i gsap"}),"."]})]})}),(0,a.jsx)("p",{children:"There's a lot of questions about using GSAP vs Framer Motion, so in this tutorial, we'll see the difference between imperative and declarative animations."}),(0,a.jsx)("h3",{children:"Then we can adding the basic layout:"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:['\'use client\';\nimport styles from \'./page.module.scss\'\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n      <p>Made with GSAP:</p>\n      <div className={styles.container}>\n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 31.5 58">\n            <path d="m20.72,22.16c2.77,0,5.55.02,8.32.03.4,0,.8.02,1.2.03.07.06.14.13.21.19-.28,1.58-.56,3.16-.83,4.75-.32,1.87-.64,3.74-.99,5.76-1.37.13-2.76-.07-4.14-.04-1.36.03-2.72,0-4.2,0-.13,8.38.12,16.72.11,25.11h-11.17v-24.91H0v-10.81h9.16c.04-.39.11-.71.11-1.02-.01-1.58-.05-3.17-.06-4.75-.01-1.62-.16-3.26.02-4.85.19-1.69.64-3.35,1.52-4.86,1.36-2.33,3.28-4.06,5.58-5.4,1.39-.81,2.94-1.25,4.52-1.3C24.28-.03,27.71.02,31.15,0c.07,0,.13.05.35.14.04,3.3-.29,6.66-.18,10.11-1.13,0-2.15.03-3.17,0-1.57-.07-3.15-.06-4.65.46-1.42.49-2.46,1.4-2.89,2.95-.3,1.08-.36,2.16-.34,3.25.04,1.69.13,3.38.2,5.07.08.06.16.13.24.19Z"/>\n          </svg>\n          \n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56.13 46.08">\n            <path d="m0,41.47c3.69-.34,7.11-.82,10.38-1.89,2.05-.67,4.03-1.62,5.71-3.35-.55-.18-1.03-.38-1.53-.48-2.77-.58-5.26-1.64-7-4-.72-.98-1.33-2.03-2.03-3.1,1.23-.3,2.43-.59,3.81-.93-.91-.56-1.7-1.08-2.52-1.53-2.08-1.13-3.73-2.68-4.6-4.91-.37-.95-.52-1.98-.77-2.98-.11-.43-.19-.86-.3-1.33,1.42.02,2.71.63,4.2.28-.72-1.12-1.37-2.17-2.06-3.2-1.78-2.65-2.05-5.51-1.29-8.54.23-.91.43-1.84.69-2.95.78.63,1.4,1.05,1.94,1.56,2.42,2.28,5.16,4.11,8.01,5.83,2.36,1.43,4.89,2.38,7.49,3.17,1.99.61,4.06.96,6.33.91.02-.67.06-1.3.07-1.92.05-2.38.81-4.54,1.99-6.57,1.71-2.92,4.43-4.39,7.56-5.26,1.39-.39,2.76-.3,4.22-.14,2.64.29,4.8,1.52,6.96,2.82.49.3.86.38,1.4.19,1.21-.43,2.43-.83,3.67-1.19.49-.15,1.02-.18,1.84-.31-1.11,1.79-2.05,3.3-3,4.82,1.65.08,3.16-.84,4.97-.57-.86,1.35-1.83,2.42-2.78,3.52-.78.91-1.81,1.7-2.04,2.98-.25,1.43-.63,2.83-.75,4.31-.14,1.7-.6,3.37-.96,5.05-.14.64-.37,1.25-.58,1.87-1.35,3.9-3.27,7.44-5.93,10.64-2.96,3.55-6.42,6.42-10.55,8.47-2.84,1.4-5.83,2.42-8.95,2.97-2.6.45-5.24.39-7.87.33-2.95-.07-5.78-.69-8.6-1.52-2.27-.67-4.39-1.61-6.51-2.61-.14-.07-.26-.18-.61-.44Z"/>\n          </svg>\n          \n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 51.1 36.69">\n            <path d="m26.22,36.56c-4.74,0-9.49,0-14.23,0-3.93,0-7.19-1.49-9.63-4.58-1.02-1.29-1.66-2.82-2.03-4.45-.28-1.25-.28-2.52-.29-3.78C.03,19.98,0,16.21,0,12.44c0-1.06,0-2.13.18-3.17.2-1.09.59-2.15,1.16-3.13C2.75,3.73,4.77,1.97,7.28.79c.85-.4,1.78-.61,2.74-.63,2.02-.04,4.04-.21,6.06-.14,7.73.27,15.47.02,23.2.14,1.97.03,3.89.43,5.62,1.33,2.23,1.16,3.98,2.81,4.91,5.25.52,1.36.76,2.72.93,4.16.56,4.65.3,9.32.27,13.98-.02,2.7-.92,5.16-2.63,7.27-1.73,2.15-3.95,3.62-6.68,4.08-1.8.31-3.64.39-5.47.43-3.34.06-6.68.02-10.02.02,0-.04,0-.07,0-.11Zm7.94-18.51c-4.62-2.62-9.12-5.17-13.62-7.71-.12-.07-.29-.07-.4-.1v16.33c4.78-2.84,9.41-5.56,14.03-8.52Z"/>\n          </svg>\n\n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 47.26 53.87">\n            <path d="m34.27,18.6c0,4.82,0,9.64.03,14.47.01,2.53-.24,5.01-.67,7.5-.68,3.88-2.69,6.84-5.66,9.33-2.21,1.86-4.72,2.98-7.48,3.6-1.02.23-2.09.29-3.14.34-3.54.18-6.73-.93-9.64-2.84-2.68-1.76-4.74-4.12-6.12-7.05-.74-1.58-1.16-3.26-1.51-4.94-.2-.98,0-2.04-.02-3.06-.07-3.01,1.1-5.62,2.62-8.11,2.19-3.6,5.35-5.98,9.35-7.26,1.24-.4,2.51-.7,3.84-.66.33.01.66-.13.99-.14.83-.02,1.65,0,2.58,0v9.31c-.27,0-.55-.01-.84,0-1.06.05-2.13.05-3.18.18-2.4.29-3.92,1.83-5.15,3.74-1.77,2.78-.84,7.04,1.38,9.35,2.28,2.38,6.05,2.67,8.72,1.48.6-.27,1.18-.6,1.73-.98,1.45-1.01,2.12-2.51,2.39-4.17.62-3.94.33-7.92.36-11.89.05-7.97,0-15.95,0-23.92,0-.87,0-1.74,0-2.72,3.08-.25,6.11-.14,9.16-.19.91,7.84,5.41,12.08,13.22,13.34-.07,2.84.22,5.85-.25,8.97-4.44-.24-8.48-1.55-12.25-3.76-.11-.11-.22-.22-.33-.33-.05.13-.09.25-.14.38Z"/>\n          </svg>\n      </div>\n      <p>Made with Framer Motion:</p>\n      <div className={styles.container}>\n         <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 31.5 58">\n            <path d="m20.72,22.16c2.77,0,5.55.02,8.32.03.4,0,.8.02,1.2.03.07.06.14.13.21.19-.28,1.58-.56,3.16-.83,4.75-.32,1.87-.64,3.74-.99,5.76-1.37.13-2.76-.07-4.14-.04-1.36.03-2.72,0-4.2,0-.13,8.38.12,16.72.11,25.11h-11.17v-24.91H0v-10.81h9.16c.04-.39.11-.71.11-1.02-.01-1.58-.05-3.17-.06-4.75-.01-1.62-.16-3.26.02-4.85.19-1.69.64-3.35,1.52-4.86,1.36-2.33,3.28-4.06,5.58-5.4,1.39-.81,2.94-1.25,4.52-1.3C24.28-.03,27.71.02,31.15,0c.07,0,.13.05.35.14.04,3.3-.29,6.66-.18,10.11-1.13,0-2.15.03-3.17,0-1.57-.07-3.15-.06-4.65.46-1.42.49-2.46,1.4-2.89,2.95-.3,1.08-.36,2.16-.34,3.25.04,1.69.13,3.38.2,5.07.08.06.16.13.24.19Z"/>\n          </svg>\n          \n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56.13 46.08">\n            <path d="m0,41.47c3.69-.34,7.11-.82,10.38-1.89,2.05-.67,4.03-1.62,5.71-3.35-.55-.18-1.03-.38-1.53-.48-2.77-.58-5.26-1.64-7-4-.72-.98-1.33-2.03-2.03-3.1,1.23-.3,2.43-.59,3.81-.93-.91-.56-1.7-1.08-2.52-1.53-2.08-1.13-3.73-2.68-4.6-4.91-.37-.95-.52-1.98-.77-2.98-.11-.43-.19-.86-.3-1.33,1.42.02,2.71.63,4.2.28-.72-1.12-1.37-2.17-2.06-3.2-1.78-2.65-2.05-5.51-1.29-8.54.23-.91.43-1.84.69-2.95.78.63,1.4,1.05,1.94,1.56,2.42,2.28,5.16,4.11,8.01,5.83,2.36,1.43,4.89,2.38,7.49,3.17,1.99.61,4.06.96,6.33.91.02-.67.06-1.3.07-1.92.05-2.38.81-4.54,1.99-6.57,1.71-2.92,4.43-4.39,7.56-5.26,1.39-.39,2.76-.3,4.22-.14,2.64.29,4.8,1.52,6.96,2.82.49.3.86.38,1.4.19,1.21-.43,2.43-.83,3.67-1.19.49-.15,1.02-.18,1.84-.31-1.11,1.79-2.05,3.3-3,4.82,1.65.08,3.16-.84,4.97-.57-.86,1.35-1.83,2.42-2.78,3.52-.78.91-1.81,1.7-2.04,2.98-.25,1.43-.63,2.83-.75,4.31-.14,1.7-.6,3.37-.96,5.05-.14.64-.37,1.25-.58,1.87-1.35,3.9-3.27,7.44-5.93,10.64-2.96,3.55-6.42,6.42-10.55,8.47-2.84,1.4-5.83,2.42-8.95,2.97-2.6.45-5.24.39-7.87.33-2.95-.07-5.78-.69-8.6-1.52-2.27-.67-4.39-1.61-6.51-2.61-.14-.07-.26-.18-.61-.44Z"/>\n          </svg>\n          \n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 51.1 36.69">\n            <path d="m26.22,36.56c-4.74,0-9.49,0-14.23,0-3.93,0-7.19-1.49-9.63-4.58-1.02-1.29-1.66-2.82-2.03-4.45-.28-1.25-.28-2.52-.29-3.78C.03,19.98,0,16.21,0,12.44c0-1.06,0-2.13.18-3.17.2-1.09.59-2.15,1.16-3.13C2.75,3.73,4.77,1.97,7.28.79c.85-.4,1.78-.61,2.74-.63,2.02-.04,4.04-.21,6.06-.14,7.73.27,15.47.02,23.2.14,1.97.03,3.89.43,5.62,1.33,2.23,1.16,3.98,2.81,4.91,5.25.52,1.36.76,2.72.93,4.16.56,4.65.3,9.32.27,13.98-.02,2.7-.92,5.16-2.63,7.27-1.73,2.15-3.95,3.62-6.68,4.08-1.8.31-3.64.39-5.47.43-3.34.06-6.68.02-10.02.02,0-.04,0-.07,0-.11Zm7.94-18.51c-4.62-2.62-9.12-5.17-13.62-7.71-.12-.07-.29-.07-.4-.1v16.33c4.78-2.84,9.41-5.56,14.03-8.52Z"/>\n          </svg>\n\n          <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 47.26 53.87">\n            <path d="m34.27,18.6c0,4.82,0,9.64.03,14.47.01,2.53-.24,5.01-.67,7.5-.68,3.88-2.69,6.84-5.66,9.33-2.21,1.86-4.72,2.98-7.48,3.6-1.02.23-2.09.29-3.14.34-3.54.18-6.73-.93-9.64-2.84-2.68-1.76-4.74-4.12-6.12-7.05-.74-1.58-1.16-3.26-1.51-4.94-.2-.98,0-2.04-.02-3.06-.07-3.01,1.1-5.62,2.62-8.11,2.19-3.6,5.35-5.98,9.35-7.26,1.24-.4,2.51-.7,3.84-.66.33.01.66-.13.99-.14.83-.02,1.65,0,2.58,0v9.31c-.27,0-.55-.01-.84,0-1.06.05-2.13.05-3.18.18-2.4.29-3.92,1.83-5.15,3.74-1.77,2.78-.84,7.04,1.38,9.35,2.28,2.38,6.05,2.67,8.72,1.48.6-.27,1.18-.6,1.73-.98,1.45-1.01,2.12-2.51,2.39-4.17.62-3.94.33-7.92.36-11.89.05-7.97,0-15.95,0-23.92,0-.87,0-1.74,0-2.72,3.08-.25,6.11-.14,9.16-.19.91,7.84,5.41,12.08,13.22,13.34-.07,2.84.22,5.85-.25,8.97-4.44-.24-8.48-1.55-12.25-3.76-.11-.11-.22-.22-.33-.33-.05.13-.09.25-.14.38Z"/>\n          </svg>\n      </div>\n    </main>\n  )\n}',".main{\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #0f0f0f;\n  .container{\n      display: flex;\n      svg{\n          height: 50px;\n          padding: 50px;\n          fill: #c8bdb0;\n          transition: fill 0.2s;\n          cursor: pointer;\n          &:hover{\n              fill: #ec4e39;\n          }\n      }\n  }\n  p{\n      color:#494136;\n  }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/magnetic-button/video.mov"}),(0,a.jsx)("h2",{children:"GSAP Implementation"}),(0,a.jsxs)("p",{children:["For the GSAP implementation, we use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://greensock.com/docs/v3/GSAP/gsap.quickTo()#:~:text=Think%20of%20a%20quickTo(),Function%2Dbased%20values",children:"quickTo"})," method to move the cursor around. We also use the ",(0,a.jsx)("code",{className:"language-jsx",children:"React.cloneElement()"})," in order to return the children with a ref attached to it."]}),(0,a.jsx)(x.Z,{title:"gsap.jsx",code:'import React, { useEffect, useRef } from \'react\'\nimport gsap from \'gsap\';\n\nexport default function index({children}) {\n    const magnetic = useRef(null);\n\n    useEffect( () => {\n        const xTo = gsap.quickTo(magnetic.current, "x", {duration: 1, ease: "elastic.out(1, 0.3)"})\n        const yTo = gsap.quickTo(magnetic.current, "y", {duration: 1, ease: "elastic.out(1, 0.3)"})\n\n        const mouseMove = (e) => {\n            const { clientX, clientY } = e;\n            const {height, width, left, top} = magnetic.current.getBoundingClientRect();\n            const x = clientX - (left + width/2)\n            const y = clientY - (top + height/2)\n            xTo(x);\n            yTo(y)\n        }\n\n        const mouseLeave = (e) => {\n            gsap.to(magnetic.current, {x: 0, duration: 1})\n            gsap.to(magnetic.current, {y: 0, duration: 1})\n            xTo(0);\n            yTo(0)\n        }\n\n        magnetic.current.addEventListener("mousemove", mouseMove)\n        magnetic.current.addEventListener("mouseleave", mouseLeave)\n\n        return () => {\n            magnetic.current.removeEventListener("mousemove", mouseMove)\n            magnetic.current.removeEventListener("mouseleave", mouseLeave)\n        }\n    }, [])\n\n    return (\n        React.cloneElement(children, {ref:magnetic})\n    )\n}',language:"jsx"}),(0,a.jsx)("p",{children:"Then we can wrap the SVG's inside the component:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'<MagneticGSAP>\n  <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 31.5 58">\n    <path d="m20.72,22.16c2.77,0,5.55.02,8.32.03.4,0,.8.02,1.2.03.07.06.14.13.21.19-.28,1.58-.56,3.16-.83,4.75-.32,1.87-.64,3.74-.99,5.76-1.37.13-2.76-.07-4.14-.04-1.36.03-2.72,0-4.2,0-.13,8.38.12,16.72.11,25.11h-11.17v-24.91H0v-10.81h9.16c.04-.39.11-.71.11-1.02-.01-1.58-.05-3.17-.06-4.75-.01-1.62-.16-3.26.02-4.85.19-1.69.64-3.35,1.52-4.86,1.36-2.33,3.28-4.06,5.58-5.4,1.39-.81,2.94-1.25,4.52-1.3C24.28-.03,27.71.02,31.15,0c.07,0,.13.05.35.14.04,3.3-.29,6.66-.18,10.11-1.13,0-2.15.03-3.17,0-1.57-.07-3.15-.06-4.65.46-1.42.49-2.46,1.4-2.89,2.95-.3,1.08-.36,2.16-.34,3.25.04,1.69.13,3.38.2,5.07.08.06.16.13.24.19Z"/>\n  </svg>\n</MagneticGSAP>',language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/magnetic-button/video1.mov"}),(0,a.jsx)("h2",{children:"Framer Motion Implementation"}),(0,a.jsxs)("p",{children:["For Framer Motion, I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"setState()"})," hook with the ",(0,a.jsx)("code",{className:"language-jsx",children:"motion"})," tag from Framer Motion."]}),(0,a.jsx)(x.Z,{title:"framer.jsx",code:"import { useRef, useState } from 'react'\nimport { motion } from 'framer-motion';\n\nexport default function Framer({children}) {\n    const ref = useRef(null);\n    const [position, setPosition] = useState({x:0,y:0});\n\n    const handleMouse = (e) => {\n        const { clientX, clientY } = e;\n        const {height, width, left, top} = ref.current.getBoundingClientRect();\n        const middleX = clientX - (left + width/2)\n        const middleY = clientY - (top + height/2)\n        setPosition({x: middleX, y: middleY})\n    }\n\n    const reset = () => {\n        setPosition({x:0, y:0})\n    }\n\n    const { x, y } = position;\n    return (\n        <motion.div\n            style={{position: \"relative\"}}\n            ref={ref}\n            onMouseMove={handleMouse}\n            onMouseLeave={reset}\n            animate={{x, y}}\n            transition={{type: \"spring\", stiffness: 150, damping: 15, mass: 0.1}}\n        >\n            {children}\n        </motion.div>\n    )\n}",language:"jsx"}),(0,a.jsx)("p",{children:"Then we can wrap the SVG's inside the component:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'<MagneticFramer>\n  <svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 31.5 58">\n      <path d="m20.72,22.16c2.77,0,5.55.02,8.32.03.4,0,.8.02,1.2.03.07.06.14.13.21.19-.28,1.58-.56,3.16-.83,4.75-.32,1.87-.64,3.74-.99,5.76-1.37.13-2.76-.07-4.14-.04-1.36.03-2.72,0-4.2,0-.13,8.38.12,16.72.11,25.11h-11.17v-24.91H0v-10.81h9.16c.04-.39.11-.71.11-1.02-.01-1.58-.05-3.17-.06-4.75-.01-1.62-.16-3.26.02-4.85.19-1.69.64-3.35,1.52-4.86,1.36-2.33,3.28-4.06,5.58-5.4,1.39-.81,2.94-1.25,4.52-1.3C24.28-.03,27.71.02,31.15,0c.07,0,.13.05.35.14.04,3.3-.29,6.66-.18,10.11-1.13,0-2.15.03-3.17,0-1.57-.07-3.15-.06-4.65.46-1.42.49-2.46,1.4-2.89,2.95-.3,1.08-.36,2.16-.34,3.25.04,1.69.13,3.38.2,5.07.08.06.16.13.24.19Z"/>\n  </svg>\n</MagneticFramer>',language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/magnetic-button/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"We saw how we can create a Magnetic Effect using two distinct animation library. Hope you learned more about the difference between imperative and declarative animations."}),(0,a.jsx)("p",{children:"-Oli"})]})}function split_vignette_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use Lenis Scroll for the smooth scroll, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]})]})}),(0,a.jsx)("h3",{children:"Page Component"}),(0,a.jsxs)("p",{children:["Here I use an array of projects to return a bunch of Gallery Component. I also use the ",(0,a.jsx)(d(),{href:"https://github.com/studio-freight/lenis",target:"_blank",children:"Lenis Scroll"})," to add a smooth scroll to the page."]}),(0,a.jsx)(x.Z,{title:"page.js",code:'\'use client\';\nimport styles from \'./page.module.css\'\nimport Gallery from \'../components/gallery\';\nimport { useEffect } from \'react\';\nimport Lenis from \'@studio-freight/lenis\';\n\nconst projects = [\n  {\n    name: "Dyal Thak",\n    handle: "dyal_thak"\n  },\n  {\n    name: "Leidinger Matthias",\n    handle: "leidinger_matthias"\n  },\n  {\n    name: "Mark Rammers",\n    handle: "mark_rammers"\n  },\n  {\n    name: "Landon Speers",\n    handle: "landon_speers"\n  }\n]\n\nexport default function Home() {\n\n  useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n    \n    requestAnimationFrame(raf)\n  }, [])\n\n  return (\n     <main className={styles.main}>\n      {\n        projects.map( ({handle}, i) => {\n          return <Gallery handle={handle} key={i}/>\n        })\n      }\n      {/* <Description projects={projects}/> */}\n    </main>\n  )\n}',language:"jsx"}),(0,a.jsx)("h2",{children:"Gallery Component"}),(0,a.jsx)("p",{children:"The Gallery Component is a simple component that has two elements:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"A background image"}),(0,a.jsx)("li",{children:"A vignette"})]}),(0,a.jsx)("p",{children:"It's important to note that the vignette is cropped withing its container by using the clip-path css value."}),(0,a.jsxs)("p",{children:["We cannot use the ",(0,a.jsx)("code",{className:"language-jsx",children:"overflow:hidden"})," since the vignette is in position fixed, which makes it relative to the window and not its parent."]}),(0,a.jsx)(g.Z,{titles:["gallery/index.jsx","gallery/style.module.scss"],codes:["import styles from './style.module.scss'\nimport Image from 'next/image';\n\nexport default function index({handle}) {\n\n  return (\n    <div className={styles.gallery}>\n        <div className={styles.imageContainer}>\n            <Image \n                src={`/images/${handle}/background.jpg`}\n                alt=\"image\"\n                fill\n            />\n        </div>\n        <div className={styles.vignette}>\n          <Image \n            src={`/images/${handle}/1.jpg`}\n            alt=\"image\"\n            fill\n          />\n        </div>\n    </div>\n  )\n}",".gallery{\n    height: 120vh;\n    clip-path: polygon(0 0, 0 100%, 100% 100%, 100% 0);\n    .imageContainer{\n        width: 100%;\n        height: 100%;\n        position: relative;\n\n        img{\n            width: 100%;\n            object-fit: cover;\n        }\n    }\n    .vignette{\n        height: 30vw;\n        width: 25vw;\n        position: fixed;\n        top: 0;\n        border-radius: 1.5vw;\n        overflow: hidden;\n        img{\n            width: 100%;\n            object-fit: cover;\n        }\n    }\n}"],languages:["jsx","scss"],highlights:[[],[3]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code:"}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 3 (CSS):"})," The clip-path is used to clip the image even tho they are in position fixed."]})})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/split-vignette/video.mov"}),(0,a.jsx)("h2",{children:"Adding Mouse Interactivity"}),(0,a.jsx)("p",{children:"For the mouse interactivity, we'll avoid using a state not to create too many re-renders on the Gallery Component."}),(0,a.jsxs)("p",{children:["Instead, we'll use the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/motionvalue/",target:"_blank",children:"Motion Values"})," from Framer Motion to store the x and y position of the mouse."]}),(0,a.jsxs)("p",{children:["I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"useSpring()"})," to add an easing on the animation (it returns a Motion Value)."]}),(0,a.jsx)(g.Z,{titles:["page.js","gallery/index.jsx"],codes:["...\n\nconst spring = {\n  stiffness: 150,\n  damping: 15,\n  mass: 0.1\n}\n\nconst mousePosition = {\n  x: useSpring(0, spring),\n  y: useSpring(0, spring)\n}\n\nconst mouseMove = (e) => {\n  const { clientX, clientY } = e;\n  const targetX = clientX - (window.innerWidth / 2 * 0.25);\n  const targetY = clientY - (window.innerWidth / 2 * 0.30);\n  mousePosition.x.set(targetX);\n  mousePosition.y.set(targetY);\n}\n\nreturn (\n   <main onMouseMove={mouseMove} className={styles.main}>\n    {\n      projects.map( ({handle}, i) => {\n        return <Gallery mousePosition={mousePosition} handle={handle} key={i}/>\n      })\n    }\n  ...\n    ","...\nimport { motion } from 'framer-motion';\n\nexport default function index({mousePosition, handle}) {\n    const { x, y } = mousePosition;\n\n    return (\n       ...\n            <motion.div\n                className={styles.vignette}\n                style={{x, y}}\n                >\n                <Image \n                    src={`/images/${handle}/1.jpg`}\n                    alt=\"image\"\n                    fill\n                />\n            </motion.div>\n       ...\n    )\n}"],languages:["jsx","jsx"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/split-vignette/video1.mov"}),(0,a.jsx)("h2",{children:"Description Component"}),(0,a.jsx)("p",{children:"The first thing I do is import inside the Page.js Component. I also give it the list of projects and the mouse position."}),(0,a.jsx)(x.Z,{title:"page.js",code:"import Description from '../components/description';\n...\n\nreturn (\n  <main onMouseMove={mouseMove} className={styles.main}>\n   ...\n   <Description mousePosition={mousePosition} projects={projects}/>\n </main>\n)\n}",language:"jsx"}),(0,a.jsx)("p",{children:"The Description Component has the same logic for its vignette, but this time we add an internal state that changes the image inside it when we hover the on paragraphs."}),(0,a.jsx)(g.Z,{titles:["description/index.jsx","description/style.module.scss"],codes:["import { useState } from 'react'\nimport styles from './style.module.scss';\nimport { motion } from 'framer-motion';\nimport Image from 'next/image';\n\nexport default function index({mousePosition, projects}) {\n  const [index, setIndex] = useState(0);\n  const {x, y} = mousePosition;\n\n  return (\n    <div className={styles.description}>\n        <div className={styles.descriptionContainer}>\n            {\n                projects.map( ({name}, i) => {\n                    return <p onMouseOver={() => {setIndex(i)}} key={`p${i}`}>\n                        {name}\n                    </p>\n                })\n            }\n        </div>\n         <motion.div\n         className={styles.vignette}\n         style={{x, y}}\n         >\n          <Image \n            src={`/images/${projects[index].handle}/about.jpg`}\n            alt=\"image\"\n            fill\n          />\n        </motion.div>\n    </div>\n  )\n}",".description{\n  height: 120vh;\n  clip-path: polygon(0 0, 0 100%, 100% 100%, 100% 0);\n  .descriptionContainer{\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      z-index: 1;\n      p{\n          font-size: 7vw;\n          cursor: default;\n          margin: 0px;\n          text-transform: uppercase;\n      }\n  }\n  .vignette{\n      height: 30vw;\n      width: 25vw;\n      position: fixed;\n      top: 0;\n      border-radius: 1.5vw;\n      overflow: hidden;\n      img{\n          width: 100%;\n          object-fit: cover;\n      }\n  }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/split-vignette/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Very useful to know that we can use Motion Values instead of a state when doing highly performance intensive animations like this one. Also the css clip-path is a nice trick to know."}),(0,a.jsx)("p",{children:"-Oli"})]})}function svg_morph_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use Flubber js for the SVG Morph, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i flubber"}),"."]})]})}),(0,a.jsx)("h3",{children:"Page Component"}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["import styles from './page.module.scss'\nimport Play from '../components/play';\nimport Smile from '../components/smile';\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n      <div className={styles.container}>\n         <Smile />\n        <Play />\n     </div>\n   </main>\n  )\n}",".main{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: rgb(31, 31, 31);\n    gap: 200px;\n\n    .container{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 200px;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"The Limitations when Morphing SVGs"}),(0,a.jsx)("p",{children:"If you delve in the world of SVG morphing, you'll soon realize how messy it is. The tech is just not there yet. There are a lot of limitations and lots of unexpected behaviors."}),(0,a.jsxs)("p",{children:["One thing to keep in mind is that ",(0,a.jsx)("b",{children:"morphing from an SVG to another SVG that both have the same amount of points is very easy to do"}),". You can use any libraries like Framer Motion, Animate.js or GSAP to do that. "]}),(0,a.jsxs)("p",{children:["However, I personally would like to morph any shape to another shape of my choice and that's where the limitation comes in. ",(0,a.jsx)("b",{children:"Once you start morphing two completely different shapes, you'll start having jumps, bugs and inversions."})," To fix that problem, some people have created an algorythm that will try to guess an interpolation between two shapes."]}),(0,a.jsxs)("p",{children:["Some of those libraries are ",(0,a.jsx)(d(),{target:"_blank",href:"https://greensock.com/morphsvg/",children:"GSAP"})," (not free) and ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/veltman/flubber",children:"Flubber.js"})," (I'll take a look at this library in this tutorial)."]}),(0,a.jsx)("h2",{children:"Preparing the SVGs"}),(0,a.jsx)("p",{children:"Here's how we can structure our SVGs to be able to morph them."}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-morph/1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsxs)("div",{style:{marginTop:"20px"},className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about exporting the SVG"})}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The SVG should be separated in singular shapes"}),(0,a.jsxs)("li",{children:["Each SVG item should be in the form of a ",(0,a.jsx)("code",{className:"language-jsx",children:"<path/>"})]})]})]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-morph/2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h3",{children:"Then we can extract the items in a JS file"}),(0,a.jsx)(x.Z,{title:"play/paths.js",code:'export const shape1 = "m0,0h53v178H0V0Z";\nexport const shape2 = "m91,0h53v178h-53V0Z";\nexport const shape1_morphed = "m70.45,134.74l-57.68,43.26V0l56.48,42.36,1.19,92.38Z";\nexport const shape2_morphed = "m65.52,39.56l67.58,49.44-67.58,49.44V39.56Z";',language:"js"}),(0,a.jsx)("h2",{children:"Morphing with Flubber.js"}),(0,a.jsx)(x.Z,{title:"Flubber.js Interpolate function",code:"var interpolator = flubber.interpolate(triangle, octagon);\n\ninterpolator(0); // returns an SVG triangle path string\ninterpolator(0.5); // returns something halfway between the triangle and the octagon\ninterpolator(1); // returns an SVG octagon path string",language:"js"}),(0,a.jsx)("p",{children:"I'll start with vanilla Flubber.js so we can understand what's happening before jumping with Framer Motion."}),(0,a.jsx)(g.Z,{titles:["play/index.jsx","play/style.module.scss"],codes:["import styles from './style.module.scss';\nimport { shape1, shape2, shape1_morphed, shape2_morphed } from './paths';\nimport SVGMorph from '../svgMorph';\n\nexport default function index() {\n    return (\n      <div className={styles.svgContainer}>\n        <svg className={styles.svg} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 144 178\">\n           <SVGMorph paths={[shape1, shape1_morphed, shape1]}/>\n          <SVGMorph paths={[shape2, shape2_morphed, shape2]}/>\n       </svg>\n     </div>\n    )\n  }",".svgContainer{\n    width: 15vw;\n    height: 15vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    .svg{\n        width: 100%;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsxs)("p",{children:["Here we start using the Flubber.js library. We use the ",(0,a.jsx)("code",{className:"language-jsx",children:"Interpolate"})," function to shift from one shape to another, we do so in a loop."]}),(0,a.jsx)(x.Z,{title:"svgMorph/index.jsx",code:"'use client';\nimport { interpolate } from 'flubber';\nimport React, { useState, useEffect, useRef } from 'react'\n\nexport default function SVGMorph({paths}) {\n\n    const [pathIndex, setPathIndex] = useState(0);\n    const path = useRef(null);\n\n    useEffect( () => {\n        setTimeout( () => {\n            const interpolator = interpolate(paths[pathIndex], paths[pathIndex + 1], {maxSegmentLength: 1});\n            const targetPath = interpolator(1);\n            path.current.setAttribute(\"d\", targetPath);\n\n            if(pathIndex === paths.length - 2){\n                setPathIndex(0);\n            }\n            else{\n                setPathIndex(pathIndex + 1)\n            }\n        }, 1000)\n    }, [pathIndex])\n  \n    return (\n      <path ref={path} fill=\"white\"/>\n    )\n}",language:"js",highlights:[12,13,14]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the above code"})}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"At every second, we interpolate from the first given shape to the second given shape and we loop the animation."})})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-morph/video1.mov"}),(0,a.jsx)("h2",{children:"Animating with Framer Motion"}),(0,a.jsx)("p",{children:"We were morphing from one shape to another without any easings, but can we fix that by using Framer Motion."}),(0,a.jsx)("p",{children:"We'll use a bunch of different methods from the library:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"motion"}),": we add a motion tag in front of the path to be able to animate it."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"animate"}),": an imperative method to animate a motionValue."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"useMotionValue"}),": a Framer Motion Object that contains a value that can be animated using the animate function."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"useTransform"}),": a method to transform a motionValue into another one."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"mixer"}),": a method to mix between each set of output value (we will use it with Flubber.js)"]})]}),(0,a.jsx)(x.Z,{title:"svgMorph/index.jsx",code:"'use client';\nimport { interpolate } from 'flubber';\nimport React, { useState, useEffect } from 'react'\nimport { motion, animate, useMotionValue, useTransform } from 'framer-motion';\n\nexport default function SVGMorph({paths}) {\n\n    const [pathIndex, setPathIndex] = useState(0);\n    const progress = useMotionValue(pathIndex);\n\n    const arrayOfIndex = paths.map( (_, i) => i )\n    const path = useTransform(progress, arrayOfIndex, paths, {\n      mixer: (a, b) => interpolate(a, b, {maxSegmentLength: 1})\n    })\n  \n    useEffect( () => {\n      const animation = animate(progress, pathIndex, {\n        duration: 0.4,\n        ease: \"easeInOut\",\n        delay: 0.5,\n        onComplete: () => {\n          if(pathIndex === paths.length - 1){\n            progress.set(0);\n            setPathIndex(1);\n          }\n          else{\n            setPathIndex(pathIndex + 1);\n          }\n        }\n      })\n      return () => {animation.stop()}\n    }, [pathIndex])\n  \n    return (\n      <motion.path fill=\"white\" d={path}/>\n    )\n}",language:"js"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 9"}),": We create a progress value that will range from 0 to 2 ",(0,a.jsx)("code",{className:"language-jsx",children:"(paths.length - 1)."})," I use it as the main value that will drive the animation, we animate the value with a certain ease with the animate function and use that value as the base value for the useTransform function."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 11-12-13"}),": We use the progress value to transform one path to the next. The mixer option is used in combination with the interpolate function from Flubber.js to morph the svgs. ",(0,a.jsx)("b",{children:"Note"}),", the mixer function will call the interpolate() function with a ",(0,a.jsx)("code",{className:"language-jsx",children:"p"})," value (0 to 1) which is equal to the progress of the mix and that result is returned in the ",(0,a.jsx)("code",{className:"language-jsx",children:"const path"}),"."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-morph/video2.mov"}),(0,a.jsx)("h2",{children:"Adding the smile"}),(0,a.jsx)("p",{children:"The smile is very similar to the play icon, but instead it has 3 morphing elements."}),(0,a.jsx)(g.Z,{titles:["smile/index.jsx","smile/paths.js"],codes:["import React from 'react'\nimport { head, smile, eye_l, eye_r, happy_smile, happy_eye_l, happy_eye_r } from './paths';\nimport styles from './style.module.scss';\nimport SVGMorph from '../svgMorph';\nexport default function index() {\n    return (\n      <div className={styles.svgContainer}>\n        <svg className={styles.svg} viewBox=\"0 0 192 192\">\n          <path d={head} fill=\"white\"/>\n          <SVGMorph paths={[smile, happy_smile, smile]}/>\n          <SVGMorph paths={[eye_l, happy_eye_l, eye_l]}/>\n          <SVGMorph paths={[eye_r, happy_eye_r, eye_r]}/>\n        </svg>\n      </div>\n    )\n  }",'export const head = "m96,0C42.98,0,0,42.98,0,96s42.98,96,96,96,96-42.98,96-96S149.02,0,96,0Zm0,181.71c-47.34,0-85.71-38.38-85.71-85.71S48.66,10.29,96,10.29s85.71,38.38,85.71,85.71-38.38,85.71-85.71,85.71Z";\n\nexport const happy_smile = "m96,152.43c-24.61,0-38.09-10.47-45.06-19.25-7.12-8.97-11.37-21.26-11.37-32.89h10c0,15.65,9.78,42.14,46.43,42.14,17.24,0,46.43-8.88,46.43-42.14h10c0,11.63-4.25,23.93-11.37,32.89-6.97,8.78-20.45,19.25-45.06,19.25Z";\n\nexport const happy_eye_l = "m80.43,72h-10c0-2.91-2.37-5.29-5.29-5.29s-5.29,2.37-5.29,5.29h-10c0-8.43,6.86-15.29,15.29-15.29s15.29,6.86,15.29,15.29Z";\n\nexport const happy_eye_r = "m142.14,72h-10c0-2.91-2.37-5.29-5.29-5.29s-5.29,2.37-5.29,5.29h-10c0-8.43,6.86-15.29,15.29-15.29s15.29,6.86,15.29,15.29Z";\n\nexport const smile = "m96,151.43c-31.08,0-55.43-14.93-55.43-34h8c0,14.09,21.72,26,47.43,26s47.43-11.91,47.43-26h8c0,19.07-24.35,34-55.43,34Z";\n\nexport const eye_l = "m75.43,85.71c0,5.68-4.61,10.29-10.29,10.29s-10.29-4.61-10.29-10.29,4.61-10.29,10.29-10.29,10.29,4.61,10.29,10.29Z";\n\nexport const eye_r = "m137.14,85.71c0,5.68-4.61,10.29-10.29,10.29s-10.29-4.61-10.29-10.29,4.61-10.29,10.29-10.29,10.29,4.61,10.29,10.29Z"'],languages:["jsx","js"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/svg-morph/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Flubber.js is a very powerful library and in combination with Framer Motion, it is possible to create all kinds of super fun interactivity. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function _3d_earth_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Setting up the page.js"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Sass"})," for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Lenis Scroll"})," for the smooth scroll, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion"})," for the animations, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion 3D"})," for the animations as well, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion-3d"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"React Three Fiber"})," for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/fiber"}),"."]})]})}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss","globals.css"],codes:["import styles from './page.module.scss'\nimport React from 'react';\nimport dynamic from 'next/dynamic';\n\nconst Earth = dynamic(() => import('@/components/earth'), {\n  ssr: false,\n  loading: () => <img src=\"/assets/placeholder.png\"></img>\n})\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n        <Earth />\n    </main>\n  )\n}",".main{\n    height: 60vw;\n    background-color: #0f0f0f;\n    margin-top: 100vh;\n    margin-bottom: 100vh;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    img{\n        height: 100%;\n    }\n}","body{\n    margin: 0px;\n    background-color: #0f0f0f;\n}"],languages:["jsx","scss","css"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," We can use the ",(0,a.jsx)("code",{className:"language-jsx",children:"dynamic"})," import to render an image while the ",(0,a.jsx)("code",{className:"language-jsx",children:"Earth"})," component is loading."]})}),(0,a.jsx)("h2",{children:"Creating the Earth"}),(0,a.jsx)("p",{children:"The earth will be a sphere mesh rendered by r3f."}),(0,a.jsx)("p",{children:"I will add 3 different textures to make it look good:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Color map:"})," The most common kind of texture map. It defines the color and pattern of the object."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Normal map:"})," A texture mapping technique used for faking the lighting of bumps and dents."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Occlusion map:"})," Greyscale image, with white indicating areas that should receive full indirect lighting, and black indicating no indirect lighting."]})]}),(0,a.jsx)("h3",{children:"Color Map"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-earth/color.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the Color"})}),(0,a.jsx)("h3",{children:"Normal Map"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-earth/normal.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the Normal"})}),(0,a.jsx)("h3",{children:"Occlusion Map"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-earth/occlusion.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the Occlusion"})}),(0,a.jsxs)("p",{children:["I also create a sphere with ",(0,a.jsx)("code",{className:"language-jsx",children:"args{[1, 64, 64]}"}),", which is the amount of ",(0,a.jsx)("code",{className:"language-jsx",children:"segmentHeight"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"segmentWidth"})," to make the sphere smooth."]}),(0,a.jsx)(x.Z,{title:"components/earth/index.jsx",code:"'use client';\nimport { Canvas, useLoader } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\n\nexport default function earth() {\n\n    const [color, normal, aoMap] = useLoader(TextureLoader, [\n        '/assets/color.jpg',\n        '/assets/normal.png',\n        '/assets/occlusion.jpg'\n    ])\n\n    return (\n        <Canvas>\n            <ambientLight intensity={0.1} />\n            <directionalLight intensity={3.5} position={[1, 0, -.25]} />\n            <mesh scale={2.5}>\n                <sphereGeometry args={[1, 64, 64]}/>\n                <meshStandardMaterial map={color} normalMap={normal} aoMap={aoMap}/>\n            </mesh>\n        </Canvas>\n    )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-earth/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the Earth"})}),(0,a.jsx)("h2",{children:"Sphere Animation"}),(0,a.jsx)("p",{children:"The animation I'd like to have is a rotation on scroll."}),(0,a.jsxs)("p",{children:["It's possible to create that in multiple ways, but today I'll make it using the ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"})," hook from Framer Motion."]}),(0,a.jsx)(x.Z,{title:"components/earth/index.jsx",code:"...\nconst scene = useRef(null);\nconst { scrollYProgress } = useScroll({\n    target: scene,\n    offset: ['start end', 'end start']\n})\nreturn (\n    <Canvas ref={scene}>\n        <motion.mesh scale={2.5} rotation-y={scrollYProgress}>\n    ...",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Here the ",(0,a.jsx)("code",{className:"language-jsx",children:"offset"})," allows us to track the scroll from the moment we see the ",(0,a.jsx)("code",{className:"language-jsx",children:"Canvas"})," to the moment don't see it anymore"]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," results in a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})]})]})}),(0,a.jsx)("p",{children:"However now the animation is not smooth because it is directly linked with the scrollbar."}),(0,a.jsx)("h3",{children:"Smoothing the rotation"}),(0,a.jsx)("p",{children:"There are two ways of making the rotation smooth."}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The useSpring hook from Framer Motion to smooth out the scrollYProgress value"}),(0,a.jsx)("li",{children:"Smooth out the whole scrolling"})]}),(0,a.jsx)(x.Z,{title:"useSpring hook",code:"const smoothRotation = useSpring(scrollYProgress, {\n    damping: 20\n});",language:"jsx"}),(0,a.jsx)("p",{children:"Or we can also smooth out the whole scrolling, which is what I'll do for this animation."}),(0,a.jsx)(g.Z,{titles:["components/smoothScroll/index.jsx","page.js"],codes:["'use client';\nimport { useEffect } from 'react'\nimport Lenis from '@studio-freight/lenis'\n\nexport default function smoothScroll({children}) {\n\n    useEffect( () => {\n        window.scrollTo(0,0);\n        \n        const lenis = new Lenis()\n        \n        function raf(time) {\n          lenis.raf(time)\n          requestAnimationFrame(raf)\n        }\n        \n        requestAnimationFrame(raf)\n    }, [])\n\n    return children\n}","...\nexport default function Home() {\n    return (\n      <SmoothScroll>\n        <main className={styles.main}>\n          <Earth />\n        </main>\n      </SmoothScroll>\n    )\n}"],languages:["jsx","jsx"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes of the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The smooth scroll is created using the Lenis Scroll Library."}),(0,a.jsx)("li",{children:"The whole page is wrapped inside the SmoothScroll wrapper."})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-earth/video1.mov"}),(0,a.jsx)("h2",{children:"Projects Layout"}),(0,a.jsx)("p",{children:"The projects component is made of 2 different animations:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"On Scroll Clip animation (titles)"}),": Made with Framer Motion, using the ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"}),", ",(0,a.jsx)("code",{className:"language-jsx",children:"useTransform"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"useMotionTemplate"})]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"On Hover Clip animation (descriptions)"}),": Made with a state and conditional CSS"]})]}),(0,a.jsx)(g.Z,{titles:["components/projects/index.jsx","projects/style.module.scss"],codes:['\n\'use client\';\nimport { useState } from \'react\';\nimport styles from \'./style.module.scss\';\nimport Titles from \'./titles\';\nimport Descriptions from \'./descriptions\';\n\nconst data = [\n    {\n        title: "Ford",\n        description: "Working on the Next-Generation HMI Experience without no driving experience.",\n        speed: 0.5\n    },\n    {\n        title: "UFC",\n        description: "Developed the Future of UFC Sports Ecosystem despite not being a sports fan.",\n        speed: 0.5\n    },\n    {\n        title: "Lincoln",\n        description: "Defined the visual concept and design language for the Lincoln Zephyr 2022 but never seen it in real life.",\n        speed: 0.67\n    },\n    {\n        title: "Royal Caribbean",\n        description: "I was just one person on a massive team that created an entire Royal Caribbean eco-system.",\n        speed: 0.8\n    },\n    {\n        title: "Sleepiq",\n        description: "Designed a 1M+ users product utilizing my best personal experience: sleeping.",\n        speed: 0.8\n    },\n    {\n        title: "NFL",\n        description: "Explored the Future of Fantasy Football while being in a country where football means a total different sport.",\n        speed: 0.8\n    }\n]\n\nexport default function Projects() {\n    const [selectedProject, setSelectedProject] = useState(null)\n    return (\n        <div className={styles.container}>\n            <Titles data={data} setSelectedProject={setSelectedProject}/>\n            <Descriptions data={data} selectedProject={selectedProject}/>\n        </div>\n    )\n}',".container{\n    position: absolute;\n    z-index: 1;\n    width: 100%;\n}"],languages:["jsx","scss"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"A state is created to track which project is hovered, allowing the communication between the two components."})}),(0,a.jsx)("h3",{children:"Setting up the titles (on scroll clip)"}),(0,a.jsx)("p",{children:"The on scroll clip animation requires 3 hooks from the Framer Motion library:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useScroll"}),": Tracks the progress of the scrol.l"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useTransform"}),": Transforms a value into another value."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useMotionTemplate"}),": Create a string based value from multiple motion values."]})]}),(0,a.jsx)(g.Z,{titles:["components/titles/index.jsx","titles/style.module.scss"],codes:["\nimport React, { useRef } from 'react'\nimport styles from './style.module.scss';\nimport { useScroll, motion, useTransform, useMotionTemplate } from 'framer-motion';\n\nexport default function index({data, setSelectedProject}) {\n  return (\n    <div className={styles.titles}>\n        {\n            data.map( (project, i) => {\n                return <Title key={i} data={{...project, i}} setSelectedProject={setSelectedProject}/>\n            })\n        }\n    </div>\n  )\n}\n\nfunction Title({data, setSelectedProject}) {\n\n    const { title, speed, i } = data;\n    const container = useRef(null);\n\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ['start end', `${25 / speed}vw end`]\n    })\n\n    const clipProgress = useTransform(scrollYProgress, [0,1], [100, 0]);\n    const clip = useMotionTemplate`inset(0 ${clipProgress}% 0 0)`;\n    \n    return (\n        <div ref={container} className={styles.title}>\n            <div \n                className={styles.wrapper}\n                onMouseOver={() => {setSelectedProject(i)}}\n                onMouseLeave={() => {setSelectedProject(null)}}\n            >\n                <motion.p style={{clipPath: clip}}>\n                    {title}\n                </motion.p>\n                <p>\n                    {title}\n                </p>\n            </div>\n        </div>\n    )\n}",".titles{\n    width: 100%;\n    border-top: 1px solid rgba(183, 171, 152, 0.25);\n    .title{\n        border-bottom: 1px solid rgba(183, 171, 152, 0.25);\n        cursor: default;\n        position: relative;\n        z-index: 2;\n        .wrapper{\n            display: inline-block;\n            padding-left: 10%;\n\n            p{\n                display: inline-block;\n                color: #b7ab98;\n                text-transform: uppercase;\n                font-weight: 700;\n                font-size: 8vw;\n                line-height: 7.5vw;\n                margin: 0px;\n                position: relative;\n                z-index: 2;\n                &:nth-of-type(2){\n                    display: block;\n                    position: absolute;\n                    color: #1c1c1c;\n                    top: 0;\n                    z-index: 1;\n                }\n            }\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-earth/video2.mov"}),(0,a.jsx)("h3",{children:"Setting up the descrptions (on hover clip)"}),(0,a.jsx)("p",{children:"The hover animation is much simpler, as it only uses CSS and the value of the state to make the animation."}),(0,a.jsx)(g.Z,{titles:["components/descriptions/index.jsx","descriptions/style.module.scss"],codes:["import React from 'react'\nimport styles from './style.module.scss';\n\nexport default function index({data, selectedProject}) {\n\n    const crop = (string, maxLength) => {\n        return string.substring(0, maxLength);\n    }\n    \n    return (\n        <div className={styles.descriptions}>\n            {\n                data.map( (project, i) => {\n                    const { title, description } = project;\n                    return (\n                    <div \n                        key={i} \n                        className={styles.description}\n                        style={{clipPath: selectedProject == i ? \"inset(0 0 0)\" : \"inset(50% 0 50%\"}}\n                    >\n                        <p>{crop(title, 9)}</p>\n                        <p>{description}</p>\n                    </div>\n                    )\n                })\n            }\n        </div>\n    )\n}",".descriptions{\n    position: absolute;\n    top: 3px;\n    height: 100%;\n    width: 100%;\n    z-index: 2;\n    pointer-events: none;\n    .description{\n        background-color: #ec4e39;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-left: 10%;\n        padding-right: 10%;\n        clip-path: inset(50% 0 50%);\n        transition: clip-path .4s;\n        p{\n            &:nth-of-type(1){\n                color: #010101;\n                text-transform: uppercase;\n                font-weight: 700;\n                font-size: 8vw;\n                line-height: 7.5vw;\n                margin: 0px;\n                position: relative;\n                z-index: 1;\n            }\n            &:nth-of-type(2){\n                width: 40%;\n                font-size: 1vw;\n                font-weight: 700;\n            }\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-earth/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"Very nice to learn from the masters, lots of good concept in this animation, hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function _3d_cube_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Setting up the page.js"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Sass"})," for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion"})," for the animations, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion 3D"})," for the animations as well, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion-3d"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"React Three Fiber"})," for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/fiber"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"React Three Drei"})," for 3D interactions, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/drei"}),"."]})]})}),(0,a.jsx)("h3",{children:"Setting up the Page Component"}),(0,a.jsx)(x.Z,{title:"page.js",code:"import Cube from '@/components/cube';\n\nexport default function Home() {\n  return (\n      <Cube />\n  )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Cube Component"}),(0,a.jsxs)("p",{children:["The first thing we need to create a 3d scene is the ",(0,a.jsx)("code",{className:"language-jsx",children:"<Canvas>"}),". Everything inside of it will be translated into a Three.js component. For example, the ",(0,a.jsx)("code",{className:"language-jsx",children:"<mesh>"})," is translated into a Three.js Mesh, same thing for the ambient light and the directional light."]}),(0,a.jsx)(g.Z,{titles:["components/cube/index.jsx","cube/style/module.scss"],codes:["'use client';\nimport React, { useRef } from 'react'\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport styles from './style.module.scss';\n\nexport default function index() {\n\n    return (\n        <div className={styles.main}>\n            <div className={styles.cube}>\n                <Canvas>\n                    <ambientLight intensity={2}/>\n                    <directionalLight position={[2, 1, 1]}/>\n                    <Cube/>\n                </Canvas>\n            </div>\n        </div>\n    )\n}\n\nfunction Cube() {\n\n    const mesh = useRef(null);\n\n    useFrame((state, delta) => {\n        mesh.current.rotation.x += delta * 0.15\n        mesh.current.rotation.y += delta * 0.15\n        mesh.current.rotation.z += delta * 0.15\n    })\n\n    const texture_1 = useLoader(TextureLoader, '/assets/1.jpg')\n    const texture_2 = useLoader(TextureLoader, '/assets/2.jpg')\n    const texture_3 = useLoader(TextureLoader, '/assets/3.jpg')\n    const texture_4 = useLoader(TextureLoader, '/assets/4.jpg')\n    const texture_5 = useLoader(TextureLoader, '/assets/5.jpg')\n    const texture_6 = useLoader(TextureLoader, '/assets/6.jpg')\n\n    return (\n        <mesh ref={mesh}>\n            <boxGeometry args={[2.5, 2.5, 2.5]}/>\n            <meshStandardMaterial map={texture_1} attach=\"material-0\"/>\n            <meshStandardMaterial map={texture_2} attach=\"material-1\"/>\n            <meshStandardMaterial map={texture_3} attach=\"material-2\"/>\n            <meshStandardMaterial map={texture_4} attach=\"material-3\"/>\n            <meshStandardMaterial map={texture_5} attach=\"material-4\"/>\n            <meshStandardMaterial map={texture_6} attach=\"material-5\"/>\n        </mesh>\n    )\n}",".main{\n    height: 100vh;\n    .cube{\n        height: 100%;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code above:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The rotation is made inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"useFrame"})," hook (which is called at every single frame) from react-three-fiber."]}),(0,a.jsxs)("li",{children:["To attach a different texture on each face of the cube, I use the ",(0,a.jsx)("code",{className:"language-jsx",children:'attach="material-x"'})]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-cube/video1.mov"}),(0,a.jsx)("h2",{children:"Adding the Drag Event"}),(0,a.jsxs)("p",{children:["We can easily rotate the cube with a drag event using the ",(0,a.jsx)("code",{className:"language-jsx",children:"<OrbitControl>"})," by react-three/drei."]}),(0,a.jsx)("p",{children:"For this specific animation, I want to toggle off the zoom and the pan options for the Orbit Controls, so I specify false for their distinct props."}),(0,a.jsx)(x.Z,{title:"components/cube/index.jsx",code:"return (\n    <div className={styles.main}>\n        <div className={styles.cube}>\n            <Canvas>\n                <OrbitControls enableZoom={false} enablePan={false}/>\n                <ambientLight intensity={2}/>\n                <directionalLight position={[2, 1, 1]}/>\n                <Cube/>\n            </Canvas>\n        </div>\n    </div>\n)",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-cube/video2.mov"}),(0,a.jsx)("h2",{children:"Adding the Mouse Move Event"}),(0,a.jsxs)("p",{children:["To rotate the cube on mouse move, I'll use the Framer Motion library. I'll specifically use ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/motionvalue/",children:"Motion Values"}),", to avoid re-rendering the cube at each mouse move event."]}),(0,a.jsx)(x.Z,{title:"components/cube/index.jsx",code:"import { useMotionValue, useSpring } from 'framer-motion';\nimport { motion } from 'framer-motion-3d'\n\n...\n\nconst options = {damping: 20}\n\nconst mouse = {\n    x: useSpring(useMotionValue(0), options)\n   y: useSpring(useMotionValue(0), options)\n}\n\nconst manageMouseMove = (e) => {\n    const { innerWidth, innerHeight } = window;\n    const { clientX, clientY } = e;\n    const multiplier = 0.5;\n    const x = (-0.5 + clientX / innerWidth) * multiplier;\n    const y = (-0.5 + clientY / innerHeight) * multiplier;\n    mouse.x.set(x)\n    mouse.y.set(y)\n}\n\nuseEffect( () => {\n    window.addEventListener('mousemove', manageMouseMove)\n    return () => window.removeEventListener('mousemove', manageMouseMove)\n}, [])\n\nreturn (\n    <motion.mesh ref={mesh} rotation-x={mouse.y} rotation-y={mouse.x}>\n    ...",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["the ",(0,a.jsx)("code",{className:"language-jsx",children:"useMotionValue"})," has an internal state, so setting a new value does not re-render the full component, which is good for performance."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"useSpring"})," hook is used to smooth out the animaiton."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-cube/video3.mov"}),(0,a.jsx)("h2",{children:"Adding the Scroll Event"}),(0,a.jsx)("p",{children:"There are 2 ways of rotating the cube on scroll. There's an easy way and a harder way, but the harder is also more versatile."}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The first way of doing it is with the ",(0,a.jsx)("code",{className:"language-jsx",children:"ScrollControls"})," from react-three/drei."]}),(0,a.jsxs)("li",{children:["The second way of doing it is with the ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"})," hook from Framer Motion."]})]}),(0,a.jsx)("h3",{children:"With ScrollControls"}),(0,a.jsxs)("p",{children:["With the Scroll Controls from react-three/drei, we can wrap all of our content inside a ",(0,a.jsx)("code",{className:"language-jsx",children:"<ScrollControls>"})," which will create a fake scrolling section for us, we can then set the length of that scroll using ",(0,a.jsxs)("code",{className:"language-jsx",children:["pages=","x"]})," props."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"return (\n    <div className={styles.main}>\n        <div className={styles.cube}>\n            <Canvas>\n                <ScrollControls pages={10}>\n                    ...",language:"jsx",highlights:[5]}),(0,a.jsx)(x.Z,{title:"components/cube/index.jsx",code:"function Cube() {\n\n    const data = useScroll();\n\n    useFrame( () => {\n        const { offset } = data;\n        mesh.current.rotation.x = offset * 5\n        mesh.current.rotation.y = offset * 5\n        mesh.current.rotation.z = offset * 5\n    })\n    ...",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-cube/video4.mov"}),(0,a.jsx)("h3",{children:"With Framer Motion's useScroll"}),(0,a.jsx)("p",{children:"We can do something similar as the ScrollControls, but in a more versatile way."}),(0,a.jsx)("p",{children:"The first step is to use HTML and CSS to create the scrolling section."}),(0,a.jsx)("p",{children:"After that we can use a mix Framer Motion's hook to make it happen:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useScroll"}),": Used to track the progress of the scroll in a specific section"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useTransform"}),": Used to transform the value of the useScroll into another value."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useSpring"}),": Used to smooth out the value returned by the useTransform hook."]})]}),(0,a.jsx)("p",{children:"Here we can create the scrollable section using CSS:"}),(0,a.jsx)(x.Z,{title:"components/cube/style.module.scss",code:".main{\n    height: 500vh;\n\n    .cube{\n        position: sticky;\n        top: 0;\n        height: 100vh;\n    }\n}",language:"css"}),(0,a.jsx)(x.Z,{title:"components/cube/index.jsx",code:'...\nimport { useMotionValue, useSpring, useScroll, useTransform } from \'framer-motion\';\nexport default function index() {\n\n    const container = useRef(null);\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ["start start", "end end"]\n    })\n    const progress = useTransform(scrollYProgress, [0, 1], [0, 3])\n    const smoothProgress = useSpring(progress, {damping: 20});\n\n    return (\n        <div ref={container} className={styles.main}>\n            <div className={styles.cube}>\n                <Canvas>\n                        ...\n                        <Cube progress={smoothProgress}/>',language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," returns a value between 0 and 1, which is the progress of the scroll inside the container ref."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"progress"})," returns a value between 0 and 3, which is the scrollYProgress transformed into new values."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"smoothProgress"})," returns a smoothed out value of the progress."]})]})]}),(0,a.jsx)("p",{children:"Then the smooth progress and given to the cube and used as the rotation value."}),(0,a.jsx)(x.Z,{title:"components/cube/index.jsx",code:"function Cube({progress}) {\n    ...\n    return (\n        <motion.mesh ref={mesh} rotation-x={progress} rotation-y={progress}>",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-cube/video5.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"With all of these tricks, I'm pretty confident you can animate any 3D shapes. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function sticky_cursor_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h3",{children:"Page Component"}),(0,a.jsx)("p",{children:"The parent component will act as the parent of the two main components."}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["'use client';\nimport styles from './page.module.scss'\nimport Header from '../components/header';\nimport StickyCursor from '../components/stickyCursor';\n\nexport default function Home() {\n  \n  return (\n    <main className={styles.main}>\n      <Header/>\n    //   <StickyCursor/>\n    </main>\n  )\n}",".main{\n    height: 200vh;\n    background-color: white;\n}"],languages:["jsx","scss"],highlights:[[10],[]]}),(0,a.jsx)("h3",{children:"Header Component"}),(0,a.jsx)(g.Z,{titles:["components/header.jsx","header/style.module.scss"],codes:["import styles from './style.module.scss';\n\nexport default function Index(props, ref) {\n  return (\n    <div className={styles.header}>\n        <div className={styles.burger}>\n        </div>\n    </div>\n)}",'.header{\n    position: fixed;\n    display: flex;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 10px;\n    box-sizing: border-box;\n    cursor: pointer;\n    mix-blend-mode: difference;\n    z-index: 1;\n    .burger{\n        position: relative;\n        display: flex;\n        gap: 8px;\n        flex-direction: column;\n        padding: 30px;\n        pointer-events: none;\n        &::before, &::after{\n            display: block;\n            content: "";\n            width: 30px;\n            height: 2px;\n            mix-blend-mode: difference;\n            background-color: white;\n        }\n    }\n}'],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/sticky-cursor/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Moving the Cursor"}),(0,a.jsx)("p",{children:"Here I'll move the cursor on mouse move with a mix of event listeners and Framer Motion."}),(0,a.jsx)(x.Z,{title:"page.js",code:"import StickyCursor from '../components/stickyCursor'\n...\n\nexport default function Home() {\n  \n  return (\n    <main className={styles.main}>\n      <Header/>\n      <StickyCursor/>\n    </main>\n  )\n}",language:"jsx",highlights:[9]}),(0,a.jsx)("p",{children:"To move the cursor, I use two hooks from Framer Motion:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useMotionValue:"})," a hook that returns an object with an internal state. Allows you to animate without re-rendering the whole components."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"useSpring:"})," a hook that returns a motion value with spring physics applied."]})]}),(0,a.jsx)(g.Z,{titles:["components/stickyCursor/index.jsx","stickyCursor/style.module.scss"],codes:["'use client';\nimport { useEffect } from 'react';\nimport styles from './style.module.scss';\nimport { motion, useMotionValue, useSpring } from 'framer-motion';\n\nexport default function index({stickyElement}) {\n\n  const cursorSize = 15;\n  const mouse = {\n    x: useMotionValue(0),\n    y: useMotionValue(0)\n  }\n\n  const smoothOptions = {damping: 20, stiffness: 300, mass: 0.5}\n  const smoothMouse = {\n    x: useSpring(mouse.x, smoothOptions),\n    y: useSpring(mouse.y, smoothOptions)\n  }\n\n  const manageMouseMove = e => {\n    const { clientX, clientY } = e;\n    mouse.x.set(clientX - cursorSize / 2);\n    mouse.y.set(clientY - cursorSize / 2);\n  }\n\n  useEffect( () => {\n    window.addEventListener(\"mousemove\", manageMouseMove);\n    return () => {\n      window.removeEventListener(\"mousemove\", manageMouseMove)\n    }\n  }, [])\n\n  return (\n    <div className={styles.cursorContainer}>\n      <motion.div \n        style={{\n          left: smoothMouse.x, \n          top: smoothMouse.y,\n        }} \n        className={styles.cursor}>\n      </motion.div>\n    </div>\n  )\n}",".cursor{\n    position: fixed;\n    width: 15px;\n    height: 15px;\n    background-color: black;\n    border-radius: 50%;\n    pointer-events: none;\n    \n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-cursor/video1.mov"}),(0,a.jsx)("h2",{children:"Sticking the cursor"}),(0,a.jsx)("p",{children:"The first step to stick the cursor is to find a way to pass a ref from a component to another. We can do this using the forwardRef from React."}),(0,a.jsx)("p",{children:"Here I create a ref in the parent of both components."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nexport default function Home() {\n  \n    const stickyElement = useRef(null);\n  \n    return (\n      <main className={styles.main}>\n        <Header ref={stickyElement}/>\n        <StickyCursor stickyElement={stickyElement}/>\n      </main>\n    )\n  }",language:"jsx"}),(0,a.jsx)("p",{children:"I use the forwardRef here to pass down the ref coming from the parent."}),(0,a.jsx)(g.Z,{titles:["components/header/index.jsx","header/style.module.scss"],codes:["import { forwardRef } from 'react';\nimport styles from './style.module.scss';\nimport Magnetic from '../magnetic';\n\nconst Header = forwardRef(function index(props, ref) {\n  return (\n    <div className={styles.header}>\n        <Magnetic>\n          <div className={styles.burger}>\n            <div ref={ref} className={styles.bounds}></div>\n          </div>\n        </Magnetic>\n    </div>\n  )}\n)\n\nexport default Header",'.header{\n    position: fixed;\n    display: flex;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 10px;\n    box-sizing: border-box;\n    cursor: pointer;\n    mix-blend-mode: difference;\n    z-index: 1;\n    .burger{\n        position: relative;\n        display: flex;\n        gap: 8px;\n        flex-direction: column;\n        padding: 30px;\n        pointer-events: none;\n        &::before, &::after{\n            display: block;\n            content: "";\n            width: 30px;\n            height: 2px;\n            mix-blend-mode: difference;\n            background-color: white;\n        }\n    }\n    .bounds{\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: all;\n        &:hover{\n            transform: scale(3);\n        }\n    }\n}'],languages:["jsx","scss"],highlights:[[10],[34,35]]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("p",{children:"The bounds scale when we hover on it to have a larger range for the mouse leave event."})}),(0,a.jsx)("li",{children:(0,a.jsxs)("p",{children:["The Magnetic Component comes from an ",(0,a.jsx)(d(),{target:"_blank",href:"https://blog.olivierlarose.com/tutorials/magnetic-button",children:"animation"})," I made in the past."]})})]})}),(0,a.jsx)("p",{children:"Then I can use the ref coming from the header and stick the cursor to it."}),(0,a.jsx)(x.Z,{title:"components/stickyCursor/index.jsx",code:'\'use client\';\nimport { useEffect, useState } from \'react\';\nimport styles from \'./style.module.scss\';\nimport { motion, useMotionValue, useSpring } from \'framer-motion\';\n\nexport default function index({stickyElement}) {\n\n  const [isHovered, setIsHovered] = useState(false);\n  const cursorSize = isHovered ? 60 : 15;\n\n  const mouse = {\n    x: useMotionValue(0),\n    y: useMotionValue(0)\n  }\n\n  //Smooth out the mouse values\n  const smoothOptions = {damping: 20, stiffness: 300, mass: 0.5}\n  const smoothMouse = {\n    x: useSpring(mouse.x, smoothOptions),\n    y: useSpring(mouse.y, smoothOptions)\n  }\n\n  const manageMouseMove = e => {\n    const { clientX, clientY } = e;\n    const { left, top, height, width } = stickyElement.current.getBoundingClientRect();\n\n    //center position of the stickyElement\n    const center = {x: left + width / 2, y: top + height / 2}\n\n    if(isHovered){\n\n      //distance between the mouse pointer and the center of the custom cursor and \n      const distance = {x: clientX - center.x, y: clientY - center.y}\n      \n      //move mouse to center of stickyElement + slightly move it towards the mouse pointer\n      mouse.x.set((center.x - cursorSize / 2) + (distance.x * 0.1));\n      mouse.y.set((center.y - cursorSize / 2) + (distance.y * 0.1));\n    }\n    else{\n      //move custom cursor to center of stickyElement\n      mouse.x.set(clientX - cursorSize / 2);\n      mouse.y.set(clientY - cursorSize / 2);\n    }\n  }\n\n  const manageMouseOver = e => {\n    setIsHovered(true)\n  }\n\n  const manageMouseLeave = e => {\n    setIsHovered(false)\n  }\n\n  useEffect( () => {\n    stickyElement.current.addEventListener("mouseenter", manageMouseOver)\n    stickyElement.current.addEventListener("mouseleave", manageMouseLeave)\n    window.addEventListener("mousemove", manageMouseMove);\n    return () => {\n      stickyElement.current.removeEventListener("mouseenter", manageMouseOver)\n      stickyElement.current.removeEventListener("mouseleave", manageMouseLeave)\n      window.removeEventListener("mousemove", manageMouseMove)\n    }\n  }, [isHovered])\n\n  return (\n    <div className={styles.cursorContainer}>\n      <motion.div \n        style={{\n          left: smoothMouse.x, \n          top: smoothMouse.y,\n        }} \n        animate={{\n          width: cursorSize,\n          height: cursorSize\n        }}\n        className={styles.cursor}>\n      </motion.div>\n    </div>\n  )\n}',language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-cursor/video2.mov"}),(0,a.jsx)("h2",{children:"Stretching the cursor"}),(0,a.jsx)(x.Z,{title:"components/stickyCursor.jsx",code:'...\nimport { motion, useMotionValue, useSpring, transform, animate } from \'framer-motion\';\n\nexport default function index({stickyElement}) {\n\n  const scale = {\n    x: useMotionValue(1),\n    y: useMotionValue(1)\n  }\n\n  const manageMouseMove = e => {\n    const { clientX, clientY } = e;\n    const { left, top, height, width } = stickyElement.current.getBoundingClientRect();\n\n    //center position of the stickyElement\n    const center = {x: left + width / 2, y: top + height / 2}\n\n    if(isHovered){\n\n      //distance between the mouse pointer and the center of the custom cursor and \n      const distance = {x: clientX - center.x, y: clientY - center.y}\n\n      //stretch based on the distance\n      const absDistance = Math.max(Math.abs(distance.x), Math.abs(distance.y));\n      const newScaleX = transform(absDistance, [0, height/2], [1, 1.3])\n      const newScaleY = transform(absDistance, [0, width/2], [1, 0.8])\n      scale.x.set(newScaleX);\n      scale.y.set(newScaleY);\n     ...\n    }\n    ...\n  }\n\n  const manageMouseLeave = e => {\n    ...\n    animate(cursor.current, { scaleX: 1, scaleY: 1 }, {duration: 0.1}, { type: "spring" })\n  }\n\n  useEffect( () => {\n    stickyElement.current.addEventListener("mouseenter", manageMouseOver)\n    stickyElement.current.addEventListener("mouseleave", manageMouseLeave)\n    ...\n    return () => {\n      stickyElement.current.removeEventListener("mouseenter", manageMouseOver)\n      stickyElement.current.removeEventListener("mouseleave", manageMouseLeave)\n      ...\n    }\n  }, [isHovered])\n\n  return (\n    <div className={styles.cursorContainer}>\n      <motion.div \n        ref={cursor}\n        style={{\n          scaleX: scale.x,\n          scaleY: scale.y,\n          ...\n        }} \n        ...\n      </motion.div>\n    </div>\n  )\n}',language:"jsx",highlights:[6,7,8,27,28,36,55,56]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-cursor/video3.mov"}),(0,a.jsx)("h2",{children:"Rotating the cursor"}),(0,a.jsxs)("p",{children:["To rotate the cursor, I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"Math.Atan2()"}),"  function with the ",(0,a.jsx)("code",{className:"language-jsx",children:"transformTemplate"})," tag to change the order of the transform property."]}),(0,a.jsx)("p",{children:"We can calculate the necessary angle by using the distance inside the Math.Atan2() function."}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/sticky-cursor/screenshot2.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)(x.Z,{title:"components/stickyCursor.jsx",code:"...\nimport { motion, useMotionValue, useSpring, transform, animate } from 'framer-motion';\n\nexport default function index({stickyElement}) {\n\n    ...\n    const rotate = (distance) => {\n        const angle = Math.atan2(distance.y, distance.x);\n        animate(cursor.current, { rotate: `${angle}rad` }, {duration: 0})\n    }\n\n    const manageMouseMove = e => {\n        const { clientX, clientY } = e;\n        const { left, top, height, width } = stickyElement.current.getBoundingClientRect();\n\n        //center position of the stickyElement\n        const center = {x: left + width / 2, y: top + height / 2}\n\n        if(isHovered){\n\n        //distance between the mouse pointer and the center of the custom cursor and \n        const distance = {x: clientX - center.x, y: clientY - center.y}\n        \n        //rotate\n        rotate(distance)\n        ...\n        }\n    }\n\n    const template = ({rotate, scaleX, scaleY}) => {\n        return `rotate(${rotate}) scaleX(${scaleX}) scaleY(${scaleY})` \n    }\n\n    return (\n        <div className={styles.cursorContainer}>\n        <motion.div \n            transformTemplate={template}\n            ...\n        </motion.div>\n        </div>\n    )\n}\n",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-cursor/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"That was a lot of work for a simple animation but it ends being super satisfying, simple and yet quite impressive. Hope you learned a lot!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function pixel_transition_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h3",{children:"Page Component"}),(0,a.jsx)("p",{children:"The parent component will act as the parent of all the other components. I initially created a Header and a Menu just to have something to begin with."}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client';\nimport styles from './page.module.scss'\nimport { useState } from 'react';\nimport Header from '../components/header';\nimport Menu from '../components/menu';\n\nexport default function Home() {\n  const [menuIsActive, setMenuIsActive] = useState(false);\n  return (\n    <main className={styles.main}>\n      <Header menuIsActive={menuIsActive} setMenuIsActive={setMenuIsActive}/>\n      <Menu menuIsActive={menuIsActive}/>\n    </main>\n  )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"Header Component"}),(0,a.jsx)("p",{children:"The Header Component is a simple burger menu that toggles a state coming from its parent."}),(0,a.jsx)(g.Z,{titles:["components/header/index.jsx","components/header/style.module.scss"],codes:["import styles from './style.module.scss';\n\nexport default function Index({menuIsActive, setMenuIsActive}) {\n  return (\n    <div className={styles.header}>\n        <div onClick={() => {setMenuIsActive(!menuIsActive)}} className={`${styles.burger} ${menuIsActive ? styles.burgerActive : \"\"}`}>\n        </div>\n    </div>\n)}",'.header{\n    position: fixed;\n    display: flex;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 10px;\n    box-sizing: border-box;\n    z-index: 4;\n    top: 0;\n    padding: 40px;\n    .burger{\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        position: relative;\n        cursor: pointer;\n        &::before, &::after{\n            display: block;\n            content: "";\n            width: 30px;\n            height: 2px;\n            background-color: black;\n            position: relative;\n            transition: transform 0.3s;\n        }\n        &::after{\n            top: -5px;\n        }\n\n        &::before{\n            top: 5px;\n        }\n    }\n    .burgerActive{\n        &::after{\n            transform: rotate(45deg);\n            top: -1px;\n        }\n        &::before{\n            transform: rotate(-45deg);\n            top: 0px;\n        }\n    }\n}'],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"Menu Component"}),(0,a.jsx)("p",{children:"The Menu Component is a simple 3 words menu that appears if the state is active."}),(0,a.jsx)(g.Z,{titles:["components/Menu/index.jsx","components/menu/style.module.scss"],codes:["import React from 'react'\nimport styles from './style.module.scss';\nimport { motion } from 'framer-motion';\n\nconst anim = {\n    initial: {\n        opacity: 0\n    },\n    open: {\n        opacity: 1\n    },\n    exit: {\n        opacity: 0\n    }\n}\n\nexport default function index({menuIsActive}) {\n  return (\n    <motion.div \n        className={styles.menu}\n        variants={anim}\n        initial=\"initial\"\n        animate={menuIsActive ? \"open\" : \"closed\"}\n    >\n        <p>Home</p>\n        <p>About</p>\n        <p>Contact</p>\n    </motion.div>\n  )\n}",".menu{\n    position: fixed;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 90vh;\n    width: 100%;\n    z-index: 3;\n    p{\n        font-size: 5vw;\n        margin: 5px;\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-transition/video1.mov"}),(0,a.jsx)("h2",{children:"Centered Transition"}),(0,a.jsx)("p",{children:"Since we'll need the width and height of the window to create the animation, the first thing we need to do is to put the dimensions of the window inside a state. We can do that inside the parent and pass it down the pixel transition components."}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nimport CenteredPixelTransition from '../components/pixelTransition/centered';\n\nexport default function Home() {\n  const [menuIsActive, setMenuIsActive] = useState(false);\n  const [dimensions, setDimensions] = useState({width:0, height: 0});\n\n  const updateDimensions = () => {\n    const { innerWidth, innerHeight } = window;\n    setDimensions({width: innerWidth, height: innerHeight})\n  }\n  useEffect( () => {\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions)\n  }, [])\n\n  return (\n    <main className={styles.main}>\n     ...\n     { dimensions.height > 0 && <CenteredPixelTransition menuIsActive={menuIsActive} dimensions={dimensions}/> }\n    </main>\n  )\n}",language:"jsx",highlights:[4]}),(0,a.jsx)("h3",{children:"Returning the Blocks"}),(0,a.jsx)(g.Z,{titles:["pixelTransition/centered/index.jsx","pixelTransition/centered/style.module.scss"],codes:["import React, { useState, useEffect } from 'react'\nimport styles from './style.module.scss';\nimport { motion } from 'framer-motion';\n\nconst anim = {\n    initial: {\n        opacity: 0\n    },\n    open: (i) => ({\n        opacity: 1,\n        transition: {duration: 0, delay: 0.03 * i}\n    }),\n    closed: (i) => ({\n        opacity: 0,\n        transition: {duration: 0, delay: 0.03 * i}\n    })\n}\n\nexport default function index({menuIsActive, dimensions}) {\n    const { width, height } = dimensions;\n\n    /**\n     * Shuffles array in place (Fisher–Yates shuffle).\n     * @param {Array} a items An array containing the items.\n     */\n    const shuffle = (a) => {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n\n    const getBlocks = () => {\n        const { innerWidth, innerHeight } = window;\n        const blockSize = innerWidth * 0.05;\n        const nbOfBlocks = Math.ceil(innerHeight / blockSize);\n        const shuffledIndexes = shuffle([...Array(nbOfBlocks)].map( (_, i) => i))\n        return shuffledIndexes.map( (randomIndex, index) => {\n            return (\n                <motion.div \n                    key={index} \n                    className={styles.block}\n                    variants={anim}\n                    initial=\"initial\"\n                    animate={menuIsActive ? \"open\" : \"closed\"}\n                    custom={randomIndex}\n                />\n            )\n        })\n    }\n\n    return (\n        <div className={styles.pixelBackground}>\n            {\n                [...Array(20)].map( (_, index) => {\n                    return <div key={index} className={styles.column}>\n                        {\n                            getBlocks()\n                        }\n                    </div>\n                })\n            }\n        </div>\n    )\n}",".pixelBackground{\n    display: flex;\n    height: 100vh;\n    overflow: hidden;\n    position: relative;\n    z-index: 1;\n    pointer-events: none;\n    .column{\n        width: 5vw;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        \n        .block{\n            width: 100%;\n            height: 5vw;\n            background-color: #ff6a00;\n        }\n    }\n}"],languages:["jsx","scss"],highlights:[[11,15,41,36,58],[]]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code :"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 58:"})," 20 columns are returned, each of them taking 5vw of width and 100% height."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 36:"})," An X amount of blocks is returned inside each columns, depending on the height of the window"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 11, 15 and 41: "}),"The Array is shuffled to return a randomIndex as a custom number for the Framer Motion Variants delay, making the animation random."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-transition/video2.mov"}),(0,a.jsx)("h2",{children:"Horizontal Transition"}),(0,a.jsx)("p",{children:"The Horizontal Transition will be the same as the centered one, but instead I'll just modify the value of the delay."}),(0,a.jsx)(x.Z,{title:"pixelTransition/horizontal/index.jsx",code:"\nimport React, { useState, useEffect } from 'react'\nimport styles from './style.module.scss';\nimport { motion } from 'framer-motion';\n\nconst anim = {\n    initial: {\n        opacity: 0\n    },\n    open: (delay) => ({\n        opacity: 1,\n        transition: {duration: 0, delay: 0.02 * delay[0]}\n    }),\n    closed: (delay) => ({\n        opacity: 0,\n        transition: {duration: 0, delay: 0.02 * delay[1]}\n    })\n}\n\nexport default function index({menuIsActive, dimensions}) {\n    const { width, height } = dimensions;\n    /**\n     * Shuffles array in place (Fisher–Yates shuffle).\n     * @param {Array} a items An array containing the items.\n     */\n    const shuffle = (a) => {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n\n    const getBlocks = (indexOfColum) => {\n        const blockSize = width * 0.05;\n        const nbOfBlocks = Math.ceil(height / blockSize);\n        const shuffledIndexes = shuffle([...Array(nbOfBlocks)].map( (_, i) => i))\n        return shuffledIndexes.map( (randomIndex, index) => {\n            return (\n                <motion.div \n                    key={index} \n                    className={styles.block}\n                    variants={anim}\n                    initial=\"initial\"\n                    animate={menuIsActive ? \"open\" : \"closed\"}\n                    custom={[indexOfColum + randomIndex, (20 - indexOfColum + randomIndex)]}\n                />\n            )\n        })\n    }\n\n    return (\n        <div className={styles.pixelBackground}>\n            {\n                [...Array(20)].map( (_, index) => {\n                    return <div key={index} className={styles.column}>\n                        {\n                            getBlocks(index)\n                        }\n                    </div>\n                })\n            }\n        </div>\n    )\n}",language:"jsx",highlights:[12,16,58]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code :"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 58:"})," 20 columns are returned, but this time, the index of them is given to the getBlocks function"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 12, 16 and 49"})," The index of the columns are used to increment the delay of the open and closed animation."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-transition/video3.mov"}),(0,a.jsx)("h2",{children:"Vertical Transition"}),(0,a.jsx)("p",{children:"The veritcal transition variant is a little more complicated. I have restructure everything to have rows instead of columns."}),(0,a.jsx)(g.Z,{titles:["pixelTransition/vertical/index.jsx","pixelTransition/vertical/style.module.scss"],codes:['import React, { useState, useEffect } from \'react\'\nimport styles from \'./style.module.scss\';\nimport { motion } from \'framer-motion\';\n\nconst anim = {\n    initial: {\n        opacity: 0\n    },\n    open: (delay) => ({\n        opacity: 1,\n        transition: {duration: 0, delay: 0.02 * delay[1]}\n    }),\n    closed: (delay) => ({\n        opacity: 0,\n        transition: {duration: 0, delay: 0.02 * delay[0]}\n    })\n}\n\nexport default function index({menuIsActive, dimensions}) {\n\n    const { width, height } = dimensions;\n    /**\n     * Shuffles array in place (Fisher–Yates shuffle).\n     * @param {Array} a items An array containing the items.\n     */\n    const shuffle = (a) => {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n\n    const getBlocks = (indexOfColum) => {\n        const blockSize = height * 0.1;\n        const nbOfBlocks = Math.ceil(width / blockSize);\n        const shuffledIndexes = shuffle([...Array(nbOfBlocks)].map( (_, i) => i))\n        return shuffledIndexes.map( (randomIndex, index) => {\n            return (\n                <motion.div \n                    key={index} \n                    className={styles.block}\n                    variants={anim}\n                    initial="initial"\n                    animate={menuIsActive ? "open" : "closed"}\n                    custom={[indexOfColum + randomIndex, (10 - indexOfColum + randomIndex)]}\n                />\n            )\n        })\n    }\n\n    return (\n        <div style={{flexDirection:"column"}} className={styles.pixelBackground}>\n            {\n                [...Array(10)].map( (_, index) => {\n                    return <div key={index} className={styles.row}>\n                        {\n                            getBlocks(index)\n                        }\n                    </div>\n                })\n            }\n        </div>\n    )\n}',".pixelBackground{\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n    position: relative;\n    z-index: 1;\n    pointer-events: none;\n    .row{\n        display: flex;\n        width: 100%;\n        height: 10vh;\n        .block{\n            width: 10vh;\n            height: 100%;\n            background-color: #ff6a00;\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code :"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 3 (CSS):"})," The rows are returned in a column layout"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 58:"})," 10 rows are returned, each of them taking 10vh of height and 100% width."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 38:"})," The height of a block is now 10vh since I now have 10 rows."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/pixel-transition/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Very nice effect that could even be done in Vanilla Javascript since it is so simple! Great concept tho to use the value of an array to create a custom delay. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function painting_animation_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use tinycolor2 for the color transformations, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i tinycolor2"}),"."]})})}),(0,a.jsx)("h3",{children:"Setting up the base layout"}),(0,a.jsx)("p",{children:"I've added a base text layout as a foreground element. It won't change anything about this animation, it's simply to make everything look good."}),(0,a.jsx)(g.Z,{titles:["components/Text/index.jsx","components/Text/style.module.css"],codes:["import React from 'react'\nimport styles from './style.module.css';\n\nexport default function index() {\n  return (\n    <div className={styles.text}>\n            <p>We specialize in transforming space into complexe shapes</p>\n    </div>\n  )\n}",".text{\n    position: absolute;\n    font-size: 8vw;\n    width: 80%;\n    font-family: 'Body';\n    text-transform: uppercase;\n    pointer-events: none;\n}"],languages:["jsx","css"]}),(0,a.jsx)("h3",{children:"Setting up the scene"}),(0,a.jsx)("p",{children:"The whole animation will happen inside the scene component. Inside of it I import the Text and then I import that scene inside the page.js"}),(0,a.jsx)(g.Z,{titles:["components/Scene/index.jsx","components/Scene/style.module.css"],codes:["'use client';\nimport React, { useState, useEffect, useRef } from 'react'\nimport Text from '../Text';\nimport styles from './style.module.css';\n\nexport default function index() {\n\n    const canvas = useRef(null);\n    const container = useRef(null);\n    const [dimension, setDimension] = useState({width: 0, height: 0})\n\n    const resize = () => {\n        const { innerWidth, innerHeight } = window;\n        setDimension({width: innerWidth, height: innerHeight});\n    }\n\n    useEffect(() => {\n        resize()\n        window.addEventListener(\"resize\", resize)\n        return () => {window.removeEventListener(\"resize\", resize)}\n      }, [])\n\n    return (\n        <div ref={container} className={styles.container}>\n            <Text />\n            <canvas ref={canvas} className={styles.canvas} width={dimension.width} height={dimension.height}>\n            </canvas>\n        </div>\n    )\n}",".container{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: #F1E0D6;\n}"],languages:["jsx","css"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Here setting the dimensions of the window is important, since the canvas needs a specific width and height. I put it inside a state to dynamically re-render it on window resize."})})}),(0,a.jsx)("h3",{children:"Importing the Scene"}),(0,a.jsx)("p",{children:"Here I simply import the Scene component inside the page.js"}),(0,a.jsx)(x.Z,{title:"page.js",code:"import Scene from '../components/Scene';\n\nexport default function Home() {\n  return (\n    <main>\n      <Scene />\n    </main>\n  )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/painting-animation/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)("h2",{children:"Adding the Paint Function"}),(0,a.jsx)("p",{children:"The paint function will utilize mutliple techniques:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Is made using the requestAnimationFrame combined with the arc function from the Canvas API"}),(0,a.jsxs)("li",{children:["The color transition is be made with the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.npmjs.com/package/tinycolor2",children:"TinyColor2"})," library."]})]}),(0,a.jsx)(x.Z,{title:"components/Scene/index.jsx",code:'import tinycolor from "tinycolor2";\n\nexport default function index() {\n\n    ...\n    let indexOfCurrentColor = 0;\n    const colors = ["#5A9DAC", "#E69E37", "#F1E0D6"];\n\n    const manageMouseMove = (event) => {\n        const { clientX, clientY} = event;\n        requestAnimationFrame( () => {paint(clientX, clientY, 180, 18)})\n    }\n\n    const lighten = (color, amount) => {\n        if(amount == 0) return color;\n        return tinycolor(color).brighten(amount * 0.8).saturate(amount * 0.8)\n    }\n\n    const paint = (x, y, radius, shade) => {\n        if(shade == 0) return;\n        const ctx = canvas.current?.getContext("2d");\n        const color = lighten(colors[indexOfCurrentColor], shade)\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2, true);\n        ctx.fill();\n        requestAnimationFrame(() => {paint(x, y, radius, shade - 1)})\n    }\n\n    return (\n        <div onMouseMove={(e) => {manageMouseMove(e)}} ref={container} className={styles.container}>\n            ...\n        </div>\n    )\n}',language:"jsx",highlights:[31]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("b",{children:(0,a.jsx)("p",{children:"Couple notes about the code:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The animation starts at ",(0,a.jsx)("b",{children:"Line 31"})," inside the mouse move event."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 11:"})," Each mouse move event calls the paint function."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 19:"})," The paint function draws a circle at a certain x and y location with a certain radius and a certain color."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 19:"})," The paint function is recursive, meaning it will call itself until the exit conditions are reached. In this case, if the shade is equal to 0, we stop the function. Since the starting shade is 18, the paint function will call itself 18 times."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/painting-animation/video1.mov"}),(0,a.jsx)("h2",{children:"Making the Painting Smoother"}),(0,a.jsx)("p",{children:"We have one problem at the moment, if you look closely, you'll see the paiting is choppy and not smooth. That's because if we move our mouse fast, it will actually skip mouse move events at certains locations, which creates this choppy / disconnected trail of paint."}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"To fix that problem, we'll use the Linear Interpolation to draw mutliple circles in between each mouse move events."})}),(0,a.jsx)("h3",{children:"The Linear Interpolation"}),(0,a.jsx)("p",{children:"Linear interpolation is a key concept in animations. It is often used by motion designers, but we can also use it for web animations! In short, it is form of interpolation, which involves the generation of new values based on an existing set of values"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot4.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)(x.Z,{title:"Lerp in Javascript",code:"let value = 10;\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a\nvalue = lerp(value, 0, 0.1);\n\nconsole.log(value) \n//9",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"x"}),": The value we want to interpolate from (start)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"y"}),": The target value we want to interpolate to (end)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"a"}),": The amount by which we want ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," to be closer to ",(0,a.jsx)("code",{className:"language-jsx",children:"y"}),"."]})]})}),(0,a.jsx)("h3",{children:"Translating everything in code"}),(0,a.jsx)(x.Z,{title:"components/Scene/index.jsx",code:"let prevX = null;\nlet prevY = null;\n\nconst manageMouseMove = (event) => {\n    const { clientX, clientY, movementX, movementY} = event;\n    requestAnimationFrame( () => {paint(clientX, clientY, 180, 18)})\n\n    if(prevX != null){\n        //The faster the mouse movement, the more circles need to be drawn\n        const mouseSpeed = Math.max(Math.abs(movementX), Math.abs(movementY));\n        fill(clientX, clientY, 180, mouseSpeed / 20);\n    }\n  \n    prevX = clientX;\n    prevY = clientY;\n}\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a;\n\nconst fill = (x, y ,radius, amount) => {\n    for(let i = 0 ; i < amount ; i++){\n        const targetX = lerp(prevX, x, (1/amount) * i);\n        const targetY = lerp(prevY, y, (1/amount) * i);\n        requestAnimationFrame( () => {paint(targetX, targetY, radius, 18)})\n    }\n}",language:"jsx",highlights:[11]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Here I keep the previous position of the mouse and I call a fill function to fill the space (with more circles) between the previous position and the current position ",(0,a.jsx)("b",{children:"(Line 22 and 23)"}),"."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 10:"})," The faster the mouse is moving, the more circles will be drawn inside the fill function."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("p",{children:"Note how smoother the animation now looks"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/painting-animation/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"We're offically done with this animation!"}),(0,a.jsx)("p",{children:"Insane animation that's actually quite nice for a project presentation. Relatively easy to do with Framer Motion with the hooks provided by the library. Hope you learned something."}),(0,a.jsx)("p",{children:"-Oli"})]})}function _3d_float_effect_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Setting up the page.js"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion"})," for the animations, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"Framer Motion 3D"})," for the animations as well, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion-3d"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"React Three Fiber"})," for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/fiber"}),"."]}),(0,a.jsxs)("li",{children:["We will use ",(0,a.jsx)("b",{children:"React Three Drei"})," for 3D utilitary functions, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/drei"}),"."]})]})}),(0,a.jsx)(g.Z,{titles:["page.js","page.module.scss"],codes:["import styles from './page.module.css'\nimport FloatingShape from '../components/floatingShape';\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n      <FloatingShape />\n    </main>\n  )\n}",".main{\n    display: flex;\n    height: 100vh;\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h2",{children:"Importing the Shapes"}),(0,a.jsx)("p",{children:"I made those shapes using Blender, but you can use any 3D modeling tool that can export a file in (.GLB) format."}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["You can use a tool from ",(0,a.jsx)(d(),{href:"https://gltf.pmnd.rs/",target:"_blank",children:"pmnd"})," to visualize your .glb file."]})})}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-float-effect/screenshot1.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the Blender scene"})}),(0,a.jsx)("h3",{children:"Extracting Models from a .GLB file"}),(0,a.jsx)("p",{children:"Once your scene is created inside a 3D software, all you we have to do is export it in (.GLB). After that, we can extract the nodes which come with all the necessary attributes to position them correctly."}),(0,a.jsxs)("p",{children:["First I initialze a Canvas from react-three-fiber and I also import a utility function called ",(0,a.jsx)(d(),{href:"https://github.com/pmndrs/drei#environment",target:"_blank",children:"environment"})," from react-three-drei. "]}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"The environment basically helps with the overall color and lighting of the scene"})}),(0,a.jsx)(x.Z,{title:"components/FloatingShapes/index.jsx",code:"'use client';\nimport React from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport Model from './Model';\nimport { Environment } from '@react-three/drei'\n\nexport default function Index() {\n\n  return (\n    <Canvas style={{background: \"#e0e0e2\"}} orthographic camera={{position: [0, 0, 200], zoom: 10}}>\n        <Model/>\n        <Environment preset=\"studio\"/>\n    </Canvas>\n  )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Note here I'm using an orthographic camera on the Canvas to squash the perspective."})})}),(0,a.jsx)("p",{children:"Here I basically extract all the nodes from the GLB file."}),(0,a.jsx)(x.Z,{title:"components/FloatingShapes/Model.jsx",code:'import React from "react";\nimport { useGLTF } from "@react-three/drei";\nimport { motion } from \'framer-motion-3d\';\n\nexport default function Model() {\n\n  const { nodes } = useGLTF("/medias/floating_shapes4.glb");\n  return (\n    <group>\n      <Mesh node={nodes.Sphere001}/>\n      <Mesh node={nodes.Sphere002}/>\n      <Mesh node={nodes.Cylinder002}/>\n      <Mesh node={nodes.Sphere003}/>\n      <Mesh node={nodes.Cylinder003}/>\n      <Mesh node={nodes.Cylinder005}/>\n      <Mesh node={nodes.Cube002}/>\n      <Mesh node={nodes.Cylinder006}/>\n      <Mesh node={nodes.Cylinder007}/>\n      <Mesh node={nodes.Cylinder009}/>\n      <Mesh node={nodes.Sphere}/>\n    </group>\n  );\n}\n\nuseGLTF.preload("/medias/floating_shapes4.glb");\n\nfunction Mesh({node}) {\n  const { geometry, material, position, scale, rotation } = node;\n \n  return (\n    <motion.mesh\n        castShadow={true}\n        receiveShadow={true}\n        geometry={geometry}\n        material={material}\n        position={position}\n        rotation={rotation}\n        scale={scale}\n    />\n  )\n}',language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-float-effect/screenshot2.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the nodes inside the Three.js scene"})}),(0,a.jsx)("h2",{children:"Adding a Float Effect"}),(0,a.jsxs)("p",{children:["To add a basic float effect, it's actually very easy with the help of a utilitary function called ",(0,a.jsx)(d(),{href:"https://github.com/pmndrs/drei#float",target:"_blank",children:"Float"})," from react-three-drei."]}),(0,a.jsx)(x.Z,{title:"components/FloatingShapes/Model.jsx",code:'export default function Model() {\n\n  const { nodes } = useGLTF("/medias/floating_shapes4.glb");\n  return (\n    <Float>\n      <group>\n        <Mesh node={nodes.Sphere001}/>\n        <Mesh node={nodes.Sphere002}/>\n        ...\n      </group>\n    </Float>\n  );\n}',language:"jsx",highlights:[5,19]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-float-effect/video1.mov"}),(0,a.jsx)("h2",{children:"Storing the mouse event"}),(0,a.jsx)("p",{children:"Now of course we need to add a little spice to that animation. Right now it's a vanilla float. An effect that everyone can have by simply using a utility function. To enhance the effect and make it a big more unique, I'll use Framer-Motion to rotate and translate the shapes on mouse move."}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"I store the relative position of the mouse (number between 0 and 1) inside a Motion Value."}),(0,a.jsx)("li",{children:"The mouse position is smoothed out using the useSpring hook."}),(0,a.jsx)("li",{children:"The mouse position is given to the Model Component."})]})}),(0,a.jsx)(x.Z,{title:"components/FloatingShapes/index.jsx",code:'...\nimport React, { useEffect } from \'react\'\nimport { useMotionValue, useSpring } from "framer-motion"\n\nexport default function Index() {\n\n  const mouse = {\n    x: useMotionValue(0),\n    y: useMotionValue(0)\n  }\n\n  const smoothMouse = {\n    x: useSpring(mouse.x, {stiffness: 75, damping: 100, mass: 3}),\n    y: useSpring(mouse.y, {stiffness: 75, damping: 100, mass: 3})\n  }\n\n  const manageMouse = e => {\n    const { innerWidth, innerHeight } = window;\n    const { clientX, clientY } = e;\n    const x = clientX / innerWidth\n    const y = clientY / innerHeight\n    mouse.x.set(x);\n    mouse.y.set(y);\n  }\n\n  useEffect( () => {\n    window.addEventListener("mousemove", manageMouse)\n    return () => window.removeEventListener("mousemove", manageMouse)\n  }, [])\n\n  return (\n    <Canvas style={{background: "#e0e0e2"}} orthographic camera={{position: [0, 0, 200], zoom: 10}}>\n        <Model mouse={smoothMouse}/>\n        <Environment preset="studio"/>\n    </Canvas>\n  )\n}',language:"jsx",highlights:[12,33]}),(0,a.jsx)("h2",{children:"Enhancing the Float Effect"}),(0,a.jsx)("p",{children:"To enhance the float effect, I'll use Framer-Motion to transform the mouse position into new values. I'll use the useTransform hook for that."}),(0,a.jsx)("p",{children:"I will basically modify 4 attributes on mouse move:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Rotation-x"}),(0,a.jsx)("li",{children:"Rotation-y"}),(0,a.jsx)("li",{children:"Position-x"}),(0,a.jsx)("li",{children:"Position-y"})]}),(0,a.jsx)(x.Z,{title:"components/FloatingShapes/Model.jsx",code:"import { useTransform } from 'framer-motion';\nimport { motion } from 'framer-motion-3d';\n\nexport default function Model({mouse}) {\n\n  const { nodes } = useGLTF(\"/medias/floating_shapes4.glb\");\n  return (\n    <Float>\n      <group>\n        <Mesh node={nodes.Sphere001} multiplier={2.4} mouse={mouse}/>\n        <Mesh node={nodes.Sphere002} multiplier={2.4} mouse={mouse}/>\n        <Mesh node={nodes.Cylinder002} multiplier={1.2} mouse={mouse}/>\n        ...\n      </group>\n    </Float>\n  );\n}\n\nuseGLTF.preload(\"/medias/floating_shapes4.glb\");\n\nfunction Mesh({node, multiplier, mouse}) {\n  const { geometry, material, position, scale, rotation } = node;\n  const a = multiplier / 2;\n  const rotationX = useTransform(mouse.x, [0,1], [rotation.x - a, rotation.x + a]);\n  const rotationY = useTransform(mouse.y, [0,1], [rotation.y - a, rotation.y + a]);\n  const positionX = useTransform(mouse.x, [0,1], [position.x - multiplier * 2, position.x + multiplier * 2]);\n  const positionY = useTransform(mouse.y, [0,1], [position.y + multiplier * 2, position.y - multiplier * 2])\n  return (\n    <motion.mesh\n      ...\n      rotation-y={rotationX}\n      rotation-x={rotationY}\n      position-x={positionX}\n      position-y={positionY}\n    />\n  )\n}\n",language:"jsx",highlights:[24,25,26,27,31,32,33,34]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Couple notes about the code above:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"I use the useTransform hook to transform the position of the mouse (number between 0 and 1) into a new value based on the current position / rotation of the mesh."}),(0,a.jsx)("li",{children:"I use a mulitplier value to create variations between the different mesh."})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-float-effect/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"I was super glad to discover how easy it is to create a float effect. And by adding a little bit of asymetry with Framer-Motion I'm satisfied with the result. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function awwwards_side_menu_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h3",{children:"Header Component"}),(0,a.jsx)("p",{children:"The Header component will be placed at the root layout so it's shared among all pages."}),(0,a.jsx)(x.Z,{title:"app/layout.jsx",code:"import { Inter } from 'next/font/google'\nimport './globals.css'\nimport Header from '../components/Header';\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  )\n}",language:"jsx",highlights:[16]}),(0,a.jsx)("h2",{children:"Creating the Button"}),(0,a.jsx)("p",{children:" Then the first element I'll work on is the button."}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["At the root of the layout is a button that has the responsibility of toggling the menu. All of that is managed with the ",(0,a.jsx)("code",{className:"language-jsx",children:"useState"})," hook."]})}),(0,a.jsx)(g.Z,{titles:["app/layout.jsx","Header/style/module.scss"],codes:["'use client';\nimport { useState } from 'react'\nimport Button from './Button';\nimport styles from './style.module.scss';\n\nexport default function index() {\n    const [isActive, setIsActive] = useState(false);\n    return (\n        <div className={styles.header}>\n            <Button isActive={isActive} toggleMenu={() => {setIsActive(!isActive)}}/>\n        </div>\n    )\n}",".header{\n    position: fixed;\n    right: 50px;\n    top: 50px;\n}"],languages:["jsx","scss"],highlights:[[10],[]]}),(0,a.jsx)("p",{children:"The button is mostly made with HTML and CSS, but there's a small Framer Motion animation."}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"top"})," property is animated with Framer Motion when the menu is active and with an overflow hidden it creates this effect."]}),(0,a.jsxs)("li",{children:["The perspective effect is created with CSS on hover where the ",(0,a.jsx)("code",{className:"language-jsx",children:"rotateX"})," value is animated."]})]}),(0,a.jsx)(g.Z,{titles:["Button/index.jsx","Button/style.module.scss"],codes:['import { motion } from \'framer-motion\';\nimport styles from \'./style.module.scss\';\n\nexport default function Button({isActive, toggleMenu}) {\n  return (\n    <div className={styles.button}>\n        <motion.div \n            className={styles.slider}\n            animate={{top: isActive ? "-100%" : "0%"}}\n            transition={{ duration: 0.5, type: "tween", ease: [0.76, 0, 0.24, 1]}}\n        >\n            <div \n                className={styles.el}\n                onClick={() => {toggleMenu()}}\n            >\n                <PerspectiveText label="Menu"/>\n            </div>\n            <div \n                className={styles.el}\n                onClick={() => {toggleMenu()}}\n            >\n                <PerspectiveText label="Close" />\n            </div>\n        </motion.div>\n    </div>\n  )\n}\n\nfunction PerspectiveText({label}) {\n    return (    \n        <div className={styles.perspectiveText}>\n            <p>{label}</p>\n            <p>{label}</p>\n        </div>\n    )\n}',".button{\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 100px;\n  height: 40px;\n  cursor: pointer;\n  border-radius: 25px;\n  overflow: hidden;\n\n  .slider{\n      position: relative;\n      width: 100%;\n      height: 100%;\n\n      .el{\n          width: 100%;\n          height: 100%;\n          background-color: #c9fd74;\n          p{\n              margin: 0px;\n          }\n          &:nth-of-type(2){\n              background-color: black;\n              p{\n                  color: #c9fd74;\n              }\n          }\n          &:hover{\n              .perspectiveText{\n                  transform: rotateX(90deg);\n                  p{\n                      &:nth-of-type(1){\n                          transform: translateY(-100%);\n                          opacity: 0;\n                      }\n                      &:nth-of-type(2){\n                          opacity: 1;\n                      }\n                  }\n              }\n          }\n      }\n  }\n}\n\n.perspectiveText{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  transform-style: preserve-3d;\n  transition: transform 0.75s cubic-bezier(0.76, 0, 0.24, 1);\n  p{\n      transition: all 0.75s cubic-bezier(0.76, 0, 0.24, 1);\n      pointer-events: none;\n      text-transform: uppercase;\n      &:nth-of-type(2){\n          position: absolute;\n          transform-origin: bottom center;\n          transform: rotateX(-90deg) translateY(9px);\n          opacity: 0;\n      }\n  }\n}"],languages:["jsx","scss"],highlights:[[9,10],[29,30,31,32,33,34,35,36,37,38,39,40,41,42]]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-side-menu/video1.mov"}),(0,a.jsx)("h2",{children:"Creating the Menu's window"}),(0,a.jsx)("p",{children:"The window is animated with Framer Motion, a couple of properties are modified:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Top and Left: "}),"are slightly changed to create a gap between the button and the window."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Height and Width: "}),"to animate the opening and closing of window."]})]}),(0,a.jsx)(g.Z,{titles:["Header/index.jsx","Header/style.module.scss"],codes:['...\nimport { motion } from \'framer-motion\';\n\nconst menu = {\n    open: {\n        width: "480px",\n        height: "650px",\n        top: "-25px",\n        right: "-25px",\n        transition: { duration: 0.75, type: "tween", ease: [0.76, 0, 0.24, 1]}\n    },\n    closed: {\n        width: "100px",\n        height: "40px",\n        top: "0px",\n        right: "0px",\n        transition: { duration: 0.75, delay: 0.35, type: "tween", ease: [0.76, 0, 0.24, 1]}\n    }\n}\n\nexport default function index() {\n    const [isActive, setIsActive] = useState(false);\n    return (\n        <div className={styles.header}>\n             <motion.div \n                className={styles.menu}\n                variants={menu}\n                animate={isActive ? "open" : "closed"}\n                initial="closed"\n            >\n            </motion.div>\n            <Button isActive={isActive} toggleMenu={() => {setIsActive(!isActive)}}/>\n        </div>\n    )\n}',".header{\n    ...\n    .menu{\n        width: 480px;\n        height: 650px;\n        background-color:#c9fd74;\n        border-radius: 25px;\n        position: relative;\n    }\n}"],languages:["jsx","scss"],highlights:[[4,27,28],[]]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-side-menu/video2.mov"}),(0,a.jsx)("h2",{children:"Adding the Nav"}),(0,a.jsx)("p",{children:"The Nav is made by mapping an array of objects (each represent a link)."}),(0,a.jsx)(x.Z,{title:"Nav/data.js",code:'export const links = [\n    {\n        title: "Projects",\n        href: "/"\n    },\n    {\n        title: "Agency",\n        href: "/"\n    },\n    {\n        title: "Expertise",\n        href: "/"\n    },\n    ...\n]',language:"js"}),(0,a.jsxs)("p",{children:["Then for each link object, a ",(0,a.jsx)("code",{className:"language-jsx",children:"div"})," and a ",(0,a.jsx)("code",{className:"language-jsx",children:"a"})," is returned. The div is then animated using these properties:"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Opacity:"})," from 0 to 1"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"RotateX:"})," from 90 to 0"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"TranslateY:"})," from 80 to 0"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"TranslateX:"})," from -20 to 0"]})]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:["The parent of each link have a ",(0,a.jsx)("code",{className:"language-jsx",children:"perspective: 120px"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"perspective-origin: bottom"}),", which enhances the effect of the above properties."]}),(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," The delay between each animation is made through the ",(0,a.jsx)("code",{className:"language-jsx",children:"custom"})," property of Framer Motion, which is given to the definiton of the variants."]})]}),(0,a.jsx)(g.Z,{titles:["Nav/index.jsx","Nav/style.module.scss","Nav/anim.js"],codes:['import styles from \'./style.module.scss\';\nimport { motion } from \'framer-motion\';\nimport { links } from \'./data\';\nimport { perspective } from "./anim";\n\nexport default function index() {\n  return (\n    <div className={styles.nav}>\n       <div className={styles.body}>\n        {\n            links.map( (link, i) => {\n                const { title, href } = link;\n                return (\n                    <div key={`b_${i}`} className={styles.linkContainer}>\n                        <motion.div\n                          href={href}\n                          custom={i}\n                          variants={perspective}\n                          initial="initial"\n                          animate="enter"\n                          exit="exit"\n                        >\n                            <a>\n                                {title}\n                            </a>\n                        </motion.div>\n                    </div>\n                )\n            })\n        }\n       </div>\n    </div>\n  )\n}',".nav{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 100px 40px 50px 40px;\n    height: 100%;\n    box-sizing: border-box;\n    .body{\n        display: flex;\n        gap: 10px;\n        flex-direction: column;\n        .linkContainer{\n            perspective: 120px;\n            perspective-origin: bottom;\n        }\n        a{\n            text-decoration: none;\n            color: black;\n            font-size: 46px;\n        }\n    }\n}",'export const perspective = {\n    initial: {\n        opacity: 0,\n        rotateX: 90,\n        translateY: 80,\n        translateX: -20,\n    },\n    enter: (i) => ({\n        opacity: 1,\n        rotateX: 0,\n        translateY: 0,\n        translateX: 0,\n        transition: {\n            duration: 0.65, \n            delay: 0.5 + (i * 0.1), \n            ease: [.215,.61,.355,1],\n            opacity: { duration: 0.35}\n        }\n    }),\n    exit: {\n        opacity: 0,\n        transition: { duration: 0.5, type: "linear", ease: [0.76, 0, 0.24, 1]}\n    }\n}'],languages:["jsx","scss","js"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-side-menu/video3.mov"}),(0,a.jsx)("h2",{children:"Adding the Footer"}),(0,a.jsx)("p",{children:"The implementation of the footer is very similar to the implementation of the Nav. However, instead of animating a bunch of different properties, only the y value is modified."}),(0,a.jsx)(x.Z,{title:"Nav/data.js",code:'...\n\nexport const footerLinks = [\n  {\n      title: "Facebook",\n      href: "/"\n  },\n  {\n      title: "LinkedIn",\n      href: "/"\n  },\n  {\n      title: "Instagram",\n      href: "/"\n  },\n  {\n      title: "Twitter",\n      href: "/"\n  }\n]',language:"js"}),(0,a.jsx)(g.Z,{titles:["Nav/index.jsx","Nav/style.module.scss","Nav/anim.js"],codes:['import styles from \'./style.module.scss\';\nimport { motion } from \'framer-motion\';\nimport { links, footerLinks } from \'./data\';\nimport { perspective, slideIn } from "./anim";\n\nexport default function index() {\n  return (\n    <div className={styles.nav}>\n       ...\n       <motion.div className={styles.footer}>\n            {\n                footerLinks.map( (link, i) => {\n                    const { title, href } = link;\n                    return (\n                        <motion.a \n                            variants={slideIn}\n                            custom={i} \n                            initial="initial"\n                            animate="enter"\n                            exit="exit"\n                            key={`f_${i}`}\n                        >\n                            {title}\n                        </motion.a>\n                    )\n                })\n            }\n       </motion.div>\n    </div>\n  )\n}',".nav{\n    ...\n    .footer{\n        display: flex;\n        flex-wrap: wrap;\n        a{\n            width: 50%;\n            margin-top: 5px;\n        }\n    }\n}",'...\n\nexport const slideIn = {\n  initial: {\n      opacity: 0,\n      y: 20\n  },\n  enter: (i) => ({\n      opacity: 1,\n      y: 0,\n      transition: { \n          duration: 0.5,\n          delay: 0.75 + (i * 0.1), \n          ease: [.215,.61,.355,1]\n      }\n  }),\n  exit: {\n      opacity: 0,\n      transition: { duration: 0.5, type: "tween", ease: "easeInOut"}\n  }\n}'],languages:["jsx","scss","js"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/awwwards-side-menu/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Very nice menu by the super sick agency Agence Cartier, nice to see how slick of an effect we can get by using CSS perspectives with rotation values! Hope you learned something."}),(0,a.jsx)("p",{children:"-Oli"})]})}function cards_parallax_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"Rendering the Sticky Cards"}),(0,a.jsx)("p",{children:"The first thing I set up to render the cards in a more efficient way, is to use an array of object. That way I can simply map it and return everything I need. Here's how it looks:"}),(0,a.jsx)(x.Z,{title:"src/data.js",code:'export const projects = [\n  {\n    title: "Matthias Leidinger",\n    description: "Originally hailing from Austria, Berlin-based photographer Matthias Leindinger is a young creative brimming with talent and ideas.",\n    src: "rock.jpg",\n    link: "https://www.ignant.com/2023/03/25/ad2186-matthias-leidingers-photographic-exploration-of-awe-and-wonder/",\n    color: "#BBACAF"\n  },\n  {\n    title: "Cl\xe9ment Chapillon",\n    description: "This is a story on the border between reality and imaginary, about the contradictory feelings that the insularity of a rocky, arid, and wild territory provokes”—so French photographer Cl\xe9ment Chapillon describes his latest highly captivating project Les rochers fauves (French for ‘The tawny rocks’).",\n    src: "tree.jpg",\n    link: "https://www.ignant.com/2022/09/30/clement-chapillon-questions-geographical-and-mental-isolation-with-les-rochers-fauves/",\n    color: "#977F6D"\n  },\n  {\n    title: "Zissou",\n    description: "Though he views photography as a medium for storytelling, Zissou’s images don’t insist on a narrative. Both crisp and ethereal, they’re encoded with an ambiguity—a certain tension—that lets the viewer find their own story within them.",\n    src: "water.jpg",\n    link: "https://www.ignant.com/2023/10/28/capturing-balis-many-faces-zissou-documents-the-sacred-and-the-mundane-of-a-fragile-island/",\n    color: "#C2491D"\n  },\n  ...\n]',language:"js"}),(0,a.jsx)("h3",{children:"Page.js"}),(0,a.jsxs)("p",{children:["Then I can use that array inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," to render all the cards:"]}),(0,a.jsx)(g.Z,{titles:["app/page.js","app/page.module.css"],codes:["'use client';\nimport styles from './page.module.css'\nimport { projects } from '../data';\nimport Card from '../components/Card';\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n      {\n        projects.map( (project, i) => {\n          return <Card key={`p_${i}`} {...project} i={i}/>\n        })\n      }\n    </main>\n  )\n}",".main{\n  margin-top: 50vh;\n  margin-bottom: 50vh;\n}"],languages:["jsx","scss"]}),(0,a.jsxs)("div",{className:"note",children:["Here I also externalize the code inside a new ",(0,a.jsx)("code",{className:"language-jsx",children:"Card"})," component."]}),(0,a.jsx)("h3",{children:"Card Component"}),(0,a.jsxs)("p",{children:["The card component is simple HTML and CSS for now, they each take ",(0,a.jsx)("code",{className:"language-jsx",children:"100vh"})," of height and they have a ",(0,a.jsx)("code",{className:"language-jsx",children:"sticky"})," position to make them stick when they reach the top of the window."]}),(0,a.jsx)(g.Z,{titles:["components/Card/index.jsx","components/Card/style.module.scss"],codes:['\'use client\'\nimport Image from \'next/image\';\nimport styles from \'./style.module.scss\';\n\nconst Card = ({title, description, src, url, color, i}) => {\n\n  return (\n    <div className={styles.cardContainer}>\n      <div \n        className={styles.card}\n        style={{backgroundColor: color, top:`calc(-5vh + ${i * 25}px)`}}\n      >\n        <h2>{title}</h2>\n        <div className={styles.body}>\n          <div className={styles.description}>\n            <p>{description}</p>\n            <span>\n              <a href={url} target="_blank">See more</a>\n              <svg width="22" height="12" viewBox="0 0 22 12" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M21.5303 6.53033C21.8232 6.23744 21.8232 5.76256 21.5303 5.46967L16.7574 0.696699C16.4645 0.403806 15.9896 0.403806 15.6967 0.696699C15.4038 0.989592 15.4038 1.46447 15.6967 1.75736L19.9393 6L15.6967 10.2426C15.4038 10.5355 15.4038 11.0104 15.6967 11.3033C15.9896 11.5962 16.4645 11.5962 16.7574 11.3033L21.5303 6.53033ZM0 6.75L21 6.75V5.25L0 5.25L0 6.75Z" fill="black"/>\n              </svg>\n            </span>\n          </div>\n\n          <div className={styles.imageContainer}>\n            <div className={styles.inner}>\n              <Image\n                fill\n                src={`/images/${src}`}\n                alt="image" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card',".cardContainer{\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: sticky;\n  top: 0px;\n  .card{\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    height: 500px;\n    width: 1000px;\n    border-radius: 25px;\n    padding:50px;\n    transform-origin: top;\n    h2{\n      text-align: center;\n      margin: 0px;\n      font-size: 28px;\n    }\n    .body{\n      display: flex;\n      height: 100%;\n      margin-top: 50px;\n      gap: 50px;\n\n      .description{\n        width: 40%;\n        position: relative;\n        top: 10%;\n        p{\n          font-size: 16px;\n          &::first-letter{\n            font-size: 28px;\n            font-family: 'Title';\n          }\n        }\n        span{\n          display: flex;\n          align-items: center;\n          gap: 5px;\n          a{\n            font-size: 12px;\n            text-decoration: underline;\n            cursor: pointer;\n          }\n        }\n      }\n\n      .imageContainer{\n        position: relative;\n        width: 60%;\n        height: 100%;\n        border-radius: 25px;\n        overflow: hidden;\n        .inner{\n          width: 100%;\n          height: 100%;\n        }\n        img{\n          object-fit: cover;\n        }\n      }\n    }\n  }\n}"],languages:["jsx","scss"],highlights:[[11],[]]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 11:"})," A dynamic top position is set depending on the index of each cards, creating a simple stacking effect. Also note that's how the color of each card is set."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cards-parallax/video1.mov"}),(0,a.jsx)("h2",{children:"On Scroll Image Scaling"}),(0,a.jsxs)("p",{children:["To scale each image on scroll, I'll use Framer Motion and the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-scroll/",children:"useScroll"})," hook and the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-transform/",children:"useTransform"})," The general concept is the more we scroll, the more I want to scale the image, here's how I did it:"]}),(0,a.jsx)(x.Z,{title:"components/Card/index.jsx",code:"...\nimport { useTransform, useScroll, motion } from 'framer-motion';\nimport { useRef } from 'react';\n\nconst Card = ({title, description, src, url, color, i}) => {\n\n  const container = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start end', 'start start']\n  })\n  const imageScale = useTransform(scrollYProgress, [0, 1], [2, 1])\n\n  return (\n    <div ref={container} className={styles.cardContainer}>\n      <div \n        className={styles.card}\n        style={{backgroundColor: color, top:`calc(-5vh + ${i * 25}px)`}}\n      >\n          ...\n          <div className={styles.imageContainer}>\n            <motion.div \n              className={styles.inner}\n              style={{scale: imageScale}}\n            >\n              <Image\n                fill\n                src={`/images/${src}`}\n                alt=\"image\" \n              />\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card",language:"js",highlights:[7,8,9,10,11,12,24]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8-11: "}),"Here I use the useScroll hook to track whenever the card enters the viewport. It returns a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})," depending, starting at the intersection of the top of the card container and the end of the window ",(0,a.jsx)("code",{className:"language-jsx",children:"'start end'"})," and ending at the intersection of the top of the card container and the start of the window ",(0,a.jsx)("code",{className:"language-jsx",children:"'start start'"})]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 12:"})," I use the useTransform hook to transform the value of the progress of the scroll ",(0,a.jsx)("code",{className:"language-jsx",children:"[0,1]"})," into a new value that I'll use for the scale of the image ",(0,a.jsx)("code",{className:"language-jsx",children:"[2,1]"})]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cards-parallax/video2.mov"}),(0,a.jsx)("h2",{children:"Cards Parallax"}),(0,a.jsxs)("p",{children:["To create the parallax, I use the same hooks as I did for the image scaling. However, instead of being localized inside a ",(0,a.jsx)("code",{className:"language-jsx",children:"Card"})," component, it will be global for the whole animation. So I'll use the ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"})," inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," for that."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client';\nimport styles from './page.module.scss'\nimport { projects } from '../data';\nimport Card from '../components/Card';\nimport { useScroll } from 'framer-motion';\nimport { useRef } from 'react';\n\nexport default function Home() {\n  const container = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start start', 'end end']\n  })\n\n  return (\n    <main ref={container} className={styles.main}>\n      {\n        projects.map( (project, i) => {\n          const targetScale = 1 - ( (projects.length - i) * 0.05);\n          return <Card key={`p_${i}`} i={i} {...project} progress={scrollYProgress} range={[i * .25, 1]} targetScale={targetScale}/>\n        })\n      }\n    </main>\n  )\n}",language:"js",highlights:[9,10,11,12,13,16,19,20]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 10:"})," Tracks the whole animation, it returns a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0 and 1"}),", 0 being when the top of the main intersects with the top of the window ",(0,a.jsx)("code",{className:"language-jsx",children:"'start start'"})," and 1 being when the end of the main intersects with the end of the window ",(0,a.jsx)("code",{className:"language-jsx",children:"'end end'"}),"."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 19: "})," A scale value that is given to the card, the first cards should have a higher target scale than the last ones."]})]})}),(0,a.jsx)("h3",{children:"Adjusting the Card Component"}),(0,a.jsx)(x.Z,{title:"components/Card/index.jsx",code:"const Card = ({i, title, description, src, url, color, progress, range, targetScale}) => {\n  ...\n  const scale = useTransform(progress, range, [1, targetScale]);\n\n  return (\n    <div ref={container} className={styles.cardContainer}>\n      <motion.div \n        className={styles.card}\n        style={{backgroundColor: color, scale, top:`calc(-5vh + ${i * 25}px)`}} \n      >\n          ...\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default Card\n",language:"js",highlights:[3,9]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 3:"})," Here the scaling of each card is dictated by the progress of the scroll and the targetScale initialized inside the page.js."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cards-parallax/video2.mov"}),(0,a.jsx)("h2",{children:"Adding a Smooth Scroll"}),(0,a.jsxs)("p",{children:["The final touch of this animation is to make everything smooth. Since the animation is fixed to the scroll, we can make it smooth by smoothing out the scroll. For that I use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/studio-freight/lenis",children:"Lenis Scroll"})]}),(0,a.jsx)(x.Z,{title:"page.js",code:"...\nimport { useRef, useEffect } from 'react';\nimport Lenis from '@studio-freight/lenis'\n\nexport default function Home() {\n  ...  \n  useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n  })\n\n  return (\n    <main ref={container} className={styles.main}>\n      ...\n    </main>\n  )\n}\n",language:"js"}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/cards-parallax/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"A very common animation, found in multiple awwwards website, and this is a nice, simple approach to it! Hope you learned something."}),(0,a.jsx)("p",{children:"-Oli"})]})}let v=".paragraph{\n  display: flex;\n  font-size: 60px;\n  line-height: 1;\n  padding: 40px;\n  max-width: 1280px;\n  color: white;\n  flex-wrap: wrap;\n  .word{\n    position: relative;\n    margin-right: 12px;\n    margin-top: 12px;\n    .shadow{\n      position: absolute;\n      opacity: 20%;\n    }\n  } \n}";function text_scroll_gradient_opacity_v2_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("p",{children:"To illustrate this animation, I'll go step by step, animating a paragraph on scroll first, then moving to a word by word animation and then doing a character by character animation. Depending on your taste (I like the word by word the best), you can choose whichever implementation you prefer."}),(0,a.jsx)("h2",{children:"Animate a Paragraph"}),(0,a.jsxs)("p",{children:["Animating a whole paragraph is the easiest approach, I'll use the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-scroll/",target:"_blank",children:"useScroll"})," hook from Framer Motion and animate the opacity on scroll."]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"})," hook returns a value between 0 and 1 depending on the progress of the scroll. We can directly use that value to modify the ",(0,a.jsx)("code",{className:"language-jsx",children:"opacity"}),"."]}),(0,a.jsx)(x.Z,{title:"useScroll hook",code:'const container = useRef(null);\nconst { scrollYProgress } = useScroll({\n  target: container,\n  offset: ["start 0.9", "start 0.25"]\n})',language:"jsx"})]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:["Notes about the ",(0,a.jsx)("b",{children:"offset:"})]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"offset"})," here specifies two intersections of the target and the container. In this case, the target is the paragraph and the container is the window by default.",(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"start"})," is the top of the target and 1 is the end of the window, so ",(0,a.jsx)("code",{className:"language-jsx",children:"0.9"})," is 10% before the end of the window. At that intersection, the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," will have a value of 0."]})]}),(0,a.jsxs)("li",{children:["The second intersection is ",(0,a.jsx)("code",{className:"language-jsx",children:'"start 0.25"'})," which is the top of the target and 25% further than the top of the window. At that intersection, the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," will have a value of 1."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["components/Paragraph.jsx","components/style.module.scss"],codes:["import { motion, useScroll, useTransform } from 'framer-motion';\nimport React, { useRef } from 'react';\nimport styles from './style.module.scss';\n\nexport default function Paragraph({paragraph}) {\n\n  const container = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: [\"start 0.9\", \"start 0.25\"]\n  })\n\n  return (\n    <motion.p \n      ref={container}         \n      className={styles.paragraph}\n      style={{opacity: scrollYProgress}}\n    >\n      {paragraph}\n    </motion.p>\n  )\n}",v],languages:["jsx","scss"]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-scroll-opacity/video1.mov"}),(0,a.jsx)("h2",{children:"Animate Word by Word"}),(0,a.jsxs)("p",{children:["The word by word will take the same concept as before for the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"}),", but now I'll separate each word into it's own component. I'll also create a range for each word, so they'll be animated one by one. For that I'll add in the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-transform/",children:"useTransform"})," hook to transform the range into an opacity."]}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," is the be the same as above"]})}),(0,a.jsx)(x.Z,{title:"Mapping the paragraph",code:'const words = paragraph.split(" ")\n\nwords.map( (word, i) => {\n  const start = i / words.length\n  const end = start + (1 / words.length)\n  return <Word key={i} progress={scrollYProgress} range={[start, end]}>{word}</Word>\n})',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"start"})," and the ",(0,a.jsx)("code",{className:"language-jsx",children:"end"})," are dictacted by the position of the word inside the paragraph. If the word is at the beginning of the paragraph, then it will have an earlier start and end point."]})}),(0,a.jsx)(x.Z,{title:"Word Component",code:"const Word = ({children, progress, range}) => {\n  const opacity = useTransform(progress, range, [0, 1])\n  return (\n    <span className={styles.word}>\n      <span className={styles.shadow}>{children}</span>\n      <motion.span style={{opacity: opacity}}>{children}</motion.span>\n    </span>\n  )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"range"})," is transformed into a value between 0 and 1 and used as an opacity."]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["components/Word.jsx","components/style.module.scss"],codes:["import { motion, useScroll, useTransform } from 'framer-motion';\nimport React, { useRef } from 'react';\nimport styles from './style.module.scss';\n\nexport default function Paragraph({paragraph}) {\n\n  const container = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: [\"start 0.9\", \"start 0.25\"]\n  })\n\n  const words = paragraph.split(\" \")\n  return (\n    <p \n      ref={container}         \n      className={styles.paragraph}\n    >\n    {\n      words.map( (word, i) => {\n        const start = i / words.length\n        const end = start + (1 / words.length)\n        return <Word key={i} progress={scrollYProgress} range={[start, end]}>{word}</Word>\n      })\n    }\n    </p>\n  )\n}\n\nconst Word = ({children, progress, range}) => {\n  const opacity = useTransform(progress, range, [0, 1])\n  return <span className={styles.word}>\n    <span className={styles.shadow}>{children}</span>\n    <motion.span style={{opacity: opacity}}>{children}</motion.span>\n  </span>\n}",v],languages:["jsx","scss"]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-scroll-opacity/video2.mov"}),(0,a.jsx)("h2",{children:"Animate Character by Character"}),(0,a.jsx)("p",{children:"And finally we can add another layer by splitting the words by character. Then we also need to split the range of each words into a new range for each of their characters."}),(0,a.jsx)(x.Z,{title:"Mapping the words",code:'const Word = ({children, progress, range}) => {\n  const amount = range[1] - range[0]\n  const step = amount / children.length\n  return (\n    <span className={styles.word}>\n      {\n        children.split("").map((char, i) => {\n          const start = range[0] + (i * step);\n          const end = range[0] + ((i + 1) * step)\n          return <Char key={`c_${i}`} progress={progress} range={[start, end]}>{char}</Char>\n        })\n      }\n    </span>\n  )\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["To split the range of each words into a new range for each character, I calculate the ",(0,a.jsx)("code",{className:"language-jsx",children:"amount"})," and from it a ",(0,a.jsx)("code",{className:"language-jsx",children:"step"})," depending on the length of the word."]})})}),(0,a.jsx)(x.Z,{title:"Character component",code:"const Char = ({children, progress, range}) => {\n  const opacity = useTransform(progress, range, [0,1])\n  return (\n    <span>\n      <span className={styles.shadow}>{children}</span>\n      <motion.span style={{opacity: opacity}}>{children}</motion.span>\n    </span>\n  )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(g.Z,{titles:["components/Character.jsx","components/style.module.scss"],codes:['import { useScroll, useTransform, motion } from \'framer-motion\';\nimport React, { useRef } from \'react\';\nimport styles from \'./style.module.scss\';\n\nexport default function Paragraph({paragraph}) {\n\n  const container = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ["start 0.9", "start 0.25"]\n  })\n\n  const words = paragraph.split(" ")\n  return (\n    <p \n      ref={container}         \n      className={styles.paragraph}\n    >\n    {\n      words.map( (word, i) => {\n        const start = i / words.length\n        const end = start + (1 / words.length)\n        return <Word key={i} progress={scrollYProgress} range={[start, end]}>{word}</Word>\n      })\n    }\n    </p>\n  )\n}\n\nconst Word = ({children, progress, range}) => {\n  const amount = range[1] - range[0]\n  const step = amount / children.length\n  return (\n    <span className={styles.word}>\n      {\n        children.split("").map((char, i) => {\n          const start = range[0] + (i * step);\n          const end = range[0] + ((i + 1) * step)\n          return <Char key={`c_${i}`} progress={progress} range={[start, end]}>{char}</Char>\n        })\n      }\n    </span>\n  )\n}\n\nconst Char = ({children, progress, range}) => {\n  const opacity = useTransform(progress, range, [0,1])\n  return (\n    <span>\n      <span className={styles.shadow}>{children}</span>\n      <motion.span style={{opacity: opacity}}>{children}</motion.span>\n    </span>\n  )\n}',v],languages:["jsx","scss"]}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-scroll-opacity/video3.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Depending on your taste, you can choose whichever implementation you prefer. It's a classic animation that I've seen everywhere but it's mostly made with GSAP. So I hope you learned something from this Framer Motion implementation."}),(0,a.jsx)("p",{children:"-Oli"})]})}function parallax_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will also use GSAP for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i gsap"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"GSAP vs Framer Motion"}),(0,a.jsx)("p",{children:"There are big debates about using GSAP and Framer Motion inside a React app. I think both are great and they have their respective strengths. I believe it depends on the project, even tho I slightly prefer Framer Motion for most cases when using React."}),(0,a.jsx)("p",{children:"So in this tutorial I'll remake the same animations using both GSAP and Framer Motion, so you can draw your own conclusions."}),(0,a.jsx)("h2",{children:"Rendering the layout"}),(0,a.jsx)("p",{children:"The layout will be approximately the same for GSAP and Framer Motion, but it's not the focus of this tutorial so I'll go rapidely over it."}),(0,a.jsx)(g.Z,{titles:["/components/layout.js","page.module.scss"],codes:["'use client';\nimport styles from '../../app/page.module.scss';\nimport Picture1 from '../../../public/medias/1.jpg';\nimport Picture2 from '../../../public/medias/2.jpg';\nimport Picture3 from '../../../public/medias/3.jpg';\nimport Image from \"next/image\";\n\nconst word = \"with gsap\";\n\nexport default function Index() {\n    const images = [Picture1, Picture2, Picture3];\n    return (\n        <div className={styles.container}>\n            <div className={styles.body}>\n                <h1>Parallax</h1>\n                <h1>Scroll</h1>\n                <div className={styles.word}>\n                    <p>\n                        {\n                            word.split(\"\").map((letter, i) => {\n                                return <span key={`l_${i}`}>{letter}</span>\n                            })\n                        }\n                    </p>\n                </div>\n            </div>\n            <div className={styles.images}>\n                {\n                    images.map( (image, i) => {\n                        return <div key={`i_${i}`} className={styles.imageContainer}>\n                            <Image \n                                src={image}\n                                placeholder=\"blur\"\n                                alt=\"image\"\n                                fill\n                            />\n                        </div>\n                    })\n                }\n            </div>\n        </div>\n    )\n}",".container{\n    margin-top: 10vh;\n    min-height: 100vh;\n    .body{\n        margin-left: 10vw;\n        h1{\n            margin: 0px;\n            margin-top: 10px;\n            font-size: 5vw;\n            line-height: 5vw;\n            text-transform: uppercase;\n        }\n        p{\n            color: white;\n            margin: 0px;\n            margin-top: 10px;\n            font-size: 3vw;\n            text-transform: uppercase;\n            span{\n                position: relative;\n            }\n        }\n    }\n    .images{\n        display: flex;\n        width: 100%;\n        justify-content: center;\n        position: relative;\n        margin-top: 5vh;\n        .imageContainer{\n            position: absolute;\n            img{\n                object-fit: cover;\n            }\n            &:nth-of-type(1){\n                height: 60vh;\n                width: 50vh;\n                z-index: 1;\n            }\n            &:nth-of-type(2){\n                left: 55vw;\n                top: 15vh;\n                height: 40vh;\n                width: 30vh;\n                z-index: 2;\n            }\n            &:nth-of-type(3){\n                left: 27.5vw;\n                top: 40vh;\n                height: 25vh;\n                width: 20vh;\n                z-index: 3;\n            }\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/parallax-scroll/1.jpg",layout:"fill",objectFit:"cover",priority:!1,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Parallax with GSAP"}),(0,a.jsx)("p",{children:"Now that the layout is done, we can add in GSAP to create the parallax effect."}),(0,a.jsx)("p",{children:"The first important thing with GSAP is to add a timeline and inside of it create a ScrollTrigger. There are multiple ways of doing this, but I find using a timeline is the cleanest way of doing it. That way you have a single ScrollTrigger instance for multiple animations."}),(0,a.jsx)(x.Z,{title:"GSAP Timeline with ScrollTrigger",code:'const tl = gsap.timeline({\n    scrollTrigger: {\n        trigger: container.current,\n        start: "top bottom",\n        end: "bottom top",\n        scrub: true,\n    },\n})',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"Scrub: true"})," is used to link the animations directly to the scrollbar"]})})}),(0,a.jsx)("p",{children:"Then we can add all the different animations to the timeline."}),(0,a.jsx)(x.Z,{title:"Timeline animations",code:"tl.to(title1.current, {y: -50}, 0)\n\n//or with multiple refs\nlettersRef.current.forEach((letter, i) => {\n    tl.to(letter, {\n        top: Math.floor(Math.random() * -75) - 25,\n    }, 0)\n})",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," is added as a parameter to specify that the animations inside the timeline should happen at the same time."]})})}),(0,a.jsx)("h3",{children:"Putting it all together"}),(0,a.jsx)(x.Z,{title:"/components/GSAP",code:'\'use client\';\nimport { useLayoutEffect, useRef } from "react";\nimport styles from \'../../app/page.module.scss\';\nimport gsap from \'gsap\';\nimport { ScrollTrigger } from \'gsap/ScrollTrigger\';\nimport Picture1 from \'../../../public/medias/1.jpg\';\nimport Picture2 from \'../../../public/medias/2.jpg\';\nimport Picture3 from \'../../../public/medias/3.jpg\';\nimport Image from "next/image";\ngsap.registerPlugin(ScrollTrigger)\n\nconst word = "with gsap";\nconst images = [Picture1, Picture2, Picture3];\n\nexport default function Index() {\n    const container = useRef(null);\n    const title1 = useRef(null);\n    const lettersRef = useRef([])\n    const imagesRef = useRef([])\n\n    useLayoutEffect( () => {\n        const context = gsap.context( () => {\n            const tl = gsap.timeline({\n                scrollTrigger: {\n                    trigger: container.current,\n                    start: "top bottom",\n                    end: "bottom top",\n                    scrub: true,\n                },\n            })\n            .to(title1.current, {y: -50}, 0)\n            .to(imagesRef.current[1], {y: -150}, 0)\n            .to(imagesRef.current[2], {y: -255}, 0)\n            lettersRef.current.forEach((letter, i) => {\n                tl.to(letter, {\n                    top: Math.floor(Math.random() * -75) - 25,\n                }, 0)\n            })\n            \n        })\n        return () => context.revert();\n    }, [])\n\n    return (\n        <div ref={container} className={styles.container}>\n            <div className={styles.body}>\n                <h1 ref={title1}>Parallax</h1>\n                <h1>Scroll</h1>\n                <div className={styles.word}>\n                    <p>\n                        {\n                            word.split("").map((letter, i) => {\n                                return <span key={`l_${i}`} ref={el => lettersRef.current[i] = el}>{letter}</span>\n                            })\n                        }\n                    </p>\n                </div>\n            </div>\n            <div className={styles.images}>\n                {\n                    images.map( (image, i) => {\n                        return <div key={`i_${i}`} ref={el => imagesRef.current[i] = el} className={styles.imageContainer}>\n                            <Image \n                                src={image}\n                                placeholder="blur"\n                                alt="image"\n                                fill\n                            />\n                        </div>\n                    })\n                }\n            </div>\n        </div>\n    )\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Here I'm using the ",(0,a.jsx)("code",{className:"language-jsx",children:"useLayoutEffect"})," because it is executed before the DOM is painted, in most cases that's what you want when creating a GSAP animation to avoid flashes."]}),(0,a.jsxs)("li",{children:["I'm also using the ",(0,a.jsx)("code",{className:"language-jsx",children:"gsap.context"})," to collect all animations in one place that I can then kill in the return function of the ",(0,a.jsx)("code",{className:"language-jsx",children:"useLayoutEffect"}),"."]})]})}),(0,a.jsx)("h3",{children:"We should have something like this"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/parallax-scroll/1.mov"}),(0,a.jsx)("h2",{children:"Parallax with Framer Motion"}),(0,a.jsx)("p",{children:"Now I'll do the same thing but Framer Motion. it's quite similar to the GSAP implementation, I don't have a clear winner but I do believe the Framer Motion implementation is a bit more clean and readable."}),(0,a.jsxs)("p",{children:["The first thing we need to use is the ",(0,a.jsx)("code",{className:"language-jsx",children:"useScroll"})," hook:"]}),(0,a.jsx)(x.Z,{title:"useScroll hook",code:"const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start end', 'end start']\n})",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Here we can track the position of the target inside the window. The ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," is a value between 0 and 1 depending on that progress."]})})}),(0,a.jsxs)("p",{children:["Then we can use the ",(0,a.jsx)("code",{className:"language-jsx",children:"useTransform"})," hook to transform the value of the scrollYProgress into another value."]}),(0,a.jsx)(x.Z,{title:"useTransform hook",code:"const sm = useTransform(scrollYProgress, [0, 1], [0, -50]);",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Here ",(0,a.jsx)("code",{className:"language-jsx",children:"sm"})," will be 0 when the scrollYProgress is 0. It will be 50 when the scrollYProgress is 1. It will also take all the values in between those two values."]})})}),(0,a.jsx)("h3",{children:"Putting it all together"}),(0,a.jsx)(x.Z,{title:"/components/FramerMotion",code:"'use client';\nimport { useRef } from \"react\";\nimport styles from '../../app/page.module.scss';\nimport Picture1 from '../../../public/medias/4.jpg';\nimport Picture2 from '../../../public/medias/5.jpg';\nimport Picture3 from '../../../public/medias/6.jpg';\nimport Image from \"next/image\";\nimport { motion, useScroll, useTransform } from 'framer-motion';\n\nconst word = \"with framer-motion\";\n\nexport default function Index() {\n    const container = useRef(null);\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ['start end', 'end start']\n    })\n    const sm = useTransform(scrollYProgress, [0, 1], [0, -50]);\n    const md = useTransform(scrollYProgress, [0, 1], [0, -150]);\n    const lg = useTransform(scrollYProgress, [0, 1], [0, -250]);\n\n    const images = [\n        {\n            src: Picture1,\n            y: 0\n        },\n        {\n            src: Picture2,\n            y: lg\n        },\n        {\n            src: Picture3,\n            y: md\n        }\n    ];\n\n    return (\n        <div ref={container} className={styles.container}>\n            <div className={styles.body}>\n                <motion.h1 style={{y: sm}}>Parallax</motion.h1>\n                <h1>Scroll</h1>\n                <div className={styles.word}>\n                    <p>\n                        {\n                            word.split(\"\").map((letter, i) => {\n                                const y = useTransform(scrollYProgress, [0, 1], [0, Math.floor(Math.random() * -75) - 25])\n                                return <motion.span style={{top: y}} key={`l_${i}`} >{letter}</motion.span>\n                            })\n                        }\n                    </p>\n                </div>\n            </div>\n            <div className={styles.images}>\n                {\n                    images.map( ({src, y}, i) => {\n                        return <motion.div style={{y}} key={`i_${i}`} className={styles.imageContainer}>\n                            <Image \n                                src={src}\n                                placeholder=\"blur\"\n                                alt=\"image\"\n                                fill\n                            />\n                        </motion.div>\n                    })\n                }\n            </div>\n        </div>\n    )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/parallax-scroll/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"Hope you liked the comparison between the two libraries. I find it useful to see how two identical animations can be made with 2 different libraries when having to make a choice between them."}),(0,a.jsx)("p",{children:"-Oli"})]})}function zoom_parallax_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"Adding a smooth scroll"}),(0,a.jsx)("p",{children:"We can make this animation first by first adding a smooth scroll. There are many ways of doing this and it's not necessary for the animation, but I personally like it."}),(0,a.jsx)("p",{children:"For that, I'll use Lenis Scroll:"}),(0,a.jsx)(x.Z,{title:"Smooth Scroll",code:"useEffect( () => {\n    const lenis = new Lenis()\n   \n    function raf(time) {\n        lenis.raf(time)\n        requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n},[])",language:"jsx"}),(0,a.jsx)("h2",{children:"The Basics"}),(0,a.jsxs)("p",{children:["Here's the basics of making this animations. We want to have a main container with a long scroll, something like ",(0,a.jsx)("code",{className:"language-jsx",children:"300vh"})," and inside of it have a ",(0,a.jsx)("code",{className:"language-jsx",children:"sticky"})," container of ",(0,a.jsx)("code",{className:"language-jsx",children:"100vh"})," that will stick throughout the whole length of its parent."]}),(0,a.jsx)("p",{children:"Then we can track the progress of the scroll and scale all our divs consequently."}),(0,a.jsx)(x.Z,{title:"Scale based on the scroll",code:"const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start start', 'end end']\n})\n\nconst scale4 = useTransform(scrollYProgress, [0, 1], [1, 4]);",language:"jsx"}),(0,a.jsx)("p",{children:"Here's how it would look for the main image at the center."}),(0,a.jsx)(g.Z,{titles:["ZoomParallax/index.jsx","ZoomParallax/styles.module.scss"],codes:["import styles from './styles.module.scss';\nimport Picture1 from '../../../public/images/1.jpeg';\nimport Image from 'next/image';\nimport { useScroll, useTransform, motion} from 'framer-motion';\nimport { useRef } from 'react';\n\nexport default function Index() {\n\n    const container = useRef(null);\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ['start start', 'end end']\n    })\n\n    const scale = useTransform(scrollYProgress, [0, 1], [1, 4]);\n\n    return (\n        <div ref={container} className={styles.container}>\n            <div className={styles.sticky}>\n                <motion.div style={{scale}} className={styles.el}>\n                    <div className={styles.imageContainer}>\n                        <Image\n                            src={Picture1}\n                            fill\n                            alt=\"image\"\n                            placeholder='blur'\n                        />\n                    </div>\n                </motion.div>\n            </div>\n        </div>\n    )\n}",".container{\n    height: 300vh;\n    position: relative;\n    .sticky{\n        position: sticky;\n        overflow: hidden;\n        top: 0;\n        height: 100vh;\n        .el{\n            width: 100%;\n            height: 100%;\n            top: 0;\n            position: absolute;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            .imageContainer{\n                position: relative;\n                width: 25vw;\n                height: 25vh;\n                img{\n                    object-fit: cover;\n                }\n            }\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Since the image-container has a width and height of ",(0,a.jsx)("code",{className:"language-jsx",children:"25vw"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"25vh"}),", all we have to do is scale it from ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})," to ",(0,a.jsx)("code",{className:"language-jsx",children:"4"})," to make the image take the full screen at any screen size."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/zoom-parallax/video1.mov"}),(0,a.jsx)("h2",{children:"Adding the other images"}),(0,a.jsx)("p",{children:"To make the code extra clean, I create an array of images with different scale values. I can then simply loop that array to render all the images."}),(0,a.jsx)(x.Z,{title:"Array of images",code:"const scale4 = useTransform(scrollYProgress, [0, 1], [1, 4]);\nconst scale5 = useTransform(scrollYProgress, [0, 1], [1, 5]);\nconst scale6 = useTransform(scrollYProgress, [0, 1], [1, 6]);\nconst scale8 = useTransform(scrollYProgress, [0, 1], [1, 8]);\nconst scale9 = useTransform(scrollYProgress, [0, 1], [1, 9]);\n\nconst pictures = [\n    {\n        src: Picture1,\n        scale: scale4\n    },\n    {\n        src: Picture2,\n        scale: scale5\n    },\n    {\n        src: Picture3,\n        scale: scale6\n    },\n    ...\n]\n",language:"jsx"}),(0,a.jsx)("p",{children:"Now that we have a clean structure, I can simply loop the array and render all my images. Most of the work is then done in CSS to place all the images correctly."}),(0,a.jsx)(g.Z,{titles:["ZoomParallax/index.jsx","ZoomParallax/styles.module.scss"],codes:["return (\n    <div ref={container} className={styles.container}>\n        <div className={styles.sticky}>\n            {\n                pictures.map( ({src, scale}, index) => {\n                    return <motion.div key={index} style={{scale}} className={styles.el}>\n                        <div className={styles.imageContainer}>\n                            <Image\n                                src={src}\n                                fill\n                                alt=\"image\"\n                                placeholder='blur'\n                            />\n                        </div>\n                    </motion.div>\n                })\n            }\n        </div>\n    </div>\n)",".el{\n    width: 100%;\n    height: 100%;\n    top: 0;\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    .imageContainer{\n        position: relative;\n        width: 25vw;\n        height: 25vh;\n        img{\n            object-fit: cover;\n        }\n    }\n    &:nth-of-type(2){\n        .imageContainer{\n            top: -30vh;\n            left: 5vw;\n            width: 35vw;\n            height: 30vh;\n        }\n    }\n    &:nth-of-type(3){\n        .imageContainer{\n            top: -10vh;\n            left: -25vw;\n            width: 20vw;\n            height: 45vh;\n        }\n    }\n    &:nth-of-type(4){\n        .imageContainer{\n            left: 27.5vw;\n            width: 25vw;\n            height: 25vh;\n        }\n    }\n    &:nth-of-type(5){\n        .imageContainer{\n            top: 27.5vh;\n            left: 5vw;\n            width: 20vw;\n            height: 25vh;\n        }\n    }\n    &:nth-of-type(6){\n        .imageContainer{\n            top: 27.5vh;\n            left: -22.5vw;\n            width: 30vw;\n            height: 25vh;\n        }\n    }\n    &:nth-of-type(7){\n        .imageContainer{\n            top: 22.5vh;\n            left: 25vw;\n            width: 15vw;\n            height: 15vh;\n        }\n    }\n}"],languages:["jsx","scss"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["To avoid making the divs overlap on top of each others as they are scaling, I'm actually scaling the ",(0,a.jsx)("code",{className:"language-jsx",children:"el"})," and not the image-container. That way, the scaling is more natural and is keeping it's original layout."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/zoom-parallax/video2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"Quick, clean and easy like this!"}),(0,a.jsx)("p",{children:"Hope you liked the animation, it's a good trick to scale the parent to keep the original layout when doing a zoom parallax like this. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_gooey_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("p",{children:"To find out more on how to make this animation, you can check these links, they greatly helped me understand this animation:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)(d(),{href:"https://codepen.io/supah/pen/abVGjVq",target:"_blank",children:"https://codepen.io/supah/pen/abVGjVq"})}),(0,a.jsx)("li",{children:(0,a.jsx)(d(),{href:"https://www.studiogusto.com/studio",target:"_blank",children:"https://www.studiogusto.com/studio"})}),(0,a.jsx)("li",{children:(0,a.jsx)(d(),{href:"https://frontend.horse/articles/gooey-countdown-svg/",target:"_blank",children:"https://frontend.horse/articles/gooey-countdown-svg/"})})]}),(0,a.jsx)("p",{children:"This animation presents multiple interesting animation techniques, mainly on knowing how to work with SVG filters and also reading and animating along an SVG path."}),(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Sass for the stylesheets, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h3",{children:"Overal concept"}),(0,a.jsx)("p",{children:"Here's how this animation is made:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Render all the numbers as SVG ",(0,a.jsx)("code",{className:"language-jsx",children:"path"})]}),(0,a.jsxs)("li",{children:["Render 30 circles as SVG ",(0,a.jsx)("code",{className:"language-jsx",children:"circle"})]}),(0,a.jsx)("li",{children:"Animate the circles along the number's path"}),(0,a.jsxs)("li",{children:["Add a ",(0,a.jsx)("code",{className:"language-jsx",children:"feGaussianBlur"})," and a ",(0,a.jsx)("code",{className:"language-jsx",children:"feColorMatrix"})," filter on the circles."]})]}),(0,a.jsx)("h2",{children:"Rendering the numbers"}),(0,a.jsxs)("p",{children:["The first step is to render all the numbers as SVG ",(0,a.jsx)("code",{className:"language-jsx",children:"path"}),". "]}),(0,a.jsxs)("p",{children:["The goal here is to draw an SVG path for each numbers you need. You can that in either Figma or Illustrator and use ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.svgviewer.dev/",children:"this"})," tool to visualize your SVG code."]}),(0,a.jsxs)("p",{children:["Here I put the ",(0,a.jsx)("code",{className:"language-jsx",children:"d"})," attribute of each of my numbers inside an array that I can then loop to render all of them."]}),(0,a.jsx)(x.Z,{title:"Array of d attributes",code:'const numbers = [\n    "M87.9,79.2c1.1-0.4,53.7-39.2,54.9-39.1v180.5",\n    "M81.7,85.7c-1.4-67,112.3-55.1,90.2,11.6c-12.6,32-70.6,83.7-88.8,113.7h105.8",\n    "M74.8,178.5c3,39.4,63.9,46.7,88.6,23.7c34.3-35.1,5.4-75.8-41.7-77c29.9,5.5,68.7-43.1,36.5-73.7 c-23.4-21.5-76.5-11.1-78.6,25",\n    "M161.9,220.8 161.9,41 72.6,170.9 208.2,170.9",\n    "M183.2,43.7H92.1l-10,88.3c0,0,18.3-21.9,51-21.9s49.4,32.6,49.4,48.2c0,22.2-9.5,57-52.5,57s-51.4-36.7-51.4-36.7"\n]',language:"jsx"}),(0,a.jsx)("p",{children:"And here I render all of them and dynamically add them inside an array:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'export default function Home() {\n    const paths = useRef([]);\n    return (\n        <main className={styles.main}>\n            <svg viewBox="0 0 256 256">\n                <g>\n                    {\n                        numbers.map((path, i) => {\n                            return <path key={`p_${i}`} ref={ref => paths.current[i] = ref} d={path}/>\n                        })\n                    }\n                </g>\n            </svg>\n        </main>\n    )\n}',language:"jsx"}),(0,a.jsx)("h2",{children:"Rendering the circles"}),(0,a.jsx)("p",{children:"To create the Gooey effect, I'll move a bunch of circles one after the other along the line of each number's SVG path."}),(0,a.jsx)("p",{children:"The first step to do that is render 30 circles:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'export default function Home() {\n\n    ...\n    const circles = useRef([]);\n    const nbOfCircles = 30;\n    const radius = 20;\n\n    return (\n        <main className={styles.main}>\n            <svg viewBox="0 0 256 256">\n                ...\n                <g>\n                    {\n                        [...Array(nbOfCircles)].map( (_, i) => {\n                            return <circle key={`c_${i}`} ref={ref => circles.current[i] = ref} cx="128" cy="128" r={radius} />\n                        })\n                    }\n                </g>\n            </svg>\n        </main>\n    )\n}',language:"jsx",highlights:[15]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["Each circle has a ",(0,a.jsx)("code",{className:"language-jsx",children:"cx"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"cy"})," value of 128, which is the center point of the SVG, which has a bounding box of ",(0,a.jsx)("code",{className:"language-jsx",children:"0 0 256 256"}),"."]})}),(0,a.jsx)("h2",{children:"Animating the circles"}),(0,a.jsx)("p",{children:"To control the animation, we can render a bunch of paragraphs that will toggle a state on click:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'const [index, setIndex] = useState(0);\n\nreturn (\n    <main className={styles.main}>\n        <div className={styles.numbers}>\n            {\n                numbers.map((_, i) => {\n                    return <p style={{color: i == index ? "red" : "black"}} onClick={() => {setIndex(i)}}>{i + 1}</p>\n                })\n            }\n        </div>\n        ...\n)   </main>\n',language:"jsx"}),(0,a.jsx)("p",{children:"Here when the index gets changed, we take each circle and animate them along the path of each number:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'const [index, setIndex] = useState(0);\nconst circles = useRef([]);\nconst paths = useRef([]);\nconst nbOfCircles = 30;\n\nuseEffect( () => {\n    const length = paths.current[index].getTotalLength();\n    const step = length / nbOfCircles;\n\n    circles.current.forEach((circle, i) => {\n        const { x, y } = paths.current[index].getPointAtLength(i * step);\n        animate(circle, \n            { cx: x, cy: y}, \n            { delay: i * 0.025, ease: "easeOut"}\n        )\n    })\n}, [index])',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 7:"})," Calculate the path length of the current selected number."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8:"})," Calculate a step depending on the length of that path and the number of circles."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 10-16:"})," Animate each circle to a specific point along the SVG."]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-gooey/1.mov"}),(0,a.jsx)("h2",{children:"Adding the filters"}),(0,a.jsx)("p",{children:"Two filters are needed to create the gooey effect:"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"feGaussianBlur:"})," blurs the input by the amount specified in ",(0,a.jsx)("code",{className:"language-jsx",children:"stdDeviation"}),"."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"feColorMatrix:"})," changes the color of the input based on a transformation matrix."]})]}),(0,a.jsx)(x.Z,{title:"page.js",code:'<defs>\n<filter id="filter">\n    <feGaussianBlur in="SourceAlpha" stdDeviation="20" result="blur" />\n    <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 25 -15" result="filter" />\n</filter>\n</defs>',language:"jsx"}),(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"feGaussianBlur"})," is pretty straight forward and doesn't need much explanation. It's a standard gaussian blur that's adjusted with the ",(0,a.jsx)("code",{className:"language-jsx",children:"stdDeviation"}),"."]}),(0,a.jsx)(x.Z,{title:"page.js",code:'<feGaussianBlur in="SourceAlpha" stdDeviation="20" result="blur" />',language:"jsx"}),(0,a.jsxs)("p",{children:["However, the ",(0,a.jsx)("code",{className:"language-jsx",children:"feColorMatrix"})," is quite tricky and necessary to understand how the blur gooey effect is created. I highly suggest reading ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix",children:"this"})," in order to understand."]}),(0,a.jsxs)("p",{children:["First of all, the ",(0,a.jsx)("b",{children:"identity matrix"}),", meaning when there are no transformations applied by the filter looks like this:"]}),(0,a.jsx)(x.Z,{title:"Identity matrix",code:"     R G B A W\nR' | 1 0 0 0 0 |\nG' | 0 1 0 0 0 |\nB' | 0 0 1 0 0 |\nA' | 0 0 0 1 0 |",language:"jsx"}),(0,a.jsxs)("p",{children:["Then what we do is modify that matrix in the ",(0,a.jsx)("code",{className:"language-jsx",children:"alpha"})," channel only."]}),(0,a.jsx)(x.Z,{title:"Modified matrix",code:"     R G B A W\nR' | 1 0 0 0 0 |\nG' | 0 1 0 0 0 |\nB' | 0 0 1 0 0 |\nA' | 0 0 0 25 -15 |",language:"jsx"}),(0,a.jsx)("p",{children:"And here's how each number of the alpha channel of the matrix is added to create the new alpha:"}),(0,a.jsx)(x.Z,{title:"Modified matrix",code:"A' = a1*R + a2*G + a3*B + a4*A + a5",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Here's a little explanation:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Since the ",(0,a.jsx)("code",{className:"language-jsx",children:"feGaussianBlur"})," comes and blur the circles, the alpha of each pixel can now be all the numbers between 0 and 1 instead of just being either 0 or 1."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"feColorMatrix"})," will be applied ",(0,a.jsx)("b",{children:"after"})," the ",(0,a.jsx)("code",{className:"language-jsx",children:"feGaussianBlur"}),". So the alpha of each pixel that is now between 0 and 1 will be multiplied by the new ",(0,a.jsx)("code",{className:"language-jsx",children:"feColorMatrix"})," alpha values (current_alpha * 25 - 15) and note that the final A' will be clamped between 0 and 1."]}),(0,a.jsx)("li",{children:"So it's the combination of both these filters that creates the gooey effect."})]})]}),(0,a.jsx)("p",{children:"So in the end we would have something like this:"}),(0,a.jsx)(x.Z,{title:"page.js",code:'<feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 25 -15" result="filter" />',language:"jsx"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-gooey/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"It was very interesting for me to study how we can animate things along the line of an SVG and also how we can apply SVG's filter to create awesome effects! Hope you learned something."}),(0,a.jsx)("p",{children:"-Oli"})]})}function creative_404_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Designing the page"}),(0,a.jsx)("p",{children:"The first step is to go find inspiration on websites like Pinterest, and then we can go inside a software like Illustrator and do a rough sketch of what we want."}),(0,a.jsx)("p",{children:"Then inside Blender we can re-create that Illustrator Sketch."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/illustrator.mov"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/blender.mov"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"When the 3D scene is done, we can export it inside a .GLTF or .GLB file that we can then import inside a Three.js scene."}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["You can also use this ",(0,a.jsx)(d(),{href:"https://gltf.pmnd.rs/",target:"_blank",children:"tool"})," to visualize your file inside a web browser."]})})]}),(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use React Three Fiber for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i three @react-three/fiber"}),"."]}),(0,a.jsxs)("li",{children:["We will use React Three Drei for utility functions, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/drei"}),"."]})]})}),(0,a.jsx)("h3",{children:"Setting up a Scene"}),(0,a.jsxs)("p",{children:["For the scene, I'm creating an external component that I'm lazy loading using the ",(0,a.jsx)(d(),{target:"_blank",href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",children:"Dynamic import"}),", which is a Next.js built in function."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"import dynamic from 'next/dynamic'\n\nconst Scene = dynamic(() => import('@/components/Scene'), {\n    ssr: false,\n})\n\nexport default function Home() {\n  return (\n    <main className=\"relative h-screen\"> \n        <Scene />\n    </main>\n  );\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," Here I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"ssr: false"})," option to force the component to strictly be rendered client-side."]}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The upside is I could eventually render a ",(0,a.jsx)(d(),{href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#adding-a-custom-loading-component",target:"_blank",children:"placeholder"})," while the 3D scene is loading."]})})]}),(0,a.jsx)("h2",{children:"Creating a Canvas"}),(0,a.jsx)("p",{children:"Here I'm creating a React Three Fiber Canvas and inside of it I'm adding an external Model Component where I'll render the 3D models."}),(0,a.jsxs)("p",{children:["I also add a basic light with an ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/drei?tab=readme-ov-file#environment",children:"Environment"})," to add lighting and colors to the overall scene."]}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:"'use client';\nimport { Canvas } from '@react-three/fiber'\nimport Model from './Model'\nimport { Environment } from '@react-three/drei'\n\nexport default function Scene() {\n    return (\n        <Canvas orthographic style={{background: \"black\"}} camera={{position: [0, 0, 1], zoom: 800}}>\n             <Model />\n            <directionalLight intensity={3} position={[0, 0.1, 1]} />\n            <Environment preset=\"city\"/>\n        </Canvas>\n    )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Creating the Model"}),(0,a.jsx)("p",{children:"For the model, I simply import the .GLB file and map all the nodes inside of it. All the nodes are essentially all the different mesh created inside of Blender. Inside of those nodes is a bunch of information about position, scale, etc."}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"import { useGLTF } from '@react-three/drei'\nimport React from 'react'\nimport { useThree } from '@react-three/fiber'\nimport { MeshBasicMaterial } from 'three'\n\nexport default function Model() {\n    const { viewport } = useThree()\n    const { nodes } = useGLTF('/medias/shards.glb')\n    \n    return (\n        <group scale={viewport.width / 1.5} >\n            {\n                nodes.Scene.children.map( (mesh, i) => {\n                    return <Mesh data={mesh} key={i}/>\n                })\n            }\n        </group>\n    )\n}\n\nfunction Mesh({data}) {\n    return (\n        <mesh {...data}>\n            <MeshBasicMaterial/>\n        </mesh>\n    )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Here I also use the viewport width to scale up and down the scene depending on the size of the window to make everything responsive."})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/creative-404/screenshot1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the HTML and CSS results"})}),(0,a.jsx)("h2",{children:"Adding the Text"}),(0,a.jsx)("p",{children:"For this particular animation, we need to text to be part of the 3D scene, so we can't simply return DOM elements."}),(0,a.jsxs)("p",{children:["So for that I'll use the ",(0,a.jsx)(d(),{href:"https://github.com/pmndrs/drei?tab=readme-ov-file#text",target:"_blank",children:"Text"})," from React Three Drei."]}),(0,a.jsx)(g.Z,{titles:["Model.jsx","Model.jsx"],codes:['function Font() {\n    const src = \'/fonts/PPNeueMontreal-Bold.otf\'\n    const textOption = {\n        color: "white",\n        anchorX: "center",\n        anchorY: "middle"\n    }\n    return (\n        <group>\n            <Text font={src} position={[0, 0, -.1]} fontSize={0.4} {...textOption}>\n            404\n            </Text>\n            <Text font={src} position={[0, -.15, -.1]} fontSize={0.03} {...textOption}>\n            The link is broken\n            </Text>\n        </group>\n    )\n}',"export default function Model() {\n    ...    \n    return (\n            <group scale={viewport.width / 1.5} >\n                ...\n                <Font />\n            </group>\n    )\n}"],languages:["jsx","jsx"]}),(0,a.jsx)("h2",{children:"Adding the Float Animation"}),(0,a.jsxs)("p",{children:["For the float animation, we can also use a utilitary function from React Three Drei called ",(0,a.jsx)(d(),{href:"https://github.com/pmndrs/drei?tab=readme-ov-file#float",target:"_blank",children:"Float"}),"."]}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"function Mesh({data}) {\n    return (\n        <Float>\n            <mesh {...data}>\n                <MeshTransmissionMaterial/>\n            </mesh>\n        </Float>\n    )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/float.mov"}),(0,a.jsx)("h2",{children:"Transmission Material"}),(0,a.jsxs)("p",{children:["For the transmission material, if you want transparency as well as distortion, you would have to do a custom shader. Thankfully, there is one made by the community inside the React Three Drei package called ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/drei?tab=readme-ov-file#meshtransmissionmaterial",children:"MeshTransmissionMaterial"})," which gives us everything we need out of the box."]}),(0,a.jsx)("p",{children:"It's basically an extension of the Three.js MeshPhysicalMaterial, which already support transmission but adds on top of it multiple other properties like thickness, distortion and chromaticAberration. These properties really help give a realistic glass effect."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/transmission.mov"}),(0,a.jsx)("p",{children:"So what I'll do is apply this material each shard of glass of my scene:"}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"function Mesh({data}) {\n\n    const materialProps = useControls({\n        thickness: { value: 0.275, min: 0, max: 1, step: 0.01 },\n        ior: { value: 1.8, min: 0, max: 3, step: 0.1 },\n        chromaticAberration: { value: 0.75, min: 0, max: 1},\n        resolution: {value: 300},\n    })\n\n    return (\n        <Float>\n            <mesh {...data}>\n                <MeshTransmissionMaterial roughness={0} transmission={0.99} {...materialProps}/>\n            </mesh>\n        </Float>\n    )\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," This animation is not optimized, since the MeshTransmissionMaterial takes a lot of ressources and is used on multiple mesh, it would be good to spend some time optizing the scene for a real world application."]}),(0,a.jsx)("p",{children:"Something I was thinking of exploring:"}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Using the ",(0,a.jsx)("code",{className:"language-jsx",children:"buffer"})," option with a ",(0,a.jsx)(d(),{target:"_blank",href:"https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget",children:"renderTarget"})]})})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/glass.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"I'm just taken away by how powerful and easy to use this material is. I'm super grateful of being part of such a great community as well. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function _3d_glass_effect_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Modeling the Torus"}),(0,a.jsx)("p",{children:"Inside Blender I create a 3D model of a Taurus, the shape that I want for this animation."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-glass-effect/taurus.mov"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"When the 3D scene is done, we can export it inside a .GLTF or .GLB file that we can then import inside a Three.js scene."}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["You can also use this ",(0,a.jsx)(d(),{href:"https://gltf.pmnd.rs/",target:"_blank",children:"tool"})," to visualize your file inside a web browser."]})})]}),(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use React Three Fiber for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i three @react-three/fiber"}),"."]}),(0,a.jsxs)("li",{children:["We will use React Three Drei for utility functions, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/drei"}),"."]})]})}),(0,a.jsx)("h3",{children:"Setting up a Scene"}),(0,a.jsxs)("p",{children:["For the scene, I'm creating an external component that I'm lazy loading using the ",(0,a.jsx)(d(),{target:"_blank",href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",children:"Dynamic import"}),", which is a Next.js built in function."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"import styles from './page.module.css'\nimport dynamic from 'next/dynamic'\n\nconst Scene = dynamic(() => import('@/components/Scene'), {\n    ssr: false,\n})\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n        <Scene />\n    </main>\n  )\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," Here I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"ssr: false"})," option to force the component to strictly be rendered client-side."]}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The upside is I could eventually render a ",(0,a.jsx)(d(),{href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#adding-a-custom-loading-component",target:"_blank",children:"placeholder"})," while the 3D scene is loading."]})})]}),(0,a.jsx)("h2",{children:"Creating a Canvas"}),(0,a.jsx)("p",{children:"Here I'm creating a React Three Fiber Canvas and inside of it I'm adding an external Model Component where I'll render the 3D models."}),(0,a.jsxs)("p",{children:["I also add a basic light with an ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/drei?tab=readme-ov-file#environment",children:"Environment"})," to add lighting and colors to the overall scene."]}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:"'use client';\nimport { Canvas } from '@react-three/fiber'\nimport Model from './Model';\nimport { Environment } from '@react-three/drei'\n\nexport default function Index() {\n  return (\n    <Canvas style={{background: '#000000'}}>\n        <Model />\n        <directionalLight intensity={2} position={[0, 2, 3]}/>\n        <Environment preset=\"city\" />\n    </Canvas>\n  )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Creating the Model"}),(0,a.jsx)("p",{children:"For the model, I simply import the .GLB file and select the Torus mesh inside of it. Inside the node is a bunch of information about position, scale, etc."}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:'import React, { useRef } from \'react\'\nimport { useGLTF, Text } from "@react-three/drei";\nimport { useFrame, useThree } from \'@react-three/fiber\'\n\nexport default function Model() {\n    const { nodes } = useGLTF("/medias/torrus.glb");\n    const { viewport } = useThree()\n    const torus = useRef(null);\n    \n    useFrame( () => {\n        torus.current.rotation.x += 0.02\n    })\n\n    return (\n        <group scale={viewport.width / 3.75} >\n            <Text font={\'/fonts/PPNeueMontreal-Bold.otf\'} position={[0, 0, -1]} fontSize={0.5} color="white" anchorX="center" anchorY="middle">\n                hello world!\n            </Text>\n            <mesh ref={torus} {...nodes.Torus002}>\n                <meshBasicMaterial/>\n            </mesh>\n        </group>\n    )\n}',language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Here I also use the viewport width to scale up and down the scene depending on the size of the window to make everything responsive."}),(0,a.jsxs)("li",{children:["I also use the ",(0,a.jsx)("code",{className:"language",children:"useFramer"})," to continually rotate the mesh."]}),(0,a.jsxs)("li",{children:["For the Text I use the ",(0,a.jsx)(d(),{href:"https://github.com/pmndrs/drei?tab=readme-ov-file#text",target:"_blank",children:"Text"})," component from React Three Drei. It's important to have an actual webGL text and not a simple DOM text for the distortion to be applied on it."]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-glass-effect/1.mov"}),(0,a.jsx)("h2",{children:"Transmission Material"}),(0,a.jsxs)("p",{children:["For the transmission material, if you want transparency as well as distortion, you would have to do a custom shader. Thankfully, there is one made by the community inside the React Three Drei package called ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/drei?tab=readme-ov-file#meshtransmissionmaterial",children:"MeshTransmissionMaterial"})," which gives us everything we need out of the box."]}),(0,a.jsx)("p",{children:"It's basically an extension of the Three.js MeshPhysicalMaterial, which already support transmission but adds on top of it multiple other properties like thickness, distortion and chromaticAberration. These properties really help give a realistic glass effect."}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/creative-404/transmission.mov"}),(0,a.jsx)("p",{children:"So what I'll do is apply this material to my Taurus:"}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"import { MeshTransmissionMaterial, ... } from \"@react-three/drei\";\nimport { useControls } from 'leva';\n\n...\n\nexport default function Model() {\n    ...\n    const materialProps = useControls({\n        thickness: { value: 0.2, min: 0, max: 3, step: 0.05 },\n        roughness: { value: 0, min: 0, max: 1, step: 0.1 },\n        transmission: {value: 1, min: 0, max: 1, step: 0.1},\n        ior: { value: 1.2, min: 0, max: 3, step: 0.1 },\n        chromaticAberration: { value: 0.02, min: 0, max: 1},\n        backside: { value: true},\n    })\n    \n    return (\n        <group scale={viewport.width / 3} >\n            ...\n            <mesh ref={torus} {...nodes.Torus002}>\n                <MeshTransmissionMaterial {...materialProps}/>\n            </mesh>\n        </group>\n    )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-glass-effect/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"I'm just taken away by how powerful and easy to use this material is. I'm super grateful of being part of such a great community as well. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_along_path_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @studio-freight/lenis"}),"."]})]})}),(0,a.jsx)(x.Z,{title:"page.js",code:'import Footer from "@/components/Footer";\n\nexport default function Home() {\n    return (\n        <main>\n            <div className="h-[100vh]"></div>\n            <Footer />\n        </main>\n    );\n}',language:"jsx"}),(0,a.jsx)("h2",{children:"Adding a Sticky Footer"}),(0,a.jsx)("p",{children:"To enhance the effect of the animation, we can start by creating a sticky footer, which will add extra space at the bottom of the window, giving more scrolling time for the path to be moved along a path."}),(0,a.jsxs)("p",{children:["The first step to do that is to get the progress of the scroll. We can do that by using the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-scroll/",children:"useScroll"})," hook:"]}),(0,a.jsx)(x.Z,{title:"useScroll hook",code:"import { useScroll } from 'framer-motion';\n\nconst container = useRef();\nconst { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start end', 'end end']\n})",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"scrollYProgress"})," returns a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"0"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})," that represents the progress of the scroll based on the target and the offset."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"offset:"})," The tracker starts at ",(0,a.jsx)("code",{className:"language-jsx",children:"['start end']"})," the start of the target and the end of the window and ends at ",(0,a.jsx)("code",{className:"language-jsx",children:"['end end']"})," the end of the target and the end of the window."]})]})}),(0,a.jsxs)("p",{children:["The parallax effect is used by mixing the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," and the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-transform/",target:"_blank",children:"useTransform"})," hook."]}),(0,a.jsx)(x.Z,{title:"useTransform hook",code:"const y = useTransform(scrollProgress, [0, 1], [-200, 0])",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["When the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," is between 0 and 1 then the ",(0,a.jsx)("code",{className:"language-jsx",children:"y"})," value will be between -200 and 0."]})})}),(0,a.jsx)("h3",{children:"Mixing everything together:"}),(0,a.jsx)(x.Z,{title:"Footer.jsx",code:"'use client';\nimport React, { useRef } from \"react\";\nimport { useScroll, useTransform, motion } from 'framer-motion';\n\nexport default function Footer() {\n    const container = useRef();\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: ['start end', 'end end']\n    })\n\n    return (\n        <div ref={container}>\n            <Logos scrollProgress={scrollYProgress}/>\n        </div>\n    )\n}\n\nconst Logos = ({scrollProgress}) => {\n    const y = useTransform(scrollProgress, [0, 1], [-225, 0])\n    return (\n        <div className=\"h-[250px] bg-black overflow-hidden\">\n            <motion.div style={{y}} className=\"h-full bg-black flex justify-center gap-10 items-center p-10\">\n                {\n                    [...Array(5)].map((_, i) => {\n                        return <img key={`img_${i}`} className=\"w-[80px] h-[80px]\" src={`/medias/${i+1}.jpg`} />\n                    })\n                }\n            </motion.div>\n        </div>\n    )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-along-path/1.mov"}),(0,a.jsx)("h2",{style:{marginTop:"40px"},children:"Adding an SVG Path"}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"The SVG can be made in any Vector based tool like Illustrator or Figma."})}),(0,a.jsx)(x.Z,{title:"Footer.jsx",code:'return (\n    <div ref={container}>\n        <svg className="w-full mb-40" viewBox="0 0 250 90">\n            <path fill="none" stroke="black" d="m0,88.5c61.37,0,61.5-68,126.5-68,58,0,51,68,123,68"/>\n        </svg>\n        <Logos scrollProgress={scrollYProgress}/>\n    </div>\n)',language:"jsx"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/text-along-path/1.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the path"})}),(0,a.jsx)("h3",{style:{marginTop:"40px"},children:"Adding Text Along it"}),(0,a.jsx)(x.Z,{title:"Text Path",code:'return (\n    <div ref={container}>\n        <svg className="w-full mb-40" viewBox="0 0 250 90">\n            <path fill="none" id="curve" d="m0,88.5c61.37,0,61.5-68,126.5-68,58,0,51,68,123,68"/>\n            <text className="text-[6px] uppercase" style={{fill: "red"}}>\n                {\n                    [...Array(3)].map((_, i) => {\n                        return <textPath key={i} startOffset={i * 40 + "%"} href="#curve">Curabitur mattis efficitur velit</textPath>\n                    })\n                }\n            </text>\n        </svg>\n        <Logos scrollProgress={scrollYProgress}/>\n    </div>\n)',language:"jsx",highlights:[4,8]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["To stick the ",(0,a.jsx)("code",{className:"language-jsx",children:"textPath"})," to the path, all you have to do is add an ",(0,a.jsx)("code",{className:"language-jsx",children:"href"})," and an ",(0,a.jsx)("code",{className:"language-jsx",children:"id"})," to them."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/text-along-path/2.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the path"})}),(0,a.jsx)("h2",{children:"Moving the Text on Scroll"}),(0,a.jsxs)("p",{children:["Next up we're going to move the text along the path on scroll. To do that all we have to do is use the previously created ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"}),"."]}),(0,a.jsxs)("p",{children:["We also have to add refs to each ",(0,a.jsx)("code",{className:"language-jsx",children:"textPath"}),", in order to target them and change their styling."]}),(0,a.jsx)(x.Z,{title:"Adding Refs",code:'<text className="text-[6px] uppercase" style={{fill: "red"}}>\n{\n    [...Array(3)].map((_, i) => {\n        return <textPath key={i} ref={ref => paths.current[i] = ref} startOffset={i * 40 + "%"} href="#curve">Curabitur mattis efficitur velit</textPath>\n    })\n}\n</text>',language:"jsx",highlights:[4]}),(0,a.jsx)("h3",{children:"Animating on scroll"}),(0,a.jsx)("p",{children:"To animate on scroll, there are multiple ways of doing it, but for now, we can simply listen to the scroll event and adjust the offset."}),(0,a.jsx)(x.Z,{title:"Animating on scroll",code:'useEffect( () => {\n    scrollYProgress.on("change", e => {\n        paths.current.forEach( (path, i) => {\n            path.setAttribute("startOffset", -40 + (i * 40) + (e * 40) + "%");\n        })\n    })\n}, [])',language:"jsx"}),(0,a.jsx)("h3",{children:"Finally we can add a smooth scroll to make everything a bit cleaner."}),(0,a.jsx)(x.Z,{title:"page.js",code:"useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n        lenis.raf(time)\n        requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n}, [])",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-along-path/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"It's actually super easy to move a text along a path and the result is super nice too! Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function creative_buttons_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Adding the HTML and CSS"}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use Sass for the styling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i sass"}),"."]})})}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"It's actually super easy to move a text along a path and the result is super nice too! Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function blend_mode_cursor_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use GSAP for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i gsap"}),"."]})})}),(0,a.jsx)("h2",{children:"Tracking the mouse"}),(0,a.jsx)("p",{children:"To track the mouse there would be mutliple ways of doing it. For this tutorial tho, I'll eventually use the requestAnimationFramer to move the cursor around, which is one of the most performance effective way of doing it."}),(0,a.jsx)("p",{children:"Since I'm doing it that way, I'll store the position of the cursor inside a ref, instead of inside a state and will imperitavely change the styling:"}),(0,a.jsx)(x.Z,{title:"Cursor.jsx",code:"'use client';\nimport React, { useEffect, useRef } from 'react'\nimport gsap from 'gsap';\n\nexport default function BlurryCursor() {\n    const mouse = useRef({x: 0, y: 0});\n    const circle = useRef();\n    const size = 30;\n    \n    const manageMouseMove = (e) => {\n        const { clientX, clientY } = e;\n    \n        mouse.current = {\n            x: clientX,\n            y: clientY\n        }\n\n        moveCircle(mouse.current.x, mouse.current.y);\n    }\n\n    const moveCircle = (x, y) => {\n        gsap.set(circle.current, {x, y, xPercent: -50, yPercent: -50})\n    }\n\n    useEffect( () => {\n        window.addEventListener(\"mousemove\", manageMouseMove);\n        return () => {\n            window.removeEventListener(\"mousemove\", manageMouseMove);\n        }\n    }, [])\n\n    return (\n        <div className='relative h-screen'>\n            <div \n                ref={circle}\n                style={{\n                    backgroundColor: \"#BCE4F2\",\n                    width: size,\n                    height: size,\n                }}\n                className='top-0 left-0 fixed rounded-full' \n            />\n        </div>\n    )\n}",language:"jsx",highlights:[22]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Here I'm using the xPercent and yPercent values to make sure the circle of the cursor stays centered"})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/blend-mode-cursor/video1.mov"}),(0,a.jsx)("h2",{children:"Smoothing out the movement"}),(0,a.jsxs)("p",{children:["To make the movement of the cursor smoother, we'll use a combination of ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame",children:"requestAnimationFrame"})," and a linear interpolation."]}),(0,a.jsx)("h3",{children:"Linear Interpolation"}),(0,a.jsx)("p",{children:"Linear interpolation is a key concept in animations. It is often used by motion designers, but we can also use it for web animations! In short, it is form of interpolation, which involves the generation of new values based on an existing set of values"}),(0,a.jsx)(x.Z,{title:"Lerp in Javascript",code:"let value = 10;\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a\nvalue = lerp(value, 0, 0.1);\n\nconsole.log(value) \n//9",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"x"}),": The value we want to interpolate from (start)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"y"}),": The target value we want to interpolate to (end)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"a"}),": The amount by which we want ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," to be closer to ",(0,a.jsx)("code",{className:"language-jsx",children:"y"}),"."]})]})}),(0,a.jsx)("p",{children:"We can now use that function to add a delayedMouse object which we will use to move the circle around:"}),(0,a.jsx)(x.Z,{title:"Cursor.jsx",code:"const manageMouseMove = (e) => {\n    const { clientX, clientY } = e;\n\n    mouse.current = {\n        x: clientX,\n        y: clientY\n    }\n}\n\nconst animate = () => {\n    const { x, y } = delayedMouse.current;\n\n    delayedMouse.current = {\n        x: lerp(x, mouse.current.x, 0.075),\n        y: lerp(y, mouse.current.y, 0.075)\n    }\n\n    moveCircle(delayedMouse.current.x, delayedMouse.current.y);\n    rafId.current = window.requestAnimationFrame(animate);\n}\n\nconst moveCircle = (x, y) => {\n    gsap.set(circle.current, {x, y, xPercent: -50, yPercent: -50})\n}",language:"jsx",highlights:[14,151]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Here the position of the mouse is delayed by incrementally moving it towards the cursor at every frame."})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/blend-mode-cursor/video2.mov"}),(0,a.jsx)("h2",{children:"Adding a hover state"}),(0,a.jsx)("p",{children:"The next thing is to figure out if we're hovering the text, and if so we can start dynamically changing the properties of the cursor."}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client';\nimport React from 'react'\nimport Cursor from \"@/components/Cursor\";\nimport { useState } from 'react';\n\nexport default function Scene2() {\n    const [isActive, setIsActive] = useState(false);\n    return (\n        <div className='h-[100vh] flex items-center justify-center'>\n            <h1 onMouseOver={() => {setIsActive(true)}} onMouseLeave={() => {setIsActive(false)}} className=\"text-[4.5vw] max-w-[90vw] text-center text-white p-20\">The quick brown fox jumps over the lazy dog</h1>\n            <Cursor isActive={isActive}/>\n        </div>\n    )\n}",language:"jsx"}),(0,a.jsx)(x.Z,{title:"Cursor.jsx",code:'export default function BlurryCursor({isActive}) {\n    ...\n    const size = isActive ? 400 : 30;\n\n    useEffect( () => {\n        animate();\n        window.addEventListener("mousemove", manageMouseMove);\n        return () => {\n            window.removeEventListener("mousemove", manageMouseMove);\n            window.cancelAnimationFrame(rafId.current)\n        }\n    }, [isActive])\n\n    return (\n        <div className=\'relative h-screen\'>\n            <div \n                style={{\n                    backgroundColor: "#BCE4F2",\n                    width: size,\n                    height: size,\n                    filter: `blur(${isActive ? 30 : 0}px)`,\n                    transition: `height 0.3s ease-out, width 0.3s ease-out, filter 0.3s ease-out`\n                }}\n                className=\'top-0 left-0 fixed rounded-full mix-blend-difference pointer-events-none\' \n                ref={circle}\n            />\n        </div>\n    )\n}',language:"jsx",highlights:[12,24]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The isActive state is added to the dependencies of the useEffect to effectively re-render the event listeners functions when the isActive state changes"}),(0,a.jsxs)("li",{children:["The mix-blend-mode ",(0,a.jsx)(d(),{target:"_blank",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode",children:"difference"})," is added directly to the circle"]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/blend-mode-cursor/video3.mov"}),(0,a.jsx)("h3",{children:"Adding multiple circles"}),(0,a.jsx)("p",{children:"This is a variation of the animation, where we add multiple colored circles to make them blend together using the mix blend mode."}),(0,a.jsx)("ul",{children:(0,a.jsx)("li",{children:"Here nothing changes, but I'm returning 4 circles instead of a single one."})}),(0,a.jsx)(x.Z,{title:"Cursor.jsx",code:'...\n\nconst colors = [\n    "#c32d27",\n    "#f5c63f",\n    "#457ec4",\n    "#356fdb",\n]\n\nconst circles = useRef([]);\n\nconst moveCircles = (x, y) => {\n    if(circles.current.length < 1) return;\n    circles.current.forEach((circle, i) => {\n        gsap.set(circle, {x, y, xPercent: -50, yPercent: -50})\n    })\n}\n\nreturn (\n    <div className=\'relative h-screen\'>\n        {\n            [...Array(4)].map((_, i) => {\n                return (\n                <div \n                    style={{\n                        backgroundColor: colors[i],\n                        width: size,\n                        height: size,\n                        filter: `blur(${isActive ? 20 : 2}px)`,\n                        transition: `transform ${(4 - i) * delay}s linear, height 0.3s ease-out, width 0.3s ease-out, filter 0.3s ease-out`\n                    }}\n                    className=\'top-0 left-0 fixed rounded-full mix-blend-difference\' \n                    key={i} \n                    ref={ref => circles.current[i] = ref}\n                />)\n            })\n        }\n    </div>\n)',language:"jsx",highlights:[30]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Note: "})}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"each circle has a different transition value for the transform property to make the movement slightly delayed."}),(0,a.jsx)("li",{children:"To not make the text affected by the mix blend mode, I have given it a z-index of 50, to put it on top of all the circles"})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/blend-mode-cursor/video4.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"As simple as this!"}),(0,a.jsx)("p",{children:"Hope you liked the animation, it's crazy what we can create with simple css properties and an animated cursor. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function _3d_wave_on_scroll_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsxs)("p",{children:["We can delete everything in the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"})," , ",(0,a.jsx)("code",{className:"language-jsx",children:"global.css"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"page.module.css"})," and add our own HTML and CSS, to start with a nice blank application."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use React Three Fiber for the 3D, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i three @react-three/fiber"}),"."]}),(0,a.jsxs)("li",{children:["We will use React Three Drei for utility functions, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i @react-three/drei"}),"."]}),(0,a.jsxs)("li",{children:["We will use Framer Motion for tracking the progress of the scroll, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]})]})}),(0,a.jsx)("h3",{children:"Setting up a Scene"}),(0,a.jsxs)("p",{children:["For the scene, I'm creating an external component that I'm lazy loading using the ",(0,a.jsx)(d(),{target:"_blank",href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading",children:"Dynamic import"}),", which is a Next.js built in function."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"import styles from './page.module.css'\nimport dynamic from 'next/dynamic'\n\nconst Scene = dynamic(() => import('@/components/Scene'), {\n    ssr: false,\n})\n\nexport default function Home() {\n  return (\n    <main className=\"h-screen\">\n        <Scene />\n    </main>\n  )\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsxs)("p",{children:[(0,a.jsx)("b",{children:"Note:"})," Here I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"ssr: false"})," option to force the component to strictly be rendered client-side."]}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["The upside is I could eventually render a ",(0,a.jsx)(d(),{href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#adding-a-custom-loading-component",target:"_blank",children:"placeholder"})," while the 3D scene is loading."]})})]}),(0,a.jsx)("h2",{children:"Creating a Canvas"}),(0,a.jsx)("p",{children:"Here I'm creating a React Three Fiber Canvas and inside of it I'm adding an external Model Component where I'll render the 3D models."}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:"import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport Model from './Model'\n\nexport default function Scene() {\n    return (\n        <Canvas>\n            <Model/>\n        </Canvas>\n    )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Adding a Plane"}),(0,a.jsx)("p",{children:"We'll start by adding a 2D plane with some distortion with a custom shader and then we'll later add the image as a texture on top of it. For now I'm adding a regular plane with a certain scale."}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"import React from 'react'\n\nexport default function Model() {\n  return (\n    <mesh scale={[3, 3, 1]}>\n        <planeGeometry args={[1, 1, 15, 15]}/>\n        <meshBasicMaterial wireframe={true} color=\"red\"/>\n    </mesh>\n  )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-wave-on-scroll/1.png",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the plane"})}),(0,a.jsx)("h2",{children:"Waves and Sine function"}),(0,a.jsx)("p",{children:"To add a wave distortion, the first thing we need to understand is the structure of a wave:"}),(0,a.jsx)("div",{className:"imageContainer",style:{height:"350px"},children:(0,a.jsx)(l(),{src:"/medias/tutorials/3d-wave-on-scroll/2.jpg",layout:"fill",objectFit:"contain",priority:!0,alt:"Structure of a wave"})}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"We'll play with two parameters of the wave:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:(0,a.jsx)("b",{children:"The amplitude"})}),(0,a.jsx)("li",{children:(0,a.jsx)("b",{children:"The wavelength"})})]})]}),(0,a.jsx)("p",{children:"To do that, we need to create a custom shader material and distort the vertices of the plane. We can actually use the Sine function, which is very similar to a wave pattern:"}),(0,a.jsx)("h3",{children:"The Sine function"}),(0,a.jsxs)("p",{children:["I found that the Sine function is used ",(0,a.jsx)("b",{children:"a lot"})," in web animations, so don't shy away from it even tho it might be scary at first. Basically, there are 2 important things to know about the Sine function for this specific animation:"]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["It always returns a value between ",(0,a.jsx)("code",{className:"language-jsx",children:"-1"})," and ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})]})}),(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["It returns ",(0,a.jsx)("code",{className:"language-jsx",children:"1"})," when we give it ",(0,a.jsx)("code",{className:"language-jsx",children:"π/2"})]})})]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot3.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)("h3",{children:"Creating our two parameters"}),(0,a.jsxs)("p",{children:["Like I said earlier, we will play with the amplitude and the wavelength, so for that we can use the ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/leva",children:"Leva"})," library to store parameters and change them on the fly with a GUI."]}),(0,a.jsx)(x.Z,{title:"Wave configs",code:"import { useControls } from 'leva';\n\nconst { amplitude, waveLength } = useControls({\n    amplitude: { value: 0.25, min: 0, max: 2, step: 0.1 },\n    waveLength: { value: 5, min: 0, max: 20, step: 0.5 },\n})",language:"jsx"}),(0,a.jsx)("h2",{children:"Adding a Wave Distortion"}),(0,a.jsx)("p",{children:"Now that we have our 2 parameters ready, we can create a custom shader where we'll use the Sine function to modify the amplitude and the wavelength."}),(0,a.jsx)(x.Z,{title:"Wave distortion function",code:"...\nimport { fragment, vertex } from './Shader';\nimport { useFrame } from '@react-three/fiber';\n\nexport default function Model() {\n\n    const image = useRef();\n\n    const { amplitude, waveLength } = useControls({\n        amplitude: { value: 0.25, min: 0, max: 2, step: 0.1 },\n        waveLength: { value: 5, min: 0, max: 20, step: 0.5 },\n    })\n\n    const uniforms = useRef({\n        uTime: { value: 0 },\n        uAmplitude: { value: amplitude },\n        uWaveLength: { value: waveLength }\n    })\n\n    useFrame( () => {\n        image.current.material.uniforms.uTime.value += 0.04;\n        image.current.material.uniforms.uAmplitude.value = amplitude\n        image.current.material.uniforms.uWaveLength.value = waveLength;\n    })\n\n    return (\n        <mesh ref={image} scale={[3, 3, 1]}>\n            <planeGeometry args={[1, 1, 15, 15]}/>\n            <shaderMaterial\n                wireframe={true} \n                fragmentShader={fragment}\n                vertexShader={vertex}\n                uniforms={uniforms.current}\n            />\n        </mesh>\n    )\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here I'm adding 3 unfiforms that will be passed to the shaders"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"uTime:"})," we need to pass an ever increasing value to animate or 'drive' the wave"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"uAmplitude:"})," the height of each waves"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"uWaveLength:"})," the length of each waves"]})]})]}),(0,a.jsx)("h3",{children:"Adding the Fragment shader"}),(0,a.jsx)("p",{children:"For now the fragment shader will simply return a red color."}),(0,a.jsx)(x.Z,{title:"Fragment shader",code:"export const fragment = `\n    void main() {\n        gl_FragColor = vec4(1., 0., 0., 1.);\n    }\n`",language:"jsx"}),(0,a.jsx)("h3",{children:"Adding the Vertex shader"}),(0,a.jsx)("p",{children:"The vertex takes the 3 uniforms and the sine function to create the wave pattern:"}),(0,a.jsx)(x.Z,{title:"Vertex shader",code:"export const vertex = `\n    uniform float uTime;\n    uniform float uAmplitude;\n    uniform float uWaveLength;\n    void main() {\n        vec3 newPosition = position;\n\n        float wave = uAmplitude * sin(position.x * uWaveLength + uTime);\n        newPosition.z = position.z + wave; \n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n    }\n`",language:"jsx",highlights:[8,9]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here I'm creating a float value for the wave. I use the x position of each vertices inside the sin function to create the wave pattern. I then use that wave value and add it to the z position of each vertices."}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8: "}),"I multiply the ",(0,a.jsx)("code",{className:"language-jsx",children:"uWaveLength"})," with the x position of each vertices to create the length of each wave."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8: "}),"I add the ",(0,a.jsx)("code",{className:"language-jsx",children:"uTime"})," to the sin function to make each wave 'move'."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 8: "}),"I then multiply the result of the sin function by the ",(0,a.jsx)("code",{className:"language-jsx",children:"uAmplitude"}),", to accentuate the height of the wave."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("b",{children:"Line 9: "}),"Finally I use the ",(0,a.jsx)("code",{className:"language-jsx",children:"wave"})," variable and add it to the z position of each vertices."]})]})]}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot3.jpg",layout:"fill",objectFit:"cover",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-wave-on-scroll/1.mov"}),(0,a.jsx)("h2",{children:"Adding the Image as Texture"}),(0,a.jsx)("p",{children:"To add the image to the plane, we simply need to create a texture from that image and pass it to the fragment shader:"}),(0,a.jsxs)("p",{children:["Here I'm using two methods from ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/pmndrs/drei",children:"react-three/drei"}),":"]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"useTexture"}),": Extract the texture from an image"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"useAspect"}),": Calculates an aspect ratio to make an image fill the screen (similar to image-size: cover). Here I reduce the scaling factor so the image does not take the full screen"]})]}),(0,a.jsx)(x.Z,{title:"Model.jsx",code:"...\nimport { useTexture, useAspect } from '@react-three/drei'\n\nexport default function Model() {\n\n    const texture = useTexture(\"/images/car.jpg\")\n    const { width, height } = texture.image;\n\n    const scale = useAspect(\n        width,\n        height,\n        0.3\n    )\n\n    const uniforms = useRef({\n        uTime: { value: 0 },\n        uAmplitude: { value: amplitude },\n        uWaveLength: { value: waveLength },\n        uTexture: { value: texture },\n    })\n\n    ...\n\n    return (\n        <mesh ref={image} scale={scale}>\n            <planeGeometry args={[1, 1, 15, 15]}/>\n            <shaderMaterial\n                wireframe={false} \n                fragmentShader={fragment}\n                vertexShader={vertex}\n                uniforms={uniforms.current}\n            />\n        </mesh>\n    )\n}",language:"jsx"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"The Uv's are extracted from the vertex shader and given to the fragment shader through a varying variable."}),(0,a.jsx)("li",{children:"The texture is given to the fragment shader by putting it inside a uniform."})]}),(0,a.jsx)(x.Z,{title:"modified shaders",code:"export const vertex = `\n    varying vec2 vUv;\n    ...\n    void main() {\n        vUv = uv;\n        ...\n    }`\n\nexport const fragment = `\n    uniform sampler2D uTexture;\n    varying vec2 vUv;\n    void main() {\n        vec4 color = texture2D(uTexture, vUv);\n        gl_FragColor = color;  \n    }`",language:"jsx",highlights:[13,14]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-wave-on-scroll/2.mov"}),(0,a.jsx)("h2",{children:"Scaling the Image on Scroll"}),(0,a.jsx)("p",{children:"Now that we've added a wave, we can add an extra effect by scaling the plane to fullscreen on scroll. That's going to require some understanding of scaling the UVs, which is a good exercise."}),(0,a.jsx)("p",{children:"The firs thing to do is to make the section sticky and track the progress of the scroll:"}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:'import React, { useRef } from \'react\';\nimport { useScroll } from "framer-motion";\n...\n\nexport default function Home() {\n  const container = useRef();\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: [\'start start\', \'end end\']\n  });\n\n  return (\n    <main>\n      <div ref={container} className="h-[300vh]">\n        <div className="sticky top-0 h-screen">\n          <Scene scrollProgress={scrollYProgress}/>\n        </div>\n      </div>\n      <div className="h-screen"></div>\n    </main>\n  );\n}',language:"jsx",highlights:[7,8,9,10,16]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Here I'm tracking the progress of the scroll for the main container, which is ",(0,a.jsx)("code",{className:"language-jsx",children:"300vh"})," of height."]}),(0,a.jsxs)("li",{children:["The ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollYProgress"})," is a value between 0 and 1."]})]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-wave-on-scroll/3.mov"}),(0,a.jsx)("h3",{children:"Scaling on scroll"}),(0,a.jsx)("p",{children:"Now that we have a value that represents the progress of the scroll, we can scale the plane and slowly reduce the amplitude  based on that."}),(0,a.jsx)(x.Z,{title:"Scaling the plane",code:"import { transform } from \"framer-motion\"\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { useTexture, useAspect } from '@react-three/drei'\n...\n\nconst scale = useAspect(\n    width,\n    height,\n    0.3\n)\n\nconst { viewport } = useThree();\n\nuseFrame( () => {\n    //scale image based on progress of the scroll\n    const scaleX = transform(scrollProgress.get(), [0, 1], [scale[0], viewport.width])\n    const scaleY = transform(scrollProgress.get(), [0, 1], [scale[1], viewport.height])\n    image.current.scale.x = scaleX;\n    image.current.scale.y = scaleY;\n\n    //animate wave based on progress of the scroll\n    const modifiedAmplitude = transform(scrollProgress.get(), [0, 1], [amplitude, 0])\n\n    image.current.material.uniforms.uTime.value += 0.04;\n    image.current.material.uniforms.uAmplitude.value = modifiedAmplitude\n    image.current.material.uniforms.uWaveLength.value = waveLength;\n})\n\n...",language:"jsx",highlights:[16,17,18,19,22,24,25,26]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["Here the ",(0,a.jsx)("code",{className:"language-jsx",children:"scrollProgress"})," is a value between 0 and 1 and I'm using it to scale the image to fullscreen and reduce the amplitude to 0 as we scroll."]})})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-wave-on-scroll/4.mov"}),(0,a.jsx)("p",{children:"As you can see, the texture is getting stretched as we scale the plane, so we need to scale them as well:"}),(0,a.jsx)("h3",{children:"Scaling the textures:"}),(0,a.jsx)(x.Z,{title:"Scaling the textures",code:'const texture = useTexture("/images/car.jpg")\nconst { width, height } = texture.image;\n\nconst uniforms = useRef({\n    ...\n    vUvScale: { value: new THREE.Vector2(0, 0) },\n})\n\nuseFrame( () => {\n     //scale image based on progress of the scroll\n     const scaleX = transform(scrollProgress.get(), [0, 1], [scale[0], viewport.width])\n     const scaleY = transform(scrollProgress.get(), [0, 1], [scale[1], viewport.height])\n    image.current.scale.x = scaleX;\n    image.current.scale.y = scaleY;\n    \n    ...\n\n    //Adjust texture to new scale\n    const scaleRatio = scaleX / scaleY;\n    const aspectRatio = width / height\n    //scale texture inside shader\n    image.current.material.uniforms.vUvScale.value.set(1, aspectRatio / scaleRatio)\n    \n})',language:"jsx",highlights:[6,17,18,20]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["To scale the texture, I need to pass a new uniform ",(0,a.jsx)("code",{className:"language-jsx",children:"vUvScale"})," to the fragment shader. This uniform will hold the new scale of the texture, based on the aspect ratio of the image and the scale ratio of the plane"]})}),(0,a.jsx)(x.Z,{title:"Adjusted Fragment shader",code:"export const fragment = `\n    uniform sampler2D uTexture;\n    uniform vec2 vUvScale;\n    varying vec2 vUv;\n    void main() {\n        vec2 uv = (vUv - 0.5) * vUvScale + 0.5;\n        vec4 color = texture2D(uTexture, uv);\n        gl_FragColor = color;  \n    }\n    `",language:"jsx",highlights:[7]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/3d-wave-on-scroll/5.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this tutorial!"}),(0,a.jsx)("p",{children:"Very interesting to see how we can use mathematical function like the sine wave to create an awesome effect! Also interesting to know about the different type of scaling that's required to effectively scale a plane. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function paint_reveal_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the Scene"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("h2",{children:"Setting up the Project"}),(0,a.jsx)(x.Z,{title:"page.js",code:"import Scene from '@/components/Scene';\nimport Text from '@/components/Text';\n\nexport default function Home() {\n  return (\n    <main className=\"flex w-full h-screen items-center justify-center\">\n      <Text />\n      <Scene />\n    </main>\n  );\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Getting the Windows dimensions"}),(0,a.jsx)("p",{children:"The canvas requires that we specify a width and a height to know how many pixels it should be rendering. We can provide it by listening and putting the dimensions of the window inside a state."}),(0,a.jsx)(x.Z,{title:"useWindow hook",code:'import { useEffect, useState } from \'react\'\n\nexport default function useWindow() {\n  const [dimension, setDimension] = useState({width: 0, height: 0})\n\n  const resize = () => {\n    setDimension({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n  }\n\n  useEffect(() => {\n    resize();\n    window.addEventListener("resize", resize);\n    return () => window.removeEventListener("resize", resize);\n  }, [])\n\n  return { dimension }\n}',language:"jsx"}),(0,a.jsx)("h2",{children:"Initializing the Canvas"}),(0,a.jsxs)("p",{children:["With the dimensions of the window, we can initialize the canvas. I also use the ",(0,a.jsx)("code",{className:"language-jsx",children:"destination-out"})," global composite operation on the canvas so that every time we draw additional shapes on the canvas, it will erase the black rectangle used as a background."]}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:"'use client'\nimport React, { useEffect, useRef } from 'react'\nimport useWindow from './useWindow'\n\nexport default function Scene() {\n  const { dimension } = useWindow();\n  const canvas = useRef();\n\n  useEffect( () => {\n    dimension.width > 0 && init();\n  }, [dimension])\n\n  const init = () => {\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, dimension.width, dimension.height); \n    ctx.globalCompositeOperation = \"destination-out\";\n  }\n\n  return (\n    <div className='relative w-full h-full'>\n      {dimension.width == 0 && <div className='absolute w-full h-full bg-black'/>}\n      <canvas ref={canvas} height={dimension.height} width={dimension.width}/>\n    </div>\n  )\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Drawing Circles on Mouse Move"}),(0,a.jsx)("p",{children:"The concept to create the brush or paint effect is to draw a bunch of circles everytime we move our mouse. Here's how we can do this:"}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:"const manageMouseMove = (e) => {\n    const { clientX, clientY} = e;\n    draw(clientX, clientY, 50)\n}\n\nconst draw = (x, y, radius) => {\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\n   ctx.fill();\n}\n\nreturn (\n<div className='relative w-full h-full'>\n    ...\n    <canvas onMouseMove={manageMouseMove} ref={canvas} height={dimension.height} width={dimension.width}/>\n</div>\n)",language:"jsx",highlights:[3,16]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/paint-reveal/1.mov"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("p",{children:"However, as you can when I move my mouse fast, the brush effect is not smooth, and that's because I move my mouse so fast it's actually skipping the mouse move events and thus not drawing enough circles to create a smooth line."})}),(0,a.jsx)("h2",{children:"Smoothing the Animation"}),(0,a.jsx)("p",{children:"To smooth out the animation, I'll use a Lerp to fill the gap between every circle that I draw. That way, the animation will be smooth not matter the speed of mouse."}),(0,a.jsx)("div",{className:"imageContainer",children:(0,a.jsx)(l(),{src:"/medias/tutorials/svg-bezier-curve/screenshot4.png",layout:"fill",objectFit:"contain",priority:!0,alt:"Screenshot of the SVG b\xe9zier curve"})}),(0,a.jsx)("h3",{children:"Linear Interpolation"}),(0,a.jsx)("p",{children:"Linear interpolation is a key concept in animations. It is often used by motion designers, but we can also use it for web animations! In short, it is form of interpolation, which involves the generation of new values based on an existing set of values"}),(0,a.jsx)(x.Z,{title:"Lerp in Javascript",code:"let value = 10;\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a\nvalue = lerp(value, 0, 0.1);\n\nconsole.log(value) \n//9",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"x"}),": The value we want to interpolate from (start)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"y"}),": The target value we want to interpolate to (end)"]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"a"}),": The amount by which we want ",(0,a.jsx)("code",{className:"language-jsx",children:"x"})," to be closer to ",(0,a.jsx)("code",{className:"language-jsx",children:"y"}),"."]})]})}),(0,a.jsx)("h3",{children:"Putting everything together"}),(0,a.jsx)(x.Z,{title:"Scene.jsx",code:'...\nconst prevPosition = useRef(null)\n\nconst lerp = (x, y, a) => x * (1 - a) + y * a;\n\nconst manageMouseMove = (e) => {\n  const { clientX, clientY, movementX, movementY } = e;\n\n  const nbOfCircles = Math.max(Math.abs(movementX), Math.abs(movementY)) / 10;\n\n  if(prevPosition.current != null){\n    const { x, y } = prevPosition.current;\n    for(let i = 0 ; i < nbOfCircles ; i++){\n      const targetX = lerp(x, clientX, (1 / nbOfCircles) * i);\n      const targetY = lerp(y, clientY, (1 / nbOfCircles) * i);\n      draw(targetX, targetY, 50)\n    }\n  }\n\n  prevPosition.current = {\n    x: clientX,\n    y: clientY\n  }\n}\n\nconst draw = (x, y, radius) => {\n  const ctx = canvas.current.getContext("2d");\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, 2 * Math.PI);\n  ctx.fill();\n}',language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Notes about the code:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"prevPosition"})," is used to store the previous position of the mouse, which allows us to interpolate between it and the current position."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{className:"language-jsx",children:"nbOfCircles"})," is based on the speed of the mouse, the faster the mouse, the higher the number of circles requires to draw a smooth line."]})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/paint-reveal/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"As simple as this!"}),(0,a.jsx)("p",{children:"A very smooth animation, kind of different than using the DOM to create a web animation. But still the result is nice and it's a sweet animation with good story telling potential. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function perspective_section_transition_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Initializing the Project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"Creating the Base Layout"}),(0,a.jsx)("p",{children:"The first thing to do is to to create the layout, it's just bit of HTML and CSS, nothing too crazy here:"}),(0,a.jsx)(g.Z,{titles:["Page.js","Section1","Section2"],codes:['export default function Home() {\n    return (\n      <main className="relative">\n        <Section1 />\n        <Section2 />\n      </main>\n    );\n}','const Section1 = ({scrollYProgress}) => {\n    return (\n      <div className="h-screen bg-[#C72626] text-[3.5vw] flex flex-col items-center justify-center text-white pb-[10vh]">\n        <p>Scroll Perspective</p>\n        <div className="flex gap-4">\n          <p>Section</p>\n          <div className="relative w-[12.5vw]">\n            <Image \n              src={Pic1}\n              alt="img"\n              placeholder="blur"\n              fill\n            />\n          </div>\n          <p>Transition</p>\n        </div>\n      </div>\n    )\n}','const Section2 = () => {\n    return (\n      <div className="relative h-screen">\n        <Image \n          src={Pic2}\n          alt="img"\n          placeholder="blur"\n          fill\n        />\n      </div>\n    )\n}'],languages:["jsx","jsx","jsx"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/perspective-section-transition/1.mov"}),(0,a.jsx)("h2",{children:"Making the First Section Sticky"}),(0,a.jsx)("p",{children:"To create the effect, we first need to make the first section sticky, then it's going to be much easier to simply animate the sections. To make the first section sticky, all we have to do is"}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Set the parent to a position ",(0,a.jsx)("code",{className:"language-jsx",children:"relative"})," with ",(0,a.jsx)("code",{className:"language-jsx",children:"200vh"})," of height, since we have two sections that each take ",(0,a.jsx)("code",{className:"language-jsx",children:"100vh"}),"."]}),(0,a.jsxs)("li",{children:["Set the sticky section to ",(0,a.jsx)("code",{className:"language-jsx",children:"position:sticky"})," with ",(0,a.jsx)("code",{className:"language-jsx",children:"top:0"}),"."]})]}),(0,a.jsx)(g.Z,{titles:["Page.js","Section1"],codes:['export default function Home() {\n    return (\n      <main className="relative h-[200vh]">\n        ...\n      </main>\n    );\n  }','const Section1 = ({scrollYProgress}) => {\n    return (\n      <div className="sticky top-0 ...">\n       ...\n      </div>\n    )\n  }'],languages:["jsx","jsx"],highlights:[[3],[3]]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/perspective-section-transition/2.mov"}),(0,a.jsx)("h2",{children:"Adding On Scroll Animations"}),(0,a.jsx)("p",{children:"Now that we have our base structure, we can simply add some animation on scroll. To do this, we have to track the progress of the scroll and animate the scale and the rotation value of the sections based on it."}),(0,a.jsx)("h3",{children:"Tracking the Scroll"}),(0,a.jsx)(x.Z,{title:"Page.js",code:'const container = useRef();\nconst { scrollYProgress } = useScroll({\n  target: container,\n  offset: ["start start", "end end"]\n}) \n\nreturn (\n  <main ref={container} className="relative h-[200vh]">\n    <Section1 scrollYProgress={scrollYProgress}/>\n    <Section2 scrollYProgress={scrollYProgress}/>\n  </main>\n);\n}',language:"jsx"}),(0,a.jsx)("h3",{children:"Scaling and Rotating on Scroll"}),(0,a.jsx)(g.Z,{titles:["Section1","Section2"],codes:["const Section1 = ({scrollYProgress}) => {\n\n    const scale = useTransform(scrollYProgress, [0, 1], [1, 0.8]);\n    const rotate = useTransform(scrollYProgress, [0, 1], [0, -5]);\n\n    return (\n        <motion.div style={{scale, rotate}} ...>\n            ...\n        </motion.div>\n    )\n}","const Section2 = ({scrollYProgress}) => {\n\n    const scale = useTransform(scrollYProgress, [0, 1], [0.8, 1]);\n    const rotate = useTransform(scrollYProgress, [0, 1], [5, 0]);\n\n    return (\n        <motion.div style={{scale, rotate}} ...>\n            ...\n        </motion.div>\n    )\n}"],languages:["jsx","jsx"]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["Here I'm using the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-transform/",target:"_blank",children:"useTransform"})," hook to transform the scrollProgress into new values that I then use for the scaling and the rotation."]}),(0,a.jsx)("li",{children:"As you can see here, the only difference between the first section and the second section is the values are reversed."})]})}),(0,a.jsx)("h2",{children:"Adding a Smooth Scroll"}),(0,a.jsxs)("p",{children:["To make everything more smooth, we can add a smooth scroll using the ",(0,a.jsx)(d(),{target:"_blank",href:"https://github.com/darkroomengineering/lenis",children:"Lenis"})," library:"]}),(0,a.jsx)(x.Z,{title:"Page.js",code:"useEffect( () => {\nconst lenis = new Lenis()\n\nfunction raf(time) {\n    lenis.raf(time)\n    requestAnimationFrame(raf)\n}\n\nrequestAnimationFrame(raf)\n}, [])",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/perspective-section-transition/3.mov"}),(0,a.jsx)("p",{children:"As simple as this!"}),(0,a.jsx)("p",{children:"Quite a simple animation on the technical side, but visually I think it looks stunning and really adds a nice little touch to a website. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function sticky_footer_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Creating the Project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsx)("ul",{children:(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i lenis"}),"."]})})}),(0,a.jsx)("h2",{children:"Setting up the Project"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:"Here I'm just creating the basic block of the sticky footer:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"A small text introduction (mimicky the content of a page)"}),(0,a.jsx)("li",{children:"A smooth scroll using the Lenis library"})]})]}),(0,a.jsx)(g.Z,{titles:["page.js","components/Intro.jsx"],codes:['\'use client\'\nimport Footer from "@/components/Footer1";\n// import Footer from "@/components/Footer2";\nimport Intro from "@/components/Intro";\nimport { useEffect } from "react";\nimport Lenis from \'lenis\';\n\nexport default function Home() {\n\n  useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n  }, [])\n\n  return (\n    <main>\n      <Intro />\n      <Footer />\n    </main>\n  );\n}',"import React from 'react'\nimport Content from './Content';\n\nexport default function Footer() {\n  return (\n    <div \n      className='relative h-[800px]'\n      style={{clipPath: \"polygon(0% 0, 100% 0%, 100% 100%, 0 100%)\"}}\n    >\n      <div className='fixed bottom-0 h-[800px] w-full'>\n        <Content />\n      </div>\n    </div>\n  )\n}"],languages:["jsx","jsx"]}),(0,a.jsx)("h3",{children:"A Basic Footer:"}),(0,a.jsx)(g.Z,{titles:["components/Footer1.jsx","components/Content.jsx"],codes:["import React from 'react'\nimport Content from './Content';\n\nexport default function Footer() {\n  return (\n    <div>\n      <Content />\n    </div>\n  )\n}","import React from 'react'\n\nexport default function Content() {\n  return (\n    <div className='bg-[#4E4E5A] py-8 px-12 h-full w-full flex flex-col justify-between'>\n        <Section1 />\n        <Section2 />\n    </div>\n  )\n}\n\nconst Section1 = () => {\n    return (\n        <div>\n            <Nav />\n        </div>\n    )\n}\n\nconst Section2 = () => {\n    return (\n        <div className='flex justify-between items-end'>\n            <h1 className='text-[14vw] leading-[0.8] mt-10'>Sticky Footer</h1>\n            <p>\xa9copyright</p>\n        </div>\n    )\n}\n\nconst Nav = () => {\n    return (\n        <div className='flex shrink-0 gap-20'>\n            <div className='flex flex-col gap-2'>\n                <h3 className='mb-2 uppercase text-[#ffffff80]'>About</h3>\n                <p>Home</p>\n                <p>Projects</p>\n                <p>Our Mission</p>\n                <p>Contact Us</p>\n            </div>\n            <div className='flex flex-col gap-2'>\n                <h3 className='mb-2 uppercase text-[#ffffff80]'>Education</h3>\n                <p>News</p>\n                <p>Learn</p>\n                <p>Certification</p>\n                <p>Publications</p>\n            </div>\n        </div>\n    )\n}"],languages:["jsx","jsx"]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-footer/1.mov"}),(0,a.jsx)("h2",{children:"Method 1"}),(0,a.jsxs)("p",{children:["This is the first method of creating a sticky footer. All we have to do is use a mix of the position ",(0,a.jsx)("code",{className:"language-jsx",children:"fixed"})," and the CSS ",(0,a.jsx)("code",{className:"language-jsx",children:"clip-path"}),"."]}),(0,a.jsx)(x.Z,{title:"components/Footer1.jsx",code:"import React from 'react'\nimport Content from './Content';\n\nexport default function Footer() {\n  return (\n    <div \n      className='relative h-[800px]'\n      style={{clipPath: \"polygon(0% 0, 100% 0%, 100% 100%, 0 100%)\"}}\n    >\n      <div className='fixed bottom-0 h-[800px] w-full'>\n        <Content />\n      </div>\n    </div>\n  )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["The only downside here is we have to specify a ",(0,a.jsx)("b",{children:"height"})," for the footer."]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-footer/2.mov"}),(0,a.jsx)("h2",{children:"Method 2"}),(0,a.jsxs)("p",{children:["The second method of creating a sticky footer does not use the position fixed, which can be an advantage in some cases. However the implementation is a bit more complex, it uses the position ",(0,a.jsx)("code",{className:"language-jsx",children:"sticky"}),"."]}),(0,a.jsx)(x.Z,{title:"components/Footer2.jsx",code:"import React from 'react'\nimport Content from './Content';\n\nexport default function Footer() {\n  return (\n    <div \n        className='relative h-[800px]'\n        style={{clipPath: \"polygon(0% 0, 100% 0%, 100% 100%, 0 100%)\"}}\n    >\n        <div className='relative h-[calc(100vh+800px)] -top-[100vh]'>\n            <div className='h-[800px] sticky top-[calc(100vh-800px)]'>\n              <Content />\n            </div>\n        </div>\n    </div>\n  )\n}",language:"jsx"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["This method has the same downside as the previous one, we have to specify a ",(0,a.jsx)("b",{children:"height"})," for the footer."]})}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/sticky-footer/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this famous footer!"}),(0,a.jsx)("p",{children:"A very common type of footer among Awwwards winning websites, with a surprising easy implementation. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function text_parallax_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Creating the Project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"Creating 3 Slides"}),(0,a.jsxs)("p",{children:["Here I'll create 3 slides with a certain ",(0,a.jsx)("code",{className:"language-jsx",children:"left"})," position to randomize the layout."]}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"I initialize a Lenis scroll to have a smooth scroll"}),(0,a.jsxs)("li",{children:["I use an ",(0,a.jsx)("code",{className:"language-jsx",children:"overflow:hidden"})," on the parent to remove the horizontal scroll created by the long slides."]})]}),(0,a.jsx)(x.Z,{title:"page.js",code:"'use client'\nimport Picture1 from '../../public/images/1.jpg'\nimport Picture2 from '../../public/images/2.jpg'\nimport Picture3 from '../../public/images/3.jpg'\nimport Lenis from 'lenis';\nimport Image from 'next/image';\nimport { useEffect } from 'react';\n\nexport default function Home() {\n\n  useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n  }, [])\n\n  return (\n    <main className='overflow-hidden'>\n      <div className='h-[100vh]'/>\n      <Slide src={Picture1} left={\"-40%\"}/>\n      <Slide src={Picture2} left={\"-25%\"}/>\n      <Slide src={Picture3} left={\"-75%\"}/>\n      <div className='h-[100vh]' />\n    </main>\n  );\n}",language:"jsx"}),(0,a.jsx)("p",{children:"The slides all contain 3 phrases inside of them:"}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("p",{children:["Here the magic property is the ",(0,a.jsx)("code",{className:"language-jsx",children:"white-space"})," set at ",(0,a.jsx)("code",{className:"language-jsx",children:"nowrap"}),". This allows the 3 phrases to overflow outside the container and create a long slide larger than the width of the viewport."]})}),(0,a.jsx)(x.Z,{title:"page.js",code:'const Slide = (props) => {\n  return (\n    <div style={{left: props.left}} className="relative flex whitespace-nowrap">\n      <Phrase src={props.src}/>\n      <Phrase src={props.src}/>\n      <Phrase src={props.src}/>\n    </div>\n  )\n}\n  \nconst Phrase = ({src}) => {\n  return (\n    <div className={\'px-5 flex gap-5 items-center\'}>\n    <p className=\'text-[7.5vw]\'>Front End Developer</p>\n    <span className="relative h-[7.5vw] aspect-[4/2] rounded-full overflow-hidden">\n        <Image style={{objectFit: "cover"}} src={src} alt="image" fill/>\n    </span>\n    </div>\n  )\n}',language:"jsx",highlights:[3]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-parallax/2.mov"}),(0,a.jsx)("h2",{children:"Tracking the progress of the Scroll"}),(0,a.jsxs)("p",{children:["Here I'll use a mix of the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-scroll/",target:"_blank",children:"useScroll"})," and the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-transform/",children:"useTransform"})," hook from Framer Motion."]}),(0,a.jsx)("p",{children:"The first thing I need to do is track the progress of the scroll, then I can give the progresss of the sroll and a certain direction to each slide."}),(0,a.jsx)(x.Z,{title:"page.js",code:"export default function Home() {\n\n  const container = useRef();\n  const { scrollYProgress } = useScroll({\n    target: container,\n    offset: ['start end', 'end start']\n  })\n  ...\n  return (\n    <main className=\"overflow-hidden\">\n      <div className='h-[100vh]'/>\n      <div ref={container}>\n        <Slide src={Picture1} direction={'left'} left={\"-40%\"} progress={scrollYProgress}/>\n        <Slide src={Picture2} direction={'right'} left={\"-25%\"} progress={scrollYProgress}/>\n        <Slide src={Picture3} direction={'left'}  left={\"-75%\"} progress={scrollYProgress}/>\n      </div>\n      <div className='h-[100vh]' />\n    </main>\n  );\n}",language:"jsx"}),(0,a.jsx)("h2",{children:"Moving the Slides on Scroll"}),(0,a.jsxs)("p",{children:["Once I have access to the progress of the scroll and a certain direction, I can use all of that inside the ",(0,a.jsx)(d(),{target:"_blank",href:"https://www.framer.com/motion/use-transform/",children:"useTransform"})," hook to translate the phrases on scroll."]}),(0,a.jsx)(x.Z,{title:"page.js",code:"const Slide = (props) => {\n  const direction = props.direction == 'left' ? -1 : 1;\n  const translateX = useTransform(props.progress, [0, 1], [150 * direction, -150 * direction])\n\n  return (\n    <motion.div style={{x: translateX, left: props.left}} className=\"relative flex whitespace-nowrap\">\n      <Phrase src={props.src}/>\n      <Phrase src={props.src}/>\n      <Phrase src={props.src}/>\n    </motion.div>\n  )\n}",language:"jsx"}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/text-parallax/1.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"A very common animation that adds a little extra to any website, hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function background_image_parallax_index(){return(0,a.jsxs)("div",{className:"blog",children:[(0,a.jsx)("h2",{children:"Creating the Project"}),(0,a.jsxs)("p",{children:["Let's start the project by creating a Next.js application. We can do that by running ",(0,a.jsx)("code",{className:"language-jsx",children:"npx create-next-app@latest client"})," inside of a terminal."]}),(0,a.jsx)("div",{className:"note",children:(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["We will use Framer Motion for the animation, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i framer-motion"}),"."]}),(0,a.jsxs)("li",{children:["We will use the Lenis Scroll for the smooth scrolling, so we can run ",(0,a.jsx)("code",{className:"language-jsx",children:"npm i lenis"}),"."]})]})}),(0,a.jsx)("h2",{children:"Basic Background Parallax"}),(0,a.jsx)("p",{children:"The basics of creating a background image parallax is as follow:"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Create a container with an overflow hidden"}),(0,a.jsx)("li",{children:"Add an image inside of that container taking the full width and height of it"}),(0,a.jsx)("li",{children:"Translate the image on scroll"})]}),(0,a.jsx)(x.Z,{title:"components/Intro.jsx",code:"import React from 'react'\nimport Image from 'next/image';\nimport Background from '../../public/images/2.jpg';\nimport { useScroll, useTransform, motion } from 'framer-motion';\nimport { useRef } from 'react';\n\nexport default function Intro() {\n    const container = useRef();\n    const { scrollYProgress } = useScroll({\n      target: container,\n      offset: ['start start', 'end start']\n    })\n  \n    const y = useTransform(scrollYProgress, [0, 1], [\"0vh\", \"150vh\"])\n  \n    return (\n      <div className='h-screen overflow-hidden'>\n        <motion.div style={{y}} className='relative h-full'>\n          <Image src={Background} fill alt=\"image\" style={{objectFit: \"cover\"}}/>\n        </motion.div>\n      </div>\n    )\n}",language:"jsx"}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the code above:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The progress of the scroll is tracked using the ",(0,a.jsx)(d(),{href:"https://www.framer.com/motion/use-scroll/",target:"_blank",children:"useScroll Hook"})]}),(0,a.jsxs)("li",{children:["Since the component is the first inside the page, we use an offset of ",(0,a.jsx)("code",{className:"language-jsx",children:"['start start']"})]}),(0,a.jsxs)("li",{children:["The progress of the scroll (a value between 0 and 1) is transformed into a value between 0vh and 150vh and used as a ",(0,a.jsx)("code",{className:"language-jsx",children:"translateY"})," value"]})]})]}),(0,a.jsxs)("p",{children:["Then I'm adding that component inside the ",(0,a.jsx)("code",{className:"language-jsx",children:"page.js"}),":"]}),(0,a.jsx)(g.Z,{titles:["page.js","components/Description.jsx"],codes:["'use client';\nimport { useEffect } from 'react';\nimport Lenis from 'lenis'\nimport Intro from '@/components/Intro';\nimport Description from '@/components/Description';\n\nexport default function Home() {\n\n  useEffect( () => {\n    const lenis = new Lenis()\n\n    function raf(time) {\n      lenis.raf(time)\n      requestAnimationFrame(raf)\n    }\n\n    requestAnimationFrame(raf)\n  }, [])\n\n  return (\n    <main>\n      <Intro />\n      <Description />\n      <div className='h-screen'></div>\n    </main>\n  );\n}","import React from 'react'\n\nexport default function Description() {\n    return (\n        <div className='flex justify-center my-40'>\n            <p className='text-[7.5vw] uppercase text-center max-w-[50vw] leading-none'>The quick brown fox jumps over the lazy dog</p>\n        </div>\n    )\n}"],languages:["jsx","jsx"],highlights:[[22],[]]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/background-image-parallax/1.mov"}),(0,a.jsx)("h2",{children:"Advanced Background Parallax"}),(0,a.jsxs)("p",{children:["The other way of making a background parallax is the same way but instead the container will be in position ",(0,a.jsx)("code",{className:"language-jsx",children:"fixed"}),"."]}),(0,a.jsx)(x.Z,{title:"components/Section.jsx",code:"import Image from 'next/image';\nimport Background from '../../public/images/1.jpg';\nimport Text from './components/Text';\nimport { useScroll, useTransform, motion } from 'framer-motion';\nimport { useRef } from 'react';\n\nexport default function Section() {\n    const container = useRef();\n    const { scrollYProgress } = useScroll({\n        target: container,\n        offset: [\"start end\", 'end start']\n    })\n    const y = useTransform(scrollYProgress, [0, 1], [\"-10vh\", \"10vh\"]);\n\n    return (\n        <div\n            ref={container} \n            className='relative flex items-center justify-center h-screen overflow-hidden'\n            style={{clipPath: \"polygon(0% 0, 100% 0%, 100% 100%, 0 100%)\"}}\n        >\n        <Text />\n        <div className='fixed top-[-10vh] left-0 h-[120vh] w-full'>\n            <motion.div style={{y}} className='relative w-full h-full'>\n                <Image src={Background} fill alt=\"image\" style={{objectFit: \"cover\"}}/>\n            </motion.div>\n        </div>\n        </div>\n    )\n}",language:"jsx",highlights:[19,22]}),(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("p",{children:(0,a.jsx)("b",{children:"Couple notes about the above code:"})}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:["The image container is in position fixed, so we need to add a ",(0,a.jsx)("code",{className:"language-jsx",children:"clip-path"})," on the parent to crop that fixed div."]}),(0,a.jsx)("li",{children:"The same principles apply from the previous implementation, we translate the image based on the position of the scroll."}),(0,a.jsx)("li",{children:"The amount translated here (-10vh and 10vh) should be accounted in the height of the fixed container (120vh)."})]})]}),(0,a.jsx)("h3",{children:"We should have something like this:"}),(0,a.jsx)(j.Z,{handle:"/medias/tutorials/background-image-parallax/2.mov"}),(0,a.jsx)("h3",{children:"Wrapping up"}),(0,a.jsx)("p",{children:"That's it for this animation!"}),(0,a.jsx)("p",{children:"A super clean animation that in my opinion should be in almost every single websites, it really adds a nice dimensionality and brins it to another level of quality. Hope you learned something!"}),(0,a.jsx)("p",{children:"-Oli"})]})}function body_index(e){let{handle:n}=e;return(0,a.jsx)("div",{id:"body",children:"project-gallery-colored-card"===n?(0,a.jsx)(Project_gallery_colored_card_index,{}):"svg-bezier-curve"===n?(0,a.jsx)(Svg_bezier_curve_index,{}):"3d-perspective-text"===n?(0,a.jsx)(index,{}):"cartoon-cursor-trailing"===n?(0,a.jsx)(cartoon_cursor_trailing_index,{}):"text-mask-animation"===n?(0,a.jsx)(text_mask_animation_index,{}):"pixel-cursor-trailing"===n?(0,a.jsx)(pixel_cursor_trailing_index,{}):"mouse-image-gallery"===n?(0,a.jsx)(mouse_image_gallery_index,{}):"image-slide-project-gallery"===n?(0,a.jsx)(image_slide_project_gallery_index,{}):"image-pixelisation-lazy-loading"===n?(0,a.jsx)(image_pixelisation_lazy_loading_index,{}):"text-clip-mask-on-scroll"===n?(0,a.jsx)(text_clip_mask_on_scroll_index,{}):"svg-curve-loading"===n?(0,a.jsx)(svg_curve_loading_index,{}):"infinite-text-move-on-scroll"===n?(0,a.jsx)(infinite_text_move_on_scroll_index,{}):"text-disperse-effect"===n?(0,a.jsx)(text_disperse_effect_index,{}):"text-gradient-opacity-on-scroll"===n?(0,a.jsx)(text_gradient_opacity_on_scroll_index,{}):"project-gallery-mouse-hover"===n?(0,a.jsx)(project_gallery_mouse_hover_index,{}):"smooth-scroll"===n?(0,a.jsx)(smooth_scroll_index,{}):"navigation-menu"===n?(0,a.jsx)(navigation_menu_index,{}):"mouse-scale-image-gallery"===n?(0,a.jsx)(mouse_scale_image_gallery_index,{}):"floating-image-gallery"===n?(0,a.jsx)(floating_image_gallery_index,{}):"curved-menu"===n?(0,a.jsx)(curved_menu_index,{}):"awwwards-landing-page"===n?(0,a.jsx)(awwwards_landing_page_index,{}):"mask-cursor-effect"===n?(0,a.jsx)(mask_cursor_effect_index,{}):"sliding-stairs-menu"===n?(0,a.jsx)(sliding_stairs_menu_index,{}):"smooth-parallax-scroll"===n?(0,a.jsx)(parallax_scroll_slider_index,{}):"svg-mask-scroll"===n?(0,a.jsx)(svg_mask_scroll_index,{}):"magnetic-button"===n?(0,a.jsx)(magnetic_button_index,{}):"split-vignette"===n?(0,a.jsx)(split_vignette_index,{}):"svg-morph"===n?(0,a.jsx)(svg_morph_index,{}):"3d-earth"===n?(0,a.jsx)(_3d_earth_index,{}):"3d-cube"===n?(0,a.jsx)(_3d_cube_index,{}):"sticky-cursor"===n?(0,a.jsx)(sticky_cursor_index,{}):"pixel-transition"===n?(0,a.jsx)(pixel_transition_index,{}):"painting-animation"===n?(0,a.jsx)(painting_animation_index,{}):"3d-float-effect"===n?(0,a.jsx)(_3d_float_effect_index,{}):"awwwards-side-menu"===n?(0,a.jsx)(awwwards_side_menu_index,{}):"cards-parallax"===n?(0,a.jsx)(cards_parallax_index,{}):"text-gradient-scroll-opacity-v2"===n?(0,a.jsx)(text_scroll_gradient_opacity_v2_index,{}):"parallax-scroll"===n?(0,a.jsx)(parallax_scroll_index,{}):"zoom-parallax"===n?(0,a.jsx)(zoom_parallax_index,{}):"text-gooey"===n?(0,a.jsx)(text_gooey_index,{}):"creative-404"===n?(0,a.jsx)(creative_404_index,{}):"3d-glass-effect"===n?(0,a.jsx)(_3d_glass_effect_index,{}):"text-along-path"===n?(0,a.jsx)(text_along_path_index,{}):"creative-buttons"===n?(0,a.jsx)(creative_buttons_index,{}):"blend-mode-cursor"===n?(0,a.jsx)(blend_mode_cursor_index,{}):"3d-wave-on-scroll"===n?(0,a.jsx)(_3d_wave_on_scroll_index,{}):"paint-reveal"===n?(0,a.jsx)(paint_reveal_index,{}):"perspective-section-transition"===n?(0,a.jsx)(perspective_section_transition_index,{}):"sticky-footer"===n?(0,a.jsx)(sticky_footer_index,{}):"text-parallax"===n?(0,a.jsx)(text_parallax_index,{}):"background-image-parallax"===n?(0,a.jsx)(background_image_parallax_index,{}):void 0})}var y=t(33745);function relatedAnimations_index(e){let{relatedAnimations:n}=e;return(0,a.jsxs)("div",{className:"relatedAnimations",children:[(0,a.jsx)("h2",{children:"Related Animations"}),(0,a.jsx)("div",{className:"tutorials",children:n.map((e,n)=>(0,a.jsx)(y.Z,{animation:e,priority:!1},n))})]})}var w=t(11163),b=t(29859),N=t(91434);function footer_index(e){let{tweet:n}=e,{isFallback:t}=(0,w.useRouter)();return(0,a.jsxs)("div",{className:"animation-footer",children:[(0,a.jsx)("h3",{children:"If you liked this tutorial, leave a like, I would highly appreciate it!"}),t?(0,a.jsx)(b.X,{}):(0,a.jsx)(N.$,{tweet:n})]})}function message_index(e){let{data:n}=e,{course:t}=n;return(0,a.jsx)("div",{className:"animation-message",children:(0,a.jsxs)("div",{className:"note",children:[(0,a.jsx)("h3",{children:"It seems you don’t have access to this tutorial."}),(0,a.jsxs)("p",{children:["This tutorial is part of the ",(0,a.jsx)(d(),{href:"/courses/".concat(t.handle),children:t.title}),"."]}),(0,a.jsx)("a",{href:"/courses/".concat(t.handle),children:(0,a.jsx)("div",{className:"button",children:(0,a.jsx)("p",{children:"Learn more"})})})]})})}function animation_index(e){let{data:n,relatedAnimations:t}=e,{course:s}=n;return(0,a.jsxs)("div",{className:"tutorial",children:[(0,a.jsxs)("div",{className:"tutorialContainer",children:[(0,a.jsx)(Index,{data:n}),s&&(0,a.jsx)(message_index,{data:n}),!s&&(0,a.jsx)(body_index,{handle:n.handle}),n.tweet&&(0,a.jsx)(footer_index,{tweet:n.tweet}),t.length>0&&(0,a.jsx)(relatedAnimations_index,{relatedAnimations:t})]}),!s&&(0,a.jsx)(tableOfContents_Index,{data:n})]})}var k=t(9008),S=t.n(k),T=t(61072),C=!0;function _handle_Index(e){let{animation:n,relatedAnimations:t,tabs:s}=e;return(0,a.jsxs)(T.Z,{tabs:s,children:[(0,a.jsxs)(S(),{children:[(0,a.jsx)("title",{children:n.metaTitle}),(0,a.jsx)("meta",{name:"description",content:n.description}),(0,a.jsx)("meta",{property:"og:title",content:n.metaTitle}),(0,a.jsx)("meta",{property:"og:type",content:"website"}),(0,a.jsx)("meta",{property:"og:url",content:"https://blog.olivierlarose.com/tutorials/".concat(n.handle)}),(0,a.jsx)("meta",{property:"og:image",content:n.metaImage}),(0,a.jsx)("meta",{name:"twitter:title",content:n.metaTitle}),(0,a.jsx)("meta",{name:"twitter:description",content:n.description}),(0,a.jsx)("meta",{name:"twitter:image",content:n.metaImage}),(0,a.jsx)("meta",{name:"twitter:site",content:"https://blog.olivierlarose.com/"}),(0,a.jsx)("meta",{name:"twitter:creator",content:"@MeshDojo"})]}),(0,a.jsx)(animation_index,{data:n,relatedAnimations:t})]})}},58688:function(e,n,t){},55144:function(e,n,t){"use strict";var s,i;t.d(n,{z:function(){return s}}),(i=s||(s={}))[i.Jan=0]="Jan",i[i.Feb=1]="Feb",i[i.March=2]="March",i[i.April=3]="April",i[i.May=4]="May",i[i.June=5]="June",i[i.Jul=6]="Jul",i[i.Aug=7]="Aug",i[i.Sept=8]="Sept",i[i.Oct=9]="Oct",i[i.Nov=10]="Nov",i[i.Dec=11]="Dec"}},function(e){e.O(0,[4088,2594,9774,2888,179],function(){return e(e.s=38479)}),_N_E=e.O()}]);